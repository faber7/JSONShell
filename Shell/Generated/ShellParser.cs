//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Shell.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Shell.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
public partial class ShellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EOL=1, WS=2, KW_TRUE=3, KW_FALSE=4, KW_IF=5, KW_ELSE=6, KW_FOR=7, KW_IN=8, 
		KW_RETURN=9, KW_LET=10, KW_FUN=11, KW_IS=12, KW_NAMESPACE=13, KW_USING=14, 
		KW_AS=15, TYPE_OBJECT=16, TYPE_ARRAY=17, TYPE_NUMBER=18, TYPE_STRING=19, 
		TYPE_BOOL=20, TYPE_ANY=21, TYPE_NULL=22, LSQR=23, RSQR=24, LCURL=25, RCURL=26, 
		LPAREN=27, RPAREN=28, SYM_PERIOD=29, SYM_COMMA=30, SYM_QUOTE=31, SYM_COLON=32, 
		SYM_DOLLAR=33, OP_ASSGN=34, OP_EQ=35, OP_NE=36, OP_LT=37, OP_LE=38, OP_GT=39, 
		OP_GE=40, OP_NOT=41, OP_OR=42, OP_AND=43, OP_ADD=44, OP_SUB=45, OP_DIV=46, 
		OP_MUL=47, OP_MOD=48, IDENTIFIER=49, STRING=50, NUMBER=51, NONDIGIT=52, 
		DIGIT=53, NONZERO_DIGIT=54, ZERO=55, SIGN=56, INT=57, FRAC=58, EXP=59, 
		HEX=60, UNICODE=61, ESC=62, SAFECODEPOINT=63;
	public const int
		RULE_program = 0, RULE_program_statement = 1, RULE_statement = 2, RULE_load_namespace = 3, 
		RULE_namespace_declaration = 4, RULE_namespaced_statement = 5, RULE_namespaced_declaration = 6, 
		RULE_program_shorthand = 7, RULE_statement_block = 8, RULE_declaration = 9, 
		RULE_function = 10, RULE_function_argument = 11, RULE_control = 12, RULE_control_if = 13, 
		RULE_if_then = 14, RULE_if_then_else = 15, RULE_control_for = 16, RULE_control_return = 17, 
		RULE_expression = 18, RULE_expression_or = 19, RULE_expression_and = 20, 
		RULE_expression_equality = 21, RULE_expression_relational = 22, RULE_expression_additive = 23, 
		RULE_expression_multiplicative = 24, RULE_expression_unary = 25, RULE_expression_primary = 26, 
		RULE_function_call = 27, RULE_term = 28, RULE_identifier_namespaced = 29, 
		RULE_value = 30, RULE_bool = 31, RULE_array = 32, RULE_pair = 33, RULE_object = 34, 
		RULE_argument_type_specifier = 35, RULE_value_type_specifier = 36;
	public static readonly string[] ruleNames = {
		"program", "program_statement", "statement", "load_namespace", "namespace_declaration", 
		"namespaced_statement", "namespaced_declaration", "program_shorthand", 
		"statement_block", "declaration", "function", "function_argument", "control", 
		"control_if", "if_then", "if_then_else", "control_for", "control_return", 
		"expression", "expression_or", "expression_and", "expression_equality", 
		"expression_relational", "expression_additive", "expression_multiplicative", 
		"expression_unary", "expression_primary", "function_call", "term", "identifier_namespaced", 
		"value", "bool", "array", "pair", "object", "argument_type_specifier", 
		"value_type_specifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\n'", null, "'true'", "'false'", "'if'", "'else'", "'for'", "'in'", 
		"'return'", "'let'", "'fun'", "'is'", "'namespace'", "'using'", "'as'", 
		"'object'", "'array'", "'number'", "'string'", "'bool'", "'any'", "'null'", 
		"'['", "']'", "'{'", "'}'", "'('", "')'", "'.'", "','", "'\"'", "':'", 
		"'$'", "'='", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'!'", "'|'", 
		"'&'", "'+'", "'-'", "'/'", "'*'", "'%'", null, null, null, null, null, 
		null, "'0'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EOL", "WS", "KW_TRUE", "KW_FALSE", "KW_IF", "KW_ELSE", "KW_FOR", 
		"KW_IN", "KW_RETURN", "KW_LET", "KW_FUN", "KW_IS", "KW_NAMESPACE", "KW_USING", 
		"KW_AS", "TYPE_OBJECT", "TYPE_ARRAY", "TYPE_NUMBER", "TYPE_STRING", "TYPE_BOOL", 
		"TYPE_ANY", "TYPE_NULL", "LSQR", "RSQR", "LCURL", "RCURL", "LPAREN", "RPAREN", 
		"SYM_PERIOD", "SYM_COMMA", "SYM_QUOTE", "SYM_COLON", "SYM_DOLLAR", "OP_ASSGN", 
		"OP_EQ", "OP_NE", "OP_LT", "OP_LE", "OP_GT", "OP_GE", "OP_NOT", "OP_OR", 
		"OP_AND", "OP_ADD", "OP_SUB", "OP_DIV", "OP_MUL", "OP_MOD", "IDENTIFIER", 
		"STRING", "NUMBER", "NONDIGIT", "DIGIT", "NONZERO_DIGIT", "ZERO", "SIGN", 
		"INT", "FRAC", "EXP", "HEX", "UNICODE", "ESC", "SAFECODEPOINT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Shell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ShellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ShellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ShellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public Program_statementContext[] program_statement() {
			return GetRuleContexts<Program_statementContext>();
		}
		public Program_statementContext program_statement(int i) {
			return GetRuleContext<Program_statementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 74; program_statement();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOL) | (1L << KW_TRUE) | (1L << KW_FALSE) | (1L << KW_IF) | (1L << KW_FOR) | (1L << KW_RETURN) | (1L << KW_LET) | (1L << KW_NAMESPACE) | (1L << KW_USING) | (1L << TYPE_NULL) | (1L << LSQR) | (1L << LCURL) | (1L << LPAREN) | (1L << SYM_DOLLAR) | (1L << OP_NOT) | (1L << OP_SUB) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Program_statementContext : ParserRuleContext {
		public Namespace_declarationContext namespace_declaration() {
			return GetRuleContext<Namespace_declarationContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(ShellParser.EOL, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Program_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Program_statementContext program_statement() {
		Program_statementContext _localctx = new Program_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_program_statement);
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79; namespace_declaration();
				State = 80; Match(EOL);
				}
				break;
			case EOL:
			case KW_TRUE:
			case KW_FALSE:
			case KW_IF:
			case KW_FOR:
			case KW_RETURN:
			case KW_LET:
			case KW_USING:
			case TYPE_NULL:
			case LSQR:
			case LCURL:
			case LPAREN:
			case SYM_DOLLAR:
			case OP_NOT:
			case OP_SUB:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode EOL() { return GetToken(ShellParser.EOL, 0); }
		public Load_namespaceContext load_namespace() {
			return GetRuleContext<Load_namespaceContext>(0);
		}
		public Program_shorthandContext program_shorthand() {
			return GetRuleContext<Program_shorthandContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ControlContext control() {
			return GetRuleContext<ControlContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 85; Match(EOL);
				}
				break;
			case KW_USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86; load_namespace();
				State = 87; Match(EOL);
				}
				break;
			case SYM_DOLLAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 89; program_shorthand();
				State = 90; Match(EOL);
				}
				break;
			case KW_LET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 92; declaration();
				State = 93; Match(EOL);
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case TYPE_NULL:
			case LSQR:
			case LCURL:
			case LPAREN:
			case OP_NOT:
			case OP_SUB:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 95; expression();
				State = 96; Match(EOL);
				}
				break;
			case KW_IF:
			case KW_FOR:
			case KW_RETURN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 98; control();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Load_namespaceContext : ParserRuleContext {
		public ITerminalNode KW_USING() { return GetToken(ShellParser.KW_USING, 0); }
		public ITerminalNode STRING() { return GetToken(ShellParser.STRING, 0); }
		public ITerminalNode KW_AS() { return GetToken(ShellParser.KW_AS, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(ShellParser.IDENTIFIER, 0); }
		public Load_namespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load_namespace; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoad_namespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Load_namespaceContext load_namespace() {
		Load_namespaceContext _localctx = new Load_namespaceContext(Context, State);
		EnterRule(_localctx, 6, RULE_load_namespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(KW_USING);
			State = 102; Match(STRING);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_AS) {
				{
				State = 103; Match(KW_AS);
				State = 104; Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_declarationContext : ParserRuleContext {
		public ITerminalNode KW_NAMESPACE() { return GetToken(ShellParser.KW_NAMESPACE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(ShellParser.IDENTIFIER, 0); }
		public ITerminalNode LCURL() { return GetToken(ShellParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(ShellParser.RCURL, 0); }
		public ITerminalNode[] EOL() { return GetTokens(ShellParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(ShellParser.EOL, i);
		}
		public Namespaced_statementContext[] namespaced_statement() {
			return GetRuleContexts<Namespaced_statementContext>();
		}
		public Namespaced_statementContext namespaced_statement(int i) {
			return GetRuleContext<Namespaced_statementContext>(i);
		}
		public Namespace_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_declarationContext namespace_declaration() {
		Namespace_declarationContext _localctx = new Namespace_declarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_namespace_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; Match(KW_NAMESPACE);
			State = 108; Match(IDENTIFIER);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 109; Match(EOL);
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 115; Match(LCURL);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOL) | (1L << KW_NAMESPACE) | (1L << KW_USING) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 116; namespaced_statement();
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 122; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespaced_statementContext : ParserRuleContext {
		public ITerminalNode EOL() { return GetToken(ShellParser.EOL, 0); }
		public Namespaced_declarationContext namespaced_declaration() {
			return GetRuleContext<Namespaced_declarationContext>(0);
		}
		public Namespace_declarationContext namespace_declaration() {
			return GetRuleContext<Namespace_declarationContext>(0);
		}
		public Load_namespaceContext load_namespace() {
			return GetRuleContext<Load_namespaceContext>(0);
		}
		public Namespaced_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaced_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaced_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespaced_statementContext namespaced_statement() {
		Namespaced_statementContext _localctx = new Namespaced_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespaced_statement);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124; Match(EOL);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; namespaced_declaration();
				State = 126; Match(EOL);
				}
				break;
			case KW_NAMESPACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 128; namespace_declaration();
				State = 129; Match(EOL);
				}
				break;
			case KW_USING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 131; load_namespace();
				State = 132; Match(EOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespaced_declarationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ShellParser.IDENTIFIER, 0); }
		public ITerminalNode OP_ASSGN() { return GetToken(ShellParser.OP_ASSGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public Namespaced_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaced_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaced_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespaced_declarationContext namespaced_declaration() {
		Namespaced_declarationContext _localctx = new Namespaced_declarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_namespaced_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(IDENTIFIER);
			State = 137; Match(OP_ASSGN);
			State = 140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case TYPE_NULL:
			case LSQR:
			case LCURL:
			case LPAREN:
			case OP_NOT:
			case OP_SUB:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				{
				State = 138; expression();
				}
				break;
			case KW_FUN:
				{
				State = 139; function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Program_shorthandContext : ParserRuleContext {
		public ITerminalNode SYM_DOLLAR() { return GetToken(ShellParser.SYM_DOLLAR, 0); }
		public ITerminalNode[] EOL() { return GetTokens(ShellParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(ShellParser.EOL, i);
		}
		public Program_shorthandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program_shorthand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram_shorthand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Program_shorthandContext program_shorthand() {
		Program_shorthandContext _localctx = new Program_shorthandContext(Context, State);
		EnterRule(_localctx, 14, RULE_program_shorthand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(SYM_DOLLAR);
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WS) | (1L << KW_TRUE) | (1L << KW_FALSE) | (1L << KW_IF) | (1L << KW_ELSE) | (1L << KW_FOR) | (1L << KW_IN) | (1L << KW_RETURN) | (1L << KW_LET) | (1L << KW_FUN) | (1L << KW_IS) | (1L << KW_NAMESPACE) | (1L << KW_USING) | (1L << KW_AS) | (1L << TYPE_OBJECT) | (1L << TYPE_ARRAY) | (1L << TYPE_NUMBER) | (1L << TYPE_STRING) | (1L << TYPE_BOOL) | (1L << TYPE_ANY) | (1L << TYPE_NULL) | (1L << LSQR) | (1L << RSQR) | (1L << LCURL) | (1L << RCURL) | (1L << LPAREN) | (1L << RPAREN) | (1L << SYM_PERIOD) | (1L << SYM_COMMA) | (1L << SYM_QUOTE) | (1L << SYM_COLON) | (1L << SYM_DOLLAR) | (1L << OP_ASSGN) | (1L << OP_EQ) | (1L << OP_NE) | (1L << OP_LT) | (1L << OP_LE) | (1L << OP_GT) | (1L << OP_GE) | (1L << OP_NOT) | (1L << OP_OR) | (1L << OP_AND) | (1L << OP_ADD) | (1L << OP_SUB) | (1L << OP_DIV) | (1L << OP_MUL) | (1L << OP_MOD) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER) | (1L << NONDIGIT) | (1L << DIGIT) | (1L << NONZERO_DIGIT) | (1L << ZERO) | (1L << SIGN) | (1L << INT) | (1L << FRAC) | (1L << EXP) | (1L << HEX) | (1L << UNICODE) | (1L << ESC) | (1L << SAFECODEPOINT))) != 0)) {
				{
				{
				State = 143;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==EOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_blockContext : ParserRuleContext {
		public ITerminalNode LCURL() { return GetToken(ShellParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(ShellParser.RCURL, 0); }
		public ITerminalNode EOL() { return GetToken(ShellParser.EOL, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_blockContext statement_block() {
		Statement_blockContext _localctx = new Statement_blockContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 149; Match(EOL);
				}
			}

			State = 152; Match(LCURL);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOL) | (1L << KW_TRUE) | (1L << KW_FALSE) | (1L << KW_IF) | (1L << KW_FOR) | (1L << KW_RETURN) | (1L << KW_LET) | (1L << KW_USING) | (1L << TYPE_NULL) | (1L << LSQR) | (1L << LCURL) | (1L << LPAREN) | (1L << SYM_DOLLAR) | (1L << OP_NOT) | (1L << OP_SUB) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				{
				State = 153; statement();
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 159; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode KW_LET() { return GetToken(ShellParser.KW_LET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(ShellParser.IDENTIFIER, 0); }
		public ITerminalNode OP_ASSGN() { return GetToken(ShellParser.OP_ASSGN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ITerminalNode[] LSQR() { return GetTokens(ShellParser.LSQR); }
		public ITerminalNode LSQR(int i) {
			return GetToken(ShellParser.LSQR, i);
		}
		public ITerminalNode[] RSQR() { return GetTokens(ShellParser.RSQR); }
		public ITerminalNode RSQR(int i) {
			return GetToken(ShellParser.RSQR, i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(KW_LET);
			State = 162; Match(IDENTIFIER);
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LSQR) {
				{
				{
				State = 163; Match(LSQR);
				State = 164; expression();
				State = 165; Match(RSQR);
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 172; Match(OP_ASSGN);
			State = 175;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case TYPE_NULL:
			case LSQR:
			case LCURL:
			case LPAREN:
			case OP_NOT:
			case OP_SUB:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				{
				State = 173; expression();
				}
				break;
			case KW_FUN:
				{
				State = 174; function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode KW_FUN() { return GetToken(ShellParser.KW_FUN, 0); }
		public ITerminalNode LPAREN() { return GetToken(ShellParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(ShellParser.RPAREN, 0); }
		public Statement_blockContext statement_block() {
			return GetRuleContext<Statement_blockContext>(0);
		}
		public Function_argumentContext[] function_argument() {
			return GetRuleContexts<Function_argumentContext>();
		}
		public Function_argumentContext function_argument(int i) {
			return GetRuleContext<Function_argumentContext>(i);
		}
		public ITerminalNode[] SYM_COMMA() { return GetTokens(ShellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(ShellParser.SYM_COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 20, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(KW_FUN);
			State = 178; Match(LPAREN);
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE_OBJECT) | (1L << TYPE_ARRAY) | (1L << TYPE_NUMBER) | (1L << TYPE_STRING) | (1L << TYPE_BOOL) | (1L << TYPE_ANY) | (1L << TYPE_NULL))) != 0)) {
				{
				State = 179; function_argument();
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 180; Match(SYM_COMMA);
					State = 181; function_argument();
					}
					}
					State = 186;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 189; Match(RPAREN);
			State = 190; statement_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argumentContext : ParserRuleContext {
		public Argument_type_specifierContext argument_type_specifier() {
			return GetRuleContext<Argument_type_specifierContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(ShellParser.IDENTIFIER, 0); }
		public Function_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_argument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentContext function_argument() {
		Function_argumentContext _localctx = new Function_argumentContext(Context, State);
		EnterRule(_localctx, 22, RULE_function_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; argument_type_specifier();
			State = 193; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlContext : ParserRuleContext {
		public Control_ifContext control_if() {
			return GetRuleContext<Control_ifContext>(0);
		}
		public Control_forContext control_for() {
			return GetRuleContext<Control_forContext>(0);
		}
		public Control_returnContext control_return() {
			return GetRuleContext<Control_returnContext>(0);
		}
		public ControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlContext control() {
		ControlContext _localctx = new ControlContext(Context, State);
		EnterRule(_localctx, 24, RULE_control);
		try {
			State = 198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 195; control_if();
				}
				break;
			case KW_FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196; control_for();
				}
				break;
			case KW_RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 197; control_return();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Control_ifContext : ParserRuleContext {
		public If_thenContext if_then() {
			return GetRuleContext<If_thenContext>(0);
		}
		public If_then_elseContext if_then_else() {
			return GetRuleContext<If_then_elseContext>(0);
		}
		public Control_ifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control_if; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControl_if(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Control_ifContext control_if() {
		Control_ifContext _localctx = new Control_ifContext(Context, State);
		EnterRule(_localctx, 26, RULE_control_if);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 200; if_then();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 201; if_then_else();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_thenContext : ParserRuleContext {
		public ITerminalNode KW_IF() { return GetToken(ShellParser.KW_IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_blockContext statement_block() {
			return GetRuleContext<Statement_blockContext>(0);
		}
		public If_thenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_then; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_then(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_thenContext if_then() {
		If_thenContext _localctx = new If_thenContext(Context, State);
		EnterRule(_localctx, 28, RULE_if_then);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; Match(KW_IF);
			State = 205; expression();
			State = 206; statement_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_then_elseContext : ParserRuleContext {
		public If_thenContext if_then() {
			return GetRuleContext<If_thenContext>(0);
		}
		public ITerminalNode KW_ELSE() { return GetToken(ShellParser.KW_ELSE, 0); }
		public Statement_blockContext statement_block() {
			return GetRuleContext<Statement_blockContext>(0);
		}
		public Control_ifContext control_if() {
			return GetRuleContext<Control_ifContext>(0);
		}
		public If_then_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_then_else; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_then_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_then_elseContext if_then_else() {
		If_then_elseContext _localctx = new If_then_elseContext(Context, State);
		EnterRule(_localctx, 30, RULE_if_then_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; if_then();
			State = 209; Match(KW_ELSE);
			State = 212;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
			case LCURL:
				{
				State = 210; statement_block();
				}
				break;
			case KW_IF:
				{
				State = 211; control_if();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Control_forContext : ParserRuleContext {
		public ITerminalNode KW_FOR() { return GetToken(ShellParser.KW_FOR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(ShellParser.IDENTIFIER, 0); }
		public ITerminalNode KW_IN() { return GetToken(ShellParser.KW_IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_blockContext statement_block() {
			return GetRuleContext<Statement_blockContext>(0);
		}
		public Control_forContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control_for; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControl_for(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Control_forContext control_for() {
		Control_forContext _localctx = new Control_forContext(Context, State);
		EnterRule(_localctx, 32, RULE_control_for);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(KW_FOR);
			State = 215; Match(IDENTIFIER);
			State = 216; Match(KW_IN);
			State = 217; expression();
			State = 218; statement_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Control_returnContext : ParserRuleContext {
		public ITerminalNode KW_RETURN() { return GetToken(ShellParser.KW_RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Control_returnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control_return; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControl_return(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Control_returnContext control_return() {
		Control_returnContext _localctx = new Control_returnContext(Context, State);
		EnterRule(_localctx, 34, RULE_control_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(KW_RETURN);
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 221; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Expression_orContext expression_or() {
			return GetRuleContext<Expression_orContext>(0);
		}
		public ITerminalNode KW_IS() { return GetToken(ShellParser.KW_IS, 0); }
		public Value_type_specifierContext value_type_specifier() {
			return GetRuleContext<Value_type_specifierContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_expression);
		int _la;
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 224; expression_or();
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_IS) {
					{
					State = 225; Match(KW_IS);
					State = 226; value_type_specifier();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 229; function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_orContext : ParserRuleContext {
		public Expression_andContext[] expression_and() {
			return GetRuleContexts<Expression_andContext>();
		}
		public Expression_andContext expression_and(int i) {
			return GetRuleContext<Expression_andContext>(i);
		}
		public ITerminalNode[] OP_OR() { return GetTokens(ShellParser.OP_OR); }
		public ITerminalNode OP_OR(int i) {
			return GetToken(ShellParser.OP_OR, i);
		}
		public Expression_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_or; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_orContext expression_or() {
		Expression_orContext _localctx = new Expression_orContext(Context, State);
		EnterRule(_localctx, 38, RULE_expression_or);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; expression_and();
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_OR) {
				{
				{
				State = 233; Match(OP_OR);
				State = 234; expression_and();
				}
				}
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_andContext : ParserRuleContext {
		public Expression_equalityContext[] expression_equality() {
			return GetRuleContexts<Expression_equalityContext>();
		}
		public Expression_equalityContext expression_equality(int i) {
			return GetRuleContext<Expression_equalityContext>(i);
		}
		public ITerminalNode[] OP_AND() { return GetTokens(ShellParser.OP_AND); }
		public ITerminalNode OP_AND(int i) {
			return GetToken(ShellParser.OP_AND, i);
		}
		public Expression_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_and; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_andContext expression_and() {
		Expression_andContext _localctx = new Expression_andContext(Context, State);
		EnterRule(_localctx, 40, RULE_expression_and);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; expression_equality();
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_AND) {
				{
				{
				State = 241; Match(OP_AND);
				State = 242; expression_equality();
				}
				}
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_equalityContext : ParserRuleContext {
		public Expression_relationalContext[] expression_relational() {
			return GetRuleContexts<Expression_relationalContext>();
		}
		public Expression_relationalContext expression_relational(int i) {
			return GetRuleContext<Expression_relationalContext>(i);
		}
		public ITerminalNode OP_NE() { return GetToken(ShellParser.OP_NE, 0); }
		public ITerminalNode OP_EQ() { return GetToken(ShellParser.OP_EQ, 0); }
		public Expression_equalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_equality; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_equality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_equalityContext expression_equality() {
		Expression_equalityContext _localctx = new Expression_equalityContext(Context, State);
		EnterRule(_localctx, 42, RULE_expression_equality);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; expression_relational();
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_EQ || _la==OP_NE) {
				{
				State = 249;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_EQ || _la==OP_NE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 250; expression_relational();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_relationalContext : ParserRuleContext {
		public Expression_additiveContext[] expression_additive() {
			return GetRuleContexts<Expression_additiveContext>();
		}
		public Expression_additiveContext expression_additive(int i) {
			return GetRuleContext<Expression_additiveContext>(i);
		}
		public ITerminalNode OP_GT() { return GetToken(ShellParser.OP_GT, 0); }
		public ITerminalNode OP_GE() { return GetToken(ShellParser.OP_GE, 0); }
		public ITerminalNode OP_LT() { return GetToken(ShellParser.OP_LT, 0); }
		public ITerminalNode OP_LE() { return GetToken(ShellParser.OP_LE, 0); }
		public Expression_relationalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_relational; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_relational(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_relationalContext expression_relational() {
		Expression_relationalContext _localctx = new Expression_relationalContext(Context, State);
		EnterRule(_localctx, 44, RULE_expression_relational);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; expression_additive();
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_LT) | (1L << OP_LE) | (1L << OP_GT) | (1L << OP_GE))) != 0)) {
				{
				State = 254;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_LT) | (1L << OP_LE) | (1L << OP_GT) | (1L << OP_GE))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 255; expression_additive();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_additiveContext : ParserRuleContext {
		public Expression_multiplicativeContext[] expression_multiplicative() {
			return GetRuleContexts<Expression_multiplicativeContext>();
		}
		public Expression_multiplicativeContext expression_multiplicative(int i) {
			return GetRuleContext<Expression_multiplicativeContext>(i);
		}
		public ITerminalNode[] OP_SUB() { return GetTokens(ShellParser.OP_SUB); }
		public ITerminalNode OP_SUB(int i) {
			return GetToken(ShellParser.OP_SUB, i);
		}
		public ITerminalNode[] OP_ADD() { return GetTokens(ShellParser.OP_ADD); }
		public ITerminalNode OP_ADD(int i) {
			return GetToken(ShellParser.OP_ADD, i);
		}
		public Expression_additiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_additive; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_additive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_additiveContext expression_additive() {
		Expression_additiveContext _localctx = new Expression_additiveContext(Context, State);
		EnterRule(_localctx, 46, RULE_expression_additive);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; expression_multiplicative();
			State = 263;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 259;
					_la = TokenStream.LA(1);
					if ( !(_la==OP_ADD || _la==OP_SUB) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 260; expression_multiplicative();
					}
					} 
				}
				State = 265;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_multiplicativeContext : ParserRuleContext {
		public Expression_unaryContext[] expression_unary() {
			return GetRuleContexts<Expression_unaryContext>();
		}
		public Expression_unaryContext expression_unary(int i) {
			return GetRuleContext<Expression_unaryContext>(i);
		}
		public ITerminalNode[] OP_DIV() { return GetTokens(ShellParser.OP_DIV); }
		public ITerminalNode OP_DIV(int i) {
			return GetToken(ShellParser.OP_DIV, i);
		}
		public ITerminalNode[] OP_MUL() { return GetTokens(ShellParser.OP_MUL); }
		public ITerminalNode OP_MUL(int i) {
			return GetToken(ShellParser.OP_MUL, i);
		}
		public ITerminalNode[] OP_MOD() { return GetTokens(ShellParser.OP_MOD); }
		public ITerminalNode OP_MOD(int i) {
			return GetToken(ShellParser.OP_MOD, i);
		}
		public Expression_multiplicativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_multiplicative; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_multiplicative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_multiplicativeContext expression_multiplicative() {
		Expression_multiplicativeContext _localctx = new Expression_multiplicativeContext(Context, State);
		EnterRule(_localctx, 48, RULE_expression_multiplicative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; expression_unary();
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_DIV) | (1L << OP_MUL) | (1L << OP_MOD))) != 0)) {
				{
				{
				State = 267;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_DIV) | (1L << OP_MUL) | (1L << OP_MOD))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 268; expression_unary();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_unaryContext : ParserRuleContext {
		public Expression_unaryContext expression_unary() {
			return GetRuleContext<Expression_unaryContext>(0);
		}
		public ITerminalNode OP_NOT() { return GetToken(ShellParser.OP_NOT, 0); }
		public ITerminalNode OP_SUB() { return GetToken(ShellParser.OP_SUB, 0); }
		public Expression_primaryContext expression_primary() {
			return GetRuleContext<Expression_primaryContext>(0);
		}
		public Expression_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_unary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_unary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_unaryContext expression_unary() {
		Expression_unaryContext _localctx = new Expression_unaryContext(Context, State);
		EnterRule(_localctx, 50, RULE_expression_unary);
		int _la;
		try {
			State = 277;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP_NOT:
			case OP_SUB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 274;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_NOT || _la==OP_SUB) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 275; expression_unary();
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case TYPE_NULL:
			case LSQR:
			case LCURL:
			case LPAREN:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276; expression_primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_primaryContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(ShellParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(ShellParser.RPAREN, 0); }
		public Expression_primaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_primary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_primary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_primaryContext expression_primary() {
		Expression_primaryContext _localctx = new Expression_primaryContext(Context, State);
		EnterRule(_localctx, 52, RULE_expression_primary);
		try {
			State = 284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case TYPE_NULL:
			case LSQR:
			case LCURL:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 279; term(0);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 280; Match(LPAREN);
				State = 281; expression();
				State = 282; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Identifier_namespacedContext identifier_namespaced() {
			return GetRuleContext<Identifier_namespacedContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(ShellParser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 54, RULE_function_call);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 286; identifier_namespaced();
				}
				break;
			case 2:
				{
				State = 287; Match(IDENTIFIER);
				}
				break;
			}
			State = 293;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 290; expression();
					}
					} 
				}
				State = 295;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(ShellParser.IDENTIFIER, 0); }
		public Identifier_namespacedContext identifier_namespaced() {
			return GetRuleContext<Identifier_namespacedContext>(0);
		}
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode LSQR() { return GetToken(ShellParser.LSQR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RSQR() { return GetToken(ShellParser.RSQR, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 297; value();
				}
				break;
			case 2:
				{
				State = 298; Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				State = 299; identifier_namespaced();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 309;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TermContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 302;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 303; Match(LSQR);
					State = 304; expression();
					State = 305; Match(RSQR);
					}
					} 
				}
				State = 311;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Identifier_namespacedContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(ShellParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ShellParser.IDENTIFIER, i);
		}
		public ITerminalNode[] SYM_PERIOD() { return GetTokens(ShellParser.SYM_PERIOD); }
		public ITerminalNode SYM_PERIOD(int i) {
			return GetToken(ShellParser.SYM_PERIOD, i);
		}
		public Identifier_namespacedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_namespaced; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_namespaced(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_namespacedContext identifier_namespaced() {
		Identifier_namespacedContext _localctx = new Identifier_namespacedContext(Context, State);
		EnterRule(_localctx, 58, RULE_identifier_namespaced);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 312; Match(IDENTIFIER);
					State = 313; Match(SYM_PERIOD);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 316;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 318; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(ShellParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(ShellParser.NUMBER, 0); }
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public ITerminalNode TYPE_NULL() { return GetToken(ShellParser.TYPE_NULL, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 60, RULE_value);
		try {
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320; @object();
				}
				break;
			case LSQR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 321; array();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 322; Match(STRING);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 323; Match(NUMBER);
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 324; @bool();
				}
				break;
			case TYPE_NULL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 325; Match(TYPE_NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode KW_TRUE() { return GetToken(ShellParser.KW_TRUE, 0); }
		public ITerminalNode KW_FALSE() { return GetToken(ShellParser.KW_FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 62, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_TRUE || _la==KW_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode LSQR() { return GetToken(ShellParser.LSQR, 0); }
		public ITerminalNode RSQR() { return GetToken(ShellParser.RSQR, 0); }
		public ITerminalNode[] EOL() { return GetTokens(ShellParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(ShellParser.EOL, i);
		}
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode[] SYM_COMMA() { return GetTokens(ShellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(ShellParser.SYM_COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 64, RULE_array);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(LSQR);
			State = 334;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 331; Match(EOL);
					}
					} 
				}
				State = 336;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			State = 363;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_TRUE) | (1L << KW_FALSE) | (1L << TYPE_NULL) | (1L << LSQR) | (1L << LCURL) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				State = 337; term(0);
				State = 341;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 338; Match(EOL);
						}
						} 
					}
					State = 343;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
				}
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 344; Match(SYM_COMMA);
					State = 348;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==EOL) {
						{
						{
						State = 345; Match(EOL);
						}
						}
						State = 350;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 351; term(0);
					}
					}
					State = 356;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 360;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 357; Match(EOL);
						}
						} 
					}
					State = 362;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				}
				}
			}

			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 365; Match(EOL);
				}
				}
				State = 370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 371; Match(RSQR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(ShellParser.STRING, 0); }
		public ITerminalNode SYM_COLON() { return GetToken(ShellParser.SYM_COLON, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 66, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; Match(STRING);
			State = 374; Match(SYM_COLON);
			State = 375; term(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ITerminalNode LCURL() { return GetToken(ShellParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(ShellParser.RCURL, 0); }
		public ITerminalNode[] EOL() { return GetTokens(ShellParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(ShellParser.EOL, i);
		}
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ITerminalNode[] SYM_COMMA() { return GetTokens(ShellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(ShellParser.SYM_COMMA, i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 68, RULE_object);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; Match(LCURL);
			State = 381;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 378; Match(EOL);
					}
					} 
				}
				State = 383;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 384; pair();
				State = 388;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 385; Match(EOL);
						}
						} 
					}
					State = 390;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,43,Context);
				}
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 391; Match(SYM_COMMA);
					State = 395;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==EOL) {
						{
						{
						State = 392; Match(EOL);
						}
						}
						State = 397;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 398; pair();
					}
					}
					State = 403;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 407;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 404; Match(EOL);
						}
						} 
					}
					State = 409;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
				}
				}
			}

			State = 415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EOL) {
				{
				{
				State = 412; Match(EOL);
				}
				}
				State = 417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 418; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_type_specifierContext : ParserRuleContext {
		public Value_type_specifierContext value_type_specifier() {
			return GetRuleContext<Value_type_specifierContext>(0);
		}
		public ITerminalNode TYPE_ANY() { return GetToken(ShellParser.TYPE_ANY, 0); }
		public Argument_type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_type_specifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_type_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_type_specifierContext argument_type_specifier() {
		Argument_type_specifierContext _localctx = new Argument_type_specifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_argument_type_specifier);
		try {
			State = 422;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_OBJECT:
			case TYPE_ARRAY:
			case TYPE_NUMBER:
			case TYPE_STRING:
			case TYPE_BOOL:
			case TYPE_NULL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 420; value_type_specifier();
				}
				break;
			case TYPE_ANY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 421; Match(TYPE_ANY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Value_type_specifierContext : ParserRuleContext {
		public ITerminalNode TYPE_OBJECT() { return GetToken(ShellParser.TYPE_OBJECT, 0); }
		public ITerminalNode TYPE_ARRAY() { return GetToken(ShellParser.TYPE_ARRAY, 0); }
		public ITerminalNode TYPE_NUMBER() { return GetToken(ShellParser.TYPE_NUMBER, 0); }
		public ITerminalNode TYPE_STRING() { return GetToken(ShellParser.TYPE_STRING, 0); }
		public ITerminalNode TYPE_BOOL() { return GetToken(ShellParser.TYPE_BOOL, 0); }
		public ITerminalNode TYPE_NULL() { return GetToken(ShellParser.TYPE_NULL, 0); }
		public Value_type_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value_type_specifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShellVisitor<TResult> typedVisitor = visitor as IShellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue_type_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Value_type_specifierContext value_type_specifier() {
		Value_type_specifierContext _localctx = new Value_type_specifierContext(Context, State);
		EnterRule(_localctx, 72, RULE_value_type_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE_OBJECT) | (1L << TYPE_ARRAY) | (1L << TYPE_NUMBER) | (1L << TYPE_STRING) | (1L << TYPE_BOOL) | (1L << TYPE_NULL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 28: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x41', '\x1AD', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x3', '\x2', '\x6', '\x2', 'N', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', 'O', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', 'V', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x66', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'l', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'q', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', 't', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', 
		'\x6', 'x', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '{', '\v', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\x89', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\x8F', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\a', '\t', '\x93', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'\x96', '\v', '\t', '\x3', '\n', '\x5', '\n', '\x99', '\n', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', '\x9D', '\n', '\n', '\f', '\n', '\xE', 
		'\n', '\xA0', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 
		'\xAA', '\n', '\v', '\f', '\v', '\xE', '\v', '\xAD', '\v', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xB2', '\n', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 
		'\xB9', '\n', '\f', '\f', '\f', '\xE', '\f', '\xBC', '\v', '\f', '\x5', 
		'\f', '\xBE', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\xC9', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\xCD', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\xD7', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\xE1', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\xE6', '\n', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\xE9', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\a', '\x15', '\xEE', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xF1', 
		'\v', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', 
		'\xF6', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\xF9', '\v', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\xFE', '\n', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x103', 
		'\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', 
		'\x108', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x10B', '\v', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x110', '\n', 
		'\x1A', '\f', '\x1A', '\xE', '\x1A', '\x113', '\v', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x118', '\n', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', 
		'\x1C', '\x11F', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x123', '\n', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x126', '\n', '\x1D', 
		'\f', '\x1D', '\xE', '\x1D', '\x129', '\v', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x12F', '\n', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\a', '\x1E', '\x136', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x139', 
		'\v', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x6', '\x1F', '\x13D', '\n', 
		'\x1F', '\r', '\x1F', '\xE', '\x1F', '\x13E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x5', ' ', '\x149', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', 
		'\"', '\a', '\"', '\x14F', '\n', '\"', '\f', '\"', '\xE', '\"', '\x152', 
		'\v', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x156', '\n', '\"', 
		'\f', '\"', '\xE', '\"', '\x159', '\v', '\"', '\x3', '\"', '\x3', '\"', 
		'\a', '\"', '\x15D', '\n', '\"', '\f', '\"', '\xE', '\"', '\x160', '\v', 
		'\"', '\x3', '\"', '\a', '\"', '\x163', '\n', '\"', '\f', '\"', '\xE', 
		'\"', '\x166', '\v', '\"', '\x3', '\"', '\a', '\"', '\x169', '\n', '\"', 
		'\f', '\"', '\xE', '\"', '\x16C', '\v', '\"', '\x5', '\"', '\x16E', '\n', 
		'\"', '\x3', '\"', '\a', '\"', '\x171', '\n', '\"', '\f', '\"', '\xE', 
		'\"', '\x174', '\v', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\a', '$', '\x17E', 
		'\n', '$', '\f', '$', '\xE', '$', '\x181', '\v', '$', '\x3', '$', '\x3', 
		'$', '\a', '$', '\x185', '\n', '$', '\f', '$', '\xE', '$', '\x188', '\v', 
		'$', '\x3', '$', '\x3', '$', '\a', '$', '\x18C', '\n', '$', '\f', '$', 
		'\xE', '$', '\x18F', '\v', '$', '\x3', '$', '\a', '$', '\x192', '\n', 
		'$', '\f', '$', '\xE', '$', '\x195', '\v', '$', '\x3', '$', '\a', '$', 
		'\x198', '\n', '$', '\f', '$', '\xE', '$', '\x19B', '\v', '$', '\x5', 
		'$', '\x19D', '\n', '$', '\x3', '$', '\a', '$', '\x1A0', '\n', '$', '\f', 
		'$', '\xE', '$', '\x1A3', '\v', '$', '\x3', '$', '\x3', '$', '\x3', '%', 
		'\x3', '%', '\x5', '%', '\x1A9', '\n', '%', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x2', '\x3', ':', '\'', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', '\x2', '\n', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x2', '%', '&', '\x3', '\x2', '\'', '*', 
		'\x3', '\x2', '.', '/', '\x3', '\x2', '\x30', '\x32', '\x4', '\x2', '+', 
		'+', '/', '/', '\x3', '\x2', '\x5', '\x6', '\x4', '\x2', '\x12', '\x16', 
		'\x18', '\x18', '\x2', '\x1C5', '\x2', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x4', 'U', '\x3', '\x2', '\x2', '\x2', '\x6', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\b', 'g', '\x3', '\x2', '\x2', '\x2', '\n', 'm', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x88', '\x3', '\x2', '\x2', '\x2', '\xE', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x98', '\x3', '\x2', '\x2', '\x2', '\x14', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x18', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xC8', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xCC', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xCE', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xD2', '\x3', '\x2', '\x2', '\x2', '\"', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xDE', '\x3', '\x2', '\x2', '\x2', '&', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '(', '\xEA', '\x3', '\x2', '\x2', '\x2', '*', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', ',', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '.', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x30', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x36', '\x11E', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x122', '\x3', '\x2', '\x2', '\x2', ':', '\x12E', '\x3', 
		'\x2', '\x2', '\x2', '<', '\x13C', '\x3', '\x2', '\x2', '\x2', '>', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x44', '\x177', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x17B', '\x3', '\x2', '\x2', '\x2', 'H', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'L', 'N', '\x5', '\x4', '\x3', '\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\x5', '\n', '\x6', '\x2', 'R', 'S', '\a', '\x3', '\x2', 
		'\x2', 'S', 'V', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x5', '\x6', '\x4', 
		'\x2', 'U', 'Q', '\x3', '\x2', '\x2', '\x2', 'U', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'V', '\x5', '\x3', '\x2', '\x2', '\x2', 'W', '\x66', '\a', '\x3', 
		'\x2', '\x2', 'X', 'Y', '\x5', '\b', '\x5', '\x2', 'Y', 'Z', '\a', '\x3', 
		'\x2', '\x2', 'Z', '\x66', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\x5', 
		'\x10', '\t', '\x2', '\\', ']', '\a', '\x3', '\x2', '\x2', ']', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '^', '_', '\x5', '\x14', '\v', '\x2', '_', 
		'`', '\a', '\x3', '\x2', '\x2', '`', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\x62', '\x5', '&', '\x14', '\x2', '\x62', '\x63', '\a', '\x3', 
		'\x2', '\x2', '\x63', '\x66', '\x3', '\x2', '\x2', '\x2', '\x64', '\x66', 
		'\x5', '\x1A', '\xE', '\x2', '\x65', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x65', 'X', '\x3', '\x2', '\x2', '\x2', '\x65', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '^', '\x3', '\x2', '\x2', '\x2', '\x65', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'\a', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\a', '\x10', '\x2', '\x2', 
		'h', 'k', '\a', '\x34', '\x2', '\x2', 'i', 'j', '\a', '\x11', '\x2', '\x2', 
		'j', 'l', '\a', '\x33', '\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 
		'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\a', '\xF', '\x2', '\x2', 'n', 'r', '\a', '\x33', '\x2', 
		'\x2', 'o', 'q', '\a', '\x3', '\x2', '\x2', 'p', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'q', 't', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\x3', '\x2', '\x2', 
		'\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 'u', 'y', '\a', '\x1B', '\x2', 
		'\x2', 'v', 'x', '\x5', '\f', '\a', '\x2', 'w', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'x', '{', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '|', '\x3', '\x2', '\x2', 
		'\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', '|', '}', '\a', '\x1C', '\x2', 
		'\x2', '}', '\v', '\x3', '\x2', '\x2', '\x2', '~', '\x89', '\a', '\x3', 
		'\x2', '\x2', '\x7F', '\x80', '\x5', '\xE', '\b', '\x2', '\x80', '\x81', 
		'\a', '\x3', '\x2', '\x2', '\x81', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x83', '\x5', '\n', '\x6', '\x2', '\x83', '\x84', '\a', '\x3', 
		'\x2', '\x2', '\x84', '\x89', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', 
		'\x5', '\b', '\x5', '\x2', '\x86', '\x87', '\a', '\x3', '\x2', '\x2', 
		'\x87', '\x89', '\x3', '\x2', '\x2', '\x2', '\x88', '~', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x88', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x89', '\r', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\a', '\x33', 
		'\x2', '\x2', '\x8B', '\x8E', '\a', '$', '\x2', '\x2', '\x8C', '\x8F', 
		'\x5', '&', '\x14', '\x2', '\x8D', '\x8F', '\x5', '\x16', '\f', '\x2', 
		'\x8E', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\xF', '\x3', '\x2', '\x2', '\x2', '\x90', '\x94', 
		'\a', '#', '\x2', '\x2', '\x91', '\x93', '\n', '\x2', '\x2', '\x2', '\x92', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x93', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x11', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x97', '\x99', '\a', '\x3', '\x2', 
		'\x2', '\x98', '\x97', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x9E', '\a', '\x1B', '\x2', '\x2', '\x9B', '\x9D', '\x5', '\x6', '\x4', 
		'\x2', '\x9C', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9D', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\a', 
		'\x1C', '\x2', '\x2', '\xA2', '\x13', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA4', '\a', '\f', '\x2', '\x2', '\xA4', '\xAB', '\a', '\x33', '\x2', 
		'\x2', '\xA5', '\xA6', '\a', '\x19', '\x2', '\x2', '\xA6', '\xA7', '\x5', 
		'&', '\x14', '\x2', '\xA7', '\xA8', '\a', '\x1A', '\x2', '\x2', '\xA8', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xB1', '\a', '$', '\x2', '\x2', '\xAF', '\xB2', '\x5', 
		'&', '\x14', '\x2', '\xB0', '\xB2', '\x5', '\x16', '\f', '\x2', '\xB1', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\x15', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\a', 
		'\r', '\x2', '\x2', '\xB4', '\xBD', '\a', '\x1D', '\x2', '\x2', '\xB5', 
		'\xBA', '\x5', '\x18', '\r', '\x2', '\xB6', '\xB7', '\a', ' ', '\x2', 
		'\x2', '\xB7', '\xB9', '\x5', '\x18', '\r', '\x2', '\xB8', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC0', '\a', '\x1E', '\x2', '\x2', '\xC0', '\xC1', '\x5', 
		'\x12', '\n', '\x2', '\xC1', '\x17', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC3', '\x5', 'H', '%', '\x2', '\xC3', '\xC4', '\a', '\x33', '\x2', '\x2', 
		'\xC4', '\x19', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC9', '\x5', '\x1C', 
		'\xF', '\x2', '\xC6', '\xC9', '\x5', '\"', '\x12', '\x2', '\xC7', '\xC9', 
		'\x5', '$', '\x13', '\x2', '\xC8', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '\xC9', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCD', 
		'\x5', '\x1E', '\x10', '\x2', '\xCB', '\xCD', '\x5', ' ', '\x11', '\x2', 
		'\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xCD', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', 
		'\a', '\a', '\x2', '\x2', '\xCF', '\xD0', '\x5', '&', '\x14', '\x2', '\xD0', 
		'\xD1', '\x5', '\x12', '\n', '\x2', '\xD1', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD3', '\x5', '\x1E', '\x10', '\x2', '\xD3', '\xD6', '\a', 
		'\b', '\x2', '\x2', '\xD4', '\xD7', '\x5', '\x12', '\n', '\x2', '\xD5', 
		'\xD7', '\x5', '\x1C', '\xF', '\x2', '\xD6', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', '\t', '\x2', '\x2', '\xD9', 
		'\xDA', '\a', '\x33', '\x2', '\x2', '\xDA', '\xDB', '\a', '\n', '\x2', 
		'\x2', '\xDB', '\xDC', '\x5', '&', '\x14', '\x2', '\xDC', '\xDD', '\x5', 
		'\x12', '\n', '\x2', '\xDD', '#', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xE0', '\a', '\v', '\x2', '\x2', '\xDF', '\xE1', '\x5', '&', '\x14', 
		'\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '%', '\x3', '\x2', '\x2', '\x2', '\xE2', 
		'\xE5', '\x5', '(', '\x15', '\x2', '\xE3', '\xE4', '\a', '\xE', '\x2', 
		'\x2', '\xE4', '\xE6', '\x5', 'J', '&', '\x2', '\xE5', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE9', '\x5', '\x38', '\x1D', 
		'\x2', '\xE8', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\'', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xEF', '\x5', '*', '\x16', '\x2', '\xEB', '\xEC', '\a', ',', '\x2', '\x2', 
		'\xEC', '\xEE', '\x5', '*', '\x16', '\x2', '\xED', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', '\xEE', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', ')', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xF7', '\x5', ',', '\x17', '\x2', '\xF3', '\xF4', 
		'\a', '-', '\x2', '\x2', '\xF4', '\xF6', '\x5', ',', '\x17', '\x2', '\xF5', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF9', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '+', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFD', '\x5', '.', '\x18', 
		'\x2', '\xFB', '\xFC', '\t', '\x3', '\x2', '\x2', '\xFC', '\xFE', '\x5', 
		'.', '\x18', '\x2', '\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '-', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\x102', '\x5', '\x30', '\x19', '\x2', '\x100', '\x101', 
		'\t', '\x4', '\x2', '\x2', '\x101', '\x103', '\x5', '\x30', '\x19', '\x2', 
		'\x102', '\x100', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '/', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x109', '\x5', '\x32', '\x1A', '\x2', '\x105', '\x106', '\t', '\x5', 
		'\x2', '\x2', '\x106', '\x108', '\x5', '\x32', '\x1A', '\x2', '\x107', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x108', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\x107', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x10A', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x111', '\x5', 
		'\x34', '\x1B', '\x2', '\x10D', '\x10E', '\t', '\x6', '\x2', '\x2', '\x10E', 
		'\x110', '\x5', '\x34', '\x1B', '\x2', '\x10F', '\x10D', '\x3', '\x2', 
		'\x2', '\x2', '\x110', '\x113', '\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x33', '\x3', '\x2', '\x2', '\x2', '\x113', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x115', '\t', '\a', '\x2', '\x2', '\x115', 
		'\x118', '\x5', '\x34', '\x1B', '\x2', '\x116', '\x118', '\x5', '\x36', 
		'\x1C', '\x2', '\x117', '\x114', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x118', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x11F', '\x5', ':', '\x1E', '\x2', '\x11A', '\x11B', 
		'\a', '\x1D', '\x2', '\x2', '\x11B', '\x11C', '\x5', '&', '\x14', '\x2', 
		'\x11C', '\x11D', '\a', '\x1E', '\x2', '\x2', '\x11D', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x11E', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x11A', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x123', '\x5', '<', '\x1F', '\x2', '\x121', '\x123', 
		'\a', '\x33', '\x2', '\x2', '\x122', '\x120', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x121', '\x3', '\x2', '\x2', '\x2', '\x123', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x126', '\x5', '&', '\x14', '\x2', '\x125', 
		'\x124', '\x3', '\x2', '\x2', '\x2', '\x126', '\x129', '\x3', '\x2', '\x2', 
		'\x2', '\x127', '\x125', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x127', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12B', '\b', 
		'\x1E', '\x1', '\x2', '\x12B', '\x12F', '\x5', '>', ' ', '\x2', '\x12C', 
		'\x12F', '\a', '\x33', '\x2', '\x2', '\x12D', '\x12F', '\x5', '<', '\x1F', 
		'\x2', '\x12E', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x137', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\f', 
		'\x3', '\x2', '\x2', '\x131', '\x132', '\a', '\x19', '\x2', '\x2', '\x132', 
		'\x133', '\x5', '&', '\x14', '\x2', '\x133', '\x134', '\a', '\x1A', '\x2', 
		'\x2', '\x134', '\x136', '\x3', '\x2', '\x2', '\x2', '\x135', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x136', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x137', '\x135', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\x3', 
		'\x2', '\x2', '\x2', '\x138', ';', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', '\x33', '\x2', 
		'\x2', '\x13B', '\x13D', '\a', '\x1F', '\x2', '\x2', '\x13C', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\x3', 
		'\x2', '\x2', '\x2', '\x13F', '\x140', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x141', '\a', '\x33', '\x2', '\x2', '\x141', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x142', '\x149', '\x5', '\x46', '$', '\x2', '\x143', '\x149', 
		'\x5', '\x42', '\"', '\x2', '\x144', '\x149', '\a', '\x34', '\x2', '\x2', 
		'\x145', '\x149', '\a', '\x35', '\x2', '\x2', '\x146', '\x149', '\x5', 
		'@', '!', '\x2', '\x147', '\x149', '\a', '\x18', '\x2', '\x2', '\x148', 
		'\x142', '\x3', '\x2', '\x2', '\x2', '\x148', '\x143', '\x3', '\x2', '\x2', 
		'\x2', '\x148', '\x144', '\x3', '\x2', '\x2', '\x2', '\x148', '\x145', 
		'\x3', '\x2', '\x2', '\x2', '\x148', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'\x148', '\x147', '\x3', '\x2', '\x2', '\x2', '\x149', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x14A', '\x14B', '\t', '\b', '\x2', '\x2', '\x14B', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x150', '\a', '\x19', '\x2', '\x2', 
		'\x14D', '\x14F', '\a', '\x3', '\x2', '\x2', '\x14E', '\x14D', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x152', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\x3', '\x2', '\x2', 
		'\x2', '\x151', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x152', '\x150', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\x157', '\x5', ':', '\x1E', '\x2', 
		'\x154', '\x156', '\a', '\x3', '\x2', '\x2', '\x155', '\x154', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x159', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x155', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\x164', '\x3', '\x2', '\x2', '\x2', '\x159', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x15A', '\x15E', '\a', ' ', '\x2', '\x2', 
		'\x15B', '\x15D', '\a', '\x3', '\x2', '\x2', '\x15C', '\x15B', '\x3', 
		'\x2', '\x2', '\x2', '\x15D', '\x160', '\x3', '\x2', '\x2', '\x2', '\x15E', 
		'\x15C', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', '\x3', '\x2', '\x2', 
		'\x2', '\x15F', '\x161', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15E', 
		'\x3', '\x2', '\x2', '\x2', '\x161', '\x163', '\x5', ':', '\x1E', '\x2', 
		'\x162', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x163', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\x162', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x165', '\x16A', '\x3', '\x2', '\x2', 
		'\x2', '\x166', '\x164', '\x3', '\x2', '\x2', '\x2', '\x167', '\x169', 
		'\a', '\x3', '\x2', '\x2', '\x168', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'\x169', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x168', '\x3', 
		'\x2', '\x2', '\x2', '\x16A', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16B', 
		'\x16E', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16A', '\x3', '\x2', '\x2', 
		'\x2', '\x16D', '\x153', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x172', '\x3', '\x2', '\x2', '\x2', 
		'\x16F', '\x171', '\a', '\x3', '\x2', '\x2', '\x170', '\x16F', '\x3', 
		'\x2', '\x2', '\x2', '\x171', '\x174', '\x3', '\x2', '\x2', '\x2', '\x172', 
		'\x170', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\x173', '\x175', '\x3', '\x2', '\x2', '\x2', '\x174', '\x172', 
		'\x3', '\x2', '\x2', '\x2', '\x175', '\x176', '\a', '\x1A', '\x2', '\x2', 
		'\x176', '\x43', '\x3', '\x2', '\x2', '\x2', '\x177', '\x178', '\a', '\x34', 
		'\x2', '\x2', '\x178', '\x179', '\a', '\"', '\x2', '\x2', '\x179', '\x17A', 
		'\x5', ':', '\x1E', '\x2', '\x17A', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x17B', '\x17F', '\a', '\x1B', '\x2', '\x2', '\x17C', '\x17E', '\a', 
		'\x3', '\x2', '\x2', '\x17D', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17E', 
		'\x181', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x17D', '\x3', '\x2', '\x2', 
		'\x2', '\x17F', '\x180', '\x3', '\x2', '\x2', '\x2', '\x180', '\x19C', 
		'\x3', '\x2', '\x2', '\x2', '\x181', '\x17F', '\x3', '\x2', '\x2', '\x2', 
		'\x182', '\x186', '\x5', '\x44', '#', '\x2', '\x183', '\x185', '\a', '\x3', 
		'\x2', '\x2', '\x184', '\x183', '\x3', '\x2', '\x2', '\x2', '\x185', '\x188', 
		'\x3', '\x2', '\x2', '\x2', '\x186', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x187', '\x3', '\x2', '\x2', '\x2', '\x187', '\x193', '\x3', 
		'\x2', '\x2', '\x2', '\x188', '\x186', '\x3', '\x2', '\x2', '\x2', '\x189', 
		'\x18D', '\a', ' ', '\x2', '\x2', '\x18A', '\x18C', '\a', '\x3', '\x2', 
		'\x2', '\x18B', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18F', 
		'\x3', '\x2', '\x2', '\x2', '\x18D', '\x18B', '\x3', '\x2', '\x2', '\x2', 
		'\x18D', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x190', '\x3', 
		'\x2', '\x2', '\x2', '\x18F', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x190', 
		'\x192', '\x5', '\x44', '#', '\x2', '\x191', '\x189', '\x3', '\x2', '\x2', 
		'\x2', '\x192', '\x195', '\x3', '\x2', '\x2', '\x2', '\x193', '\x191', 
		'\x3', '\x2', '\x2', '\x2', '\x193', '\x194', '\x3', '\x2', '\x2', '\x2', 
		'\x194', '\x199', '\x3', '\x2', '\x2', '\x2', '\x195', '\x193', '\x3', 
		'\x2', '\x2', '\x2', '\x196', '\x198', '\a', '\x3', '\x2', '\x2', '\x197', 
		'\x196', '\x3', '\x2', '\x2', '\x2', '\x198', '\x19B', '\x3', '\x2', '\x2', 
		'\x2', '\x199', '\x197', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x19B', '\x199', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x182', '\x3', 
		'\x2', '\x2', '\x2', '\x19C', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19D', 
		'\x1A1', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x1A0', '\a', '\x3', '\x2', 
		'\x2', '\x19F', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x1A3', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1', '\x19F', '\x3', '\x2', '\x2', '\x2', 
		'\x1A1', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x1A4', '\x3', 
		'\x2', '\x2', '\x2', '\x1A3', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A4', 
		'\x1A5', '\a', '\x1C', '\x2', '\x2', '\x1A5', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x1A6', '\x1A9', '\x5', 'J', '&', '\x2', '\x1A7', '\x1A9', '\a', 
		'\x17', '\x2', '\x2', '\x1A8', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A8', 
		'\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A9', 'I', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\x1AB', '\t', '\t', '\x2', '\x2', '\x1AB', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\x34', 'O', 'U', '\x65', 'k', 'r', 'y', '\x88', 
		'\x8E', '\x94', '\x98', '\x9E', '\xAB', '\xB1', '\xBA', '\xBD', '\xC8', 
		'\xCC', '\xD6', '\xE0', '\xE5', '\xE8', '\xEF', '\xF7', '\xFD', '\x102', 
		'\x109', '\x111', '\x117', '\x11E', '\x122', '\x127', '\x12E', '\x137', 
		'\x13E', '\x148', '\x150', '\x157', '\x15E', '\x164', '\x16A', '\x16D', 
		'\x172', '\x17F', '\x186', '\x18D', '\x193', '\x199', '\x19C', '\x1A1', 
		'\x1A8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Shell.Generated
