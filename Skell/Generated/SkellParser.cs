//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Skell.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
public partial class SkellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, KW_OBJECT=2, KW_ARRAY=3, KW_NUMBER=4, KW_STRING=5, KW_BOOL=6, KW_NULL=7, 
		KW_TRUE=8, KW_FALSE=9, KW_IF=10, KW_THEN=11, KW_ELSE=12, KW_FOR=13, KW_IN=14, 
		KW_RETURN=15, LSQR=16, RSQR=17, LCURL=18, RCURL=19, LPAREN=20, RPAREN=21, 
		SYM_PERIOD=22, SYM_COMMA=23, SYM_QUOTE=24, SYM_COLON=25, OP_ASSGN=26, 
		OP_EQ=27, OP_NE=28, OP_LT=29, OP_LE=30, OP_GT=31, OP_GE=32, OP_NOT=33, 
		OP_OR=34, OP_AND=35, OP_ADD=36, OP_SUB=37, OP_DIV=38, OP_MUL=39, OP_MOD=40, 
		IDENTIFIER=41, STRING=42, NUMBER=43, NONDIGIT=44, DIGIT=45, NONZERO_DIGIT=46, 
		ZERO=47, SIGN=48, INT=49, FRAC=50, EXP=51, HEX=52, UNICODE=53, ESC=54, 
		SAFECODEPOINT=55;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_statementBlock = 2, RULE_expression = 3, 
		RULE_eqExpr = 4, RULE_relExpr = 5, RULE_addExpr = 6, RULE_mulExpr = 7, 
		RULE_unary = 8, RULE_primary = 9, RULE_term = 10, RULE_value = 11, RULE_bool = 12, 
		RULE_array = 13, RULE_pair = 14, RULE_object = 15, RULE_typeSpecifier = 16;
	public static readonly string[] ruleNames = {
		"program", "statement", "statementBlock", "expression", "eqExpr", "relExpr", 
		"addExpr", "mulExpr", "unary", "primary", "term", "value", "bool", "array", 
		"pair", "object", "typeSpecifier"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'object'", "'array'", "'number'", "'string'", "'bool'", "'null'", 
		"'true'", "'false'", "'if'", "'then'", "'else'", "'for'", "'in'", "'return'", 
		"'['", "']'", "'{'", "'}'", "'('", "')'", "'.'", "','", "'\"'", "':'", 
		"'='", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'!'", "'|'", "'&'", 
		"'+'", "'-'", "'/'", "'*'", "'%'", null, null, null, null, null, null, 
		"'0'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "KW_OBJECT", "KW_ARRAY", "KW_NUMBER", "KW_STRING", "KW_BOOL", 
		"KW_NULL", "KW_TRUE", "KW_FALSE", "KW_IF", "KW_THEN", "KW_ELSE", "KW_FOR", 
		"KW_IN", "KW_RETURN", "LSQR", "RSQR", "LCURL", "RCURL", "LPAREN", "RPAREN", 
		"SYM_PERIOD", "SYM_COMMA", "SYM_QUOTE", "SYM_COLON", "OP_ASSGN", "OP_EQ", 
		"OP_NE", "OP_LT", "OP_LE", "OP_GT", "OP_GE", "OP_NOT", "OP_OR", "OP_AND", 
		"OP_ADD", "OP_SUB", "OP_DIV", "OP_MUL", "OP_MOD", "IDENTIFIER", "STRING", 
		"NUMBER", "NONDIGIT", "DIGIT", "NONZERO_DIGIT", "ZERO", "SIGN", "INT", 
		"FRAC", "EXP", "HEX", "UNICODE", "ESC", "SAFECODEPOINT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Skell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SkellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SkellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SkellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 34; statement();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_TRUE) | (1L << KW_FALSE) | (1L << LSQR) | (1L << LCURL) | (1L << LPAREN) | (1L << OP_NOT) | (1L << OP_SUB) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		public ITerminalNode LCURL() { return GetToken(SkellParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SkellParser.RCURL, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; Match(LCURL);
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_TRUE) | (1L << KW_FALSE) | (1L << LSQR) | (1L << LCURL) | (1L << LPAREN) | (1L << OP_NOT) | (1L << OP_SUB) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				{
				State = 42; statement();
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 48; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public EqExprContext eqExpr() {
			return GetRuleContext<EqExprContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; eqExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqExprContext : ParserRuleContext {
		public RelExprContext[] relExpr() {
			return GetRuleContexts<RelExprContext>();
		}
		public RelExprContext relExpr(int i) {
			return GetRuleContext<RelExprContext>(i);
		}
		public ITerminalNode OP_NE() { return GetToken(SkellParser.OP_NE, 0); }
		public ITerminalNode OP_EQ() { return GetToken(SkellParser.OP_EQ, 0); }
		public EqExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eqExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqExprContext eqExpr() {
		EqExprContext _localctx = new EqExprContext(Context, State);
		EnterRule(_localctx, 8, RULE_eqExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; relExpr();
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_EQ || _la==OP_NE) {
				{
				State = 53;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_EQ || _la==OP_NE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 54; relExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelExprContext : ParserRuleContext {
		public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		public ITerminalNode OP_GT() { return GetToken(SkellParser.OP_GT, 0); }
		public ITerminalNode OP_GE() { return GetToken(SkellParser.OP_GE, 0); }
		public ITerminalNode OP_LT() { return GetToken(SkellParser.OP_LT, 0); }
		public ITerminalNode OP_LE() { return GetToken(SkellParser.OP_LE, 0); }
		public RelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelExprContext relExpr() {
		RelExprContext _localctx = new RelExprContext(Context, State);
		EnterRule(_localctx, 10, RULE_relExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; addExpr();
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_LT) | (1L << OP_LE) | (1L << OP_GT) | (1L << OP_GE))) != 0)) {
				{
				State = 58;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_LT) | (1L << OP_LE) | (1L << OP_GT) | (1L << OP_GE))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 59; addExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		public MulExprContext[] mulExpr() {
			return GetRuleContexts<MulExprContext>();
		}
		public MulExprContext mulExpr(int i) {
			return GetRuleContext<MulExprContext>(i);
		}
		public ITerminalNode[] OP_SUB() { return GetTokens(SkellParser.OP_SUB); }
		public ITerminalNode OP_SUB(int i) {
			return GetToken(SkellParser.OP_SUB, i);
		}
		public ITerminalNode[] OP_ADD() { return GetTokens(SkellParser.OP_ADD); }
		public ITerminalNode OP_ADD(int i) {
			return GetToken(SkellParser.OP_ADD, i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(Context, State);
		EnterRule(_localctx, 12, RULE_addExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; mulExpr();
			State = 67;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 63;
					_la = TokenStream.LA(1);
					if ( !(_la==OP_ADD || _la==OP_SUB) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 64; mulExpr();
					}
					} 
				}
				State = 69;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulExprContext : ParserRuleContext {
		public UnaryContext[] unary() {
			return GetRuleContexts<UnaryContext>();
		}
		public UnaryContext unary(int i) {
			return GetRuleContext<UnaryContext>(i);
		}
		public ITerminalNode[] OP_DIV() { return GetTokens(SkellParser.OP_DIV); }
		public ITerminalNode OP_DIV(int i) {
			return GetToken(SkellParser.OP_DIV, i);
		}
		public ITerminalNode[] OP_MUL() { return GetTokens(SkellParser.OP_MUL); }
		public ITerminalNode OP_MUL(int i) {
			return GetToken(SkellParser.OP_MUL, i);
		}
		public MulExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulExprContext mulExpr() {
		MulExprContext _localctx = new MulExprContext(Context, State);
		EnterRule(_localctx, 14, RULE_mulExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; unary();
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_DIV || _la==OP_MUL) {
				{
				{
				State = 71;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_DIV || _la==OP_MUL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 72; unary();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		public ITerminalNode OP_NOT() { return GetToken(SkellParser.OP_NOT, 0); }
		public ITerminalNode OP_SUB() { return GetToken(SkellParser.OP_SUB, 0); }
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 16, RULE_unary);
		int _la;
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP_NOT:
			case OP_SUB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_NOT || _la==OP_SUB) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 79; unary();
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case LSQR:
			case LCURL:
			case LPAREN:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80; primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(SkellParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(SkellParser.RPAREN, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 18, RULE_primary);
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case LSQR:
			case LCURL:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83; term();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; Match(LPAREN);
				State = 85; expression();
				State = 86; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 20, RULE_term);
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case LSQR:
			case LCURL:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90; value();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(SkellParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(SkellParser.NUMBER, 0); }
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_value);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94; @object();
				}
				break;
			case LSQR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95; array();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 96; Match(STRING);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 97; Match(NUMBER);
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 98; @bool();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode KW_TRUE() { return GetToken(SkellParser.KW_TRUE, 0); }
		public ITerminalNode KW_FALSE() { return GetToken(SkellParser.KW_FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 24, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_TRUE || _la==KW_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode LSQR() { return GetToken(SkellParser.LSQR, 0); }
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ITerminalNode RSQR() { return GetToken(SkellParser.RSQR, 0); }
		public ITerminalNode[] SYM_COMMA() { return GetTokens(SkellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(SkellParser.SYM_COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 26, RULE_array);
		int _la;
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103; Match(LSQR);
				State = 104; value();
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 105; Match(SYM_COMMA);
					State = 106; value();
					}
					}
					State = 111;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 112; Match(RSQR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114; Match(LSQR);
				State = 115; Match(RSQR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(SkellParser.STRING, 0); }
		public ITerminalNode SYM_COLON() { return GetToken(SkellParser.SYM_COLON, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 28, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(STRING);
			State = 119; Match(SYM_COLON);
			State = 120; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ITerminalNode LCURL() { return GetToken(SkellParser.LCURL, 0); }
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ITerminalNode RCURL() { return GetToken(SkellParser.RCURL, 0); }
		public ITerminalNode[] SYM_COMMA() { return GetTokens(SkellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(SkellParser.SYM_COMMA, i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 30, RULE_object);
		int _la;
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122; Match(LCURL);
				State = 123; pair();
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 124; Match(SYM_COMMA);
					State = 125; pair();
					}
					}
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 131; Match(RCURL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 133; Match(LCURL);
				State = 134; Match(RCURL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public ITerminalNode KW_OBJECT() { return GetToken(SkellParser.KW_OBJECT, 0); }
		public ITerminalNode KW_ARRAY() { return GetToken(SkellParser.KW_ARRAY, 0); }
		public ITerminalNode KW_NUMBER() { return GetToken(SkellParser.KW_NUMBER, 0); }
		public ITerminalNode KW_STRING() { return GetToken(SkellParser.KW_STRING, 0); }
		public ITerminalNode KW_BOOL() { return GetToken(SkellParser.KW_BOOL, 0); }
		public ITerminalNode KW_NULL() { return GetToken(SkellParser.KW_NULL, 0); }
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_OBJECT) | (1L << KW_ARRAY) | (1L << KW_NUMBER) | (1L << KW_STRING) | (1L << KW_BOOL) | (1L << KW_NULL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x39', '\x8E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x6', 
		'\x2', '&', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\'', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '.', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', '\x31', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', ':', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', '?', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', '\x44', '\n', '\b', '\f', '\b', '\xE', '\b', 'G', '\v', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'L', '\n', '\t', '\f', '\t', 
		'\xE', '\t', 'O', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', 'T', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '[', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', '_', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\x66', '\n', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 'n', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', 'q', '\v', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 'w', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x81', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\x84', '\v', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x8A', '\n', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x2', '\x2', '\x13', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '\x2', '\t', '\x3', 
		'\x2', '\x1D', '\x1E', '\x3', '\x2', '\x1F', '\"', '\x3', '\x2', '&', 
		'\'', '\x3', '\x2', '(', ')', '\x4', '\x2', '#', '#', '\'', '\'', '\x3', 
		'\x2', '\n', '\v', '\x3', '\x2', '\x4', '\t', '\x2', '\x8D', '\x2', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x4', ')', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'+', '\x3', '\x2', '\x2', '\x2', '\b', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x36', '\x3', '\x2', '\x2', '\x2', '\f', ';', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '@', '\x3', '\x2', '\x2', '\x2', '\x10', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\x12', 'S', '\x3', '\x2', '\x2', '\x2', '\x14', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '^', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x1A', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', 'v', '\x3', '\x2', '\x2', '\x2', '\x1E', 'x', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x89', '\x3', '\x2', '\x2', '\x2', '\"', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '$', '&', '\x5', '\x4', '\x3', '\x2', '%', '$', '\x3', 
		'\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '%', 
		'\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', 
		'\x3', '\x3', '\x2', '\x2', '\x2', ')', '*', '\x5', '\b', '\x5', '\x2', 
		'*', '\x5', '\x3', '\x2', '\x2', '\x2', '+', '/', '\a', '\x14', '\x2', 
		'\x2', ',', '.', '\x5', '\x4', '\x3', '\x2', '-', ',', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x31', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x33', '\a', '\x15', '\x2', '\x2', '\x33', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x35', '\x5', '\n', '\x6', '\x2', '\x35', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x39', '\x5', '\f', '\a', '\x2', '\x37', 
		'\x38', '\t', '\x2', '\x2', '\x2', '\x38', ':', '\x5', '\f', '\a', '\x2', 
		'\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', 
		'\x2', '\x2', ':', '\v', '\x3', '\x2', '\x2', '\x2', ';', '>', '\x5', 
		'\xE', '\b', '\x2', '<', '=', '\t', '\x3', '\x2', '\x2', '=', '?', '\x5', 
		'\xE', '\b', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', 
		'\x2', '\x2', '\x2', '?', '\r', '\x3', '\x2', '\x2', '\x2', '@', '\x45', 
		'\x5', '\x10', '\t', '\x2', '\x41', '\x42', '\t', '\x4', '\x2', '\x2', 
		'\x42', '\x44', '\x5', '\x10', '\t', '\x2', '\x43', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\x44', 'G', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\xF', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'M', '\x5', '\x12', '\n', '\x2', 'I', 'J', '\t', '\x5', 
		'\x2', '\x2', 'J', 'L', '\x5', '\x12', '\n', '\x2', 'K', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'O', '\x3', '\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\t', 
		'\x6', '\x2', '\x2', 'Q', 'T', '\x5', '\x12', '\n', '\x2', 'R', 'T', '\x5', 
		'\x14', '\v', '\x2', 'S', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'T', '\x13', '\x3', '\x2', '\x2', '\x2', 'U', '[', 
		'\x5', '\x16', '\f', '\x2', 'V', 'W', '\a', '\x16', '\x2', '\x2', 'W', 
		'X', '\x5', '\b', '\x5', '\x2', 'X', 'Y', '\a', '\x17', '\x2', '\x2', 
		'Y', '[', '\x3', '\x2', '\x2', '\x2', 'Z', 'U', '\x3', '\x2', '\x2', '\x2', 
		'Z', 'V', '\x3', '\x2', '\x2', '\x2', '[', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\\', '_', '\x5', '\x18', '\r', '\x2', ']', '_', '\a', '+', '\x2', 
		'\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '^', ']', '\x3', '\x2', 
		'\x2', '\x2', '_', '\x17', '\x3', '\x2', '\x2', '\x2', '`', '\x66', '\x5', 
		' ', '\x11', '\x2', '\x61', '\x66', '\x5', '\x1C', '\xF', '\x2', '\x62', 
		'\x66', '\a', ',', '\x2', '\x2', '\x63', '\x66', '\a', '-', '\x2', '\x2', 
		'\x64', '\x66', '\x5', '\x1A', '\xE', '\x2', '\x65', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x61', '\x3', '\x2', '\x2', '\x2', '\x65', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', '\x19', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'h', '\t', '\a', '\x2', '\x2', 'h', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'j', '\a', '\x12', '\x2', '\x2', 'j', 'o', '\x5', 
		'\x18', '\r', '\x2', 'k', 'l', '\a', '\x19', '\x2', '\x2', 'l', 'n', '\x5', 
		'\x18', '\r', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'n', 'q', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'r', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'r', 's', '\a', '\x13', '\x2', '\x2', 's', 'w', '\x3', 
		'\x2', '\x2', '\x2', 't', 'u', '\a', '\x12', '\x2', '\x2', 'u', 'w', '\a', 
		'\x13', '\x2', '\x2', 'v', 'i', '\x3', '\x2', '\x2', '\x2', 'v', 't', 
		'\x3', '\x2', '\x2', '\x2', 'w', '\x1D', '\x3', '\x2', '\x2', '\x2', 'x', 
		'y', '\a', ',', '\x2', '\x2', 'y', 'z', '\a', '\x1B', '\x2', '\x2', 'z', 
		'{', '\x5', '\x18', '\r', '\x2', '{', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'|', '}', '\a', '\x14', '\x2', '\x2', '}', '\x82', '\x5', '\x1E', '\x10', 
		'\x2', '~', '\x7F', '\a', '\x19', '\x2', '\x2', '\x7F', '\x81', '\x5', 
		'\x1E', '\x10', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x86', '\a', '\x15', '\x2', '\x2', '\x86', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x88', '\a', '\x14', '\x2', '\x2', '\x88', '\x8A', '\a', 
		'\x15', '\x2', '\x2', '\x89', '|', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8C', '\t', '\b', '\x2', '\x2', '\x8C', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\'', '/', '\x39', '>', '\x45', 'M', 'S', 'Z', '^', 
		'\x65', 'o', 'v', '\x82', '\x89',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Generated
