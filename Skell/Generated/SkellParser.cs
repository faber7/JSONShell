//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Skell.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Skell.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
public partial class SkellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EOL=1, WS=2, KW_TRUE=3, KW_FALSE=4, KW_IF=5, KW_THEN=6, KW_ELSE=7, KW_FOR=8, 
		KW_IN=9, KW_RETURN=10, KW_LET=11, TYPE_OBJECT=12, TYPE_ARRAY=13, TYPE_NUMBER=14, 
		TYPE_STRING=15, TYPE_BOOL=16, LSQR=17, RSQR=18, LCURL=19, RCURL=20, LPAREN=21, 
		RPAREN=22, SYM_PERIOD=23, SYM_COMMA=24, SYM_QUOTE=25, SYM_COLON=26, OP_ASSGN=27, 
		OP_EQ=28, OP_NE=29, OP_LT=30, OP_LE=31, OP_GT=32, OP_GE=33, OP_NOT=34, 
		OP_OR=35, OP_AND=36, OP_ADD=37, OP_SUB=38, OP_DIV=39, OP_MUL=40, OP_MOD=41, 
		IDENTIFIER=42, STRING=43, NUMBER=44, NONDIGIT=45, DIGIT=46, NONZERO_DIGIT=47, 
		ZERO=48, SIGN=49, INT=50, FRAC=51, EXP=52, HEX=53, UNICODE=54, ESC=55, 
		SAFECODEPOINT=56;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_statementBlock = 2, RULE_declaration = 3, 
		RULE_lambda = 4, RULE_lambdaArg = 5, RULE_control = 6, RULE_ifControl = 7, 
		RULE_ifThenControl = 8, RULE_ifThenElseControl = 9, RULE_forControl = 10, 
		RULE_returnControl = 11, RULE_expression = 12, RULE_eqExpr = 13, RULE_relExpr = 14, 
		RULE_addExpr = 15, RULE_mulExpr = 16, RULE_unary = 17, RULE_primary = 18, 
		RULE_fnCall = 19, RULE_fnArg = 20, RULE_term = 21, RULE_value = 22, RULE_bool = 23, 
		RULE_array = 24, RULE_pair = 25, RULE_object = 26, RULE_typeName = 27;
	public static readonly string[] ruleNames = {
		"program", "statement", "statementBlock", "declaration", "lambda", "lambdaArg", 
		"control", "ifControl", "ifThenControl", "ifThenElseControl", "forControl", 
		"returnControl", "expression", "eqExpr", "relExpr", "addExpr", "mulExpr", 
		"unary", "primary", "fnCall", "fnArg", "term", "value", "bool", "array", 
		"pair", "object", "typeName"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\n'", null, "'true'", "'false'", "'if'", "'then'", "'else'", "'for'", 
		"'in'", "'return'", "'let'", "'object'", "'array'", "'number'", "'string'", 
		"'bool'", "'['", "']'", "'{'", "'}'", "'('", "')'", "'.'", "','", "'\"'", 
		"':'", "'='", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'!'", "'|'", 
		"'&'", "'+'", "'-'", "'/'", "'*'", "'%'", null, null, null, null, null, 
		null, "'0'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EOL", "WS", "KW_TRUE", "KW_FALSE", "KW_IF", "KW_THEN", "KW_ELSE", 
		"KW_FOR", "KW_IN", "KW_RETURN", "KW_LET", "TYPE_OBJECT", "TYPE_ARRAY", 
		"TYPE_NUMBER", "TYPE_STRING", "TYPE_BOOL", "LSQR", "RSQR", "LCURL", "RCURL", 
		"LPAREN", "RPAREN", "SYM_PERIOD", "SYM_COMMA", "SYM_QUOTE", "SYM_COLON", 
		"OP_ASSGN", "OP_EQ", "OP_NE", "OP_LT", "OP_LE", "OP_GT", "OP_GE", "OP_NOT", 
		"OP_OR", "OP_AND", "OP_ADD", "OP_SUB", "OP_DIV", "OP_MUL", "OP_MOD", "IDENTIFIER", 
		"STRING", "NUMBER", "NONDIGIT", "DIGIT", "NONZERO_DIGIT", "ZERO", "SIGN", 
		"INT", "FRAC", "EXP", "HEX", "UNICODE", "ESC", "SAFECODEPOINT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Skell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SkellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SkellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SkellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 56; statement();
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOL) | (1L << KW_TRUE) | (1L << KW_FALSE) | (1L << KW_IF) | (1L << KW_FOR) | (1L << KW_RETURN) | (1L << KW_LET) | (1L << LSQR) | (1L << LCURL) | (1L << LPAREN) | (1L << OP_NOT) | (1L << OP_SUB) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode EOL() { return GetToken(SkellParser.EOL, 0); }
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ControlContext control() {
			return GetRuleContext<ControlContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61; Match(EOL);
				}
				break;
			case KW_LET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62; declaration();
				State = 63; Match(EOL);
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case LSQR:
			case LCURL:
			case LPAREN:
			case OP_NOT:
			case OP_SUB:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 65; expression();
				State = 66; Match(EOL);
				}
				break;
			case KW_IF:
			case KW_FOR:
			case KW_RETURN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 68; control();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		public ITerminalNode LCURL() { return GetToken(SkellParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SkellParser.RCURL, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71; Match(LCURL);
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOL) | (1L << KW_TRUE) | (1L << KW_FALSE) | (1L << KW_IF) | (1L << KW_FOR) | (1L << KW_RETURN) | (1L << KW_LET) | (1L << LSQR) | (1L << LCURL) | (1L << LPAREN) | (1L << OP_NOT) | (1L << OP_SUB) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				{
				State = 72; statement();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode KW_LET() { return GetToken(SkellParser.KW_LET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public ITerminalNode OP_ASSGN() { return GetToken(SkellParser.OP_ASSGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaContext lambda() {
			return GetRuleContext<LambdaContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaration);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80; Match(KW_LET);
				State = 81; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82; Match(KW_LET);
				State = 83; Match(IDENTIFIER);
				State = 84; Match(OP_ASSGN);
				State = 87;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 85; expression();
					}
					break;
				case 2:
					{
					State = 86; lambda();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(SkellParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(SkellParser.RPAREN, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public LambdaArgContext[] lambdaArg() {
			return GetRuleContexts<LambdaArgContext>();
		}
		public LambdaArgContext lambdaArg(int i) {
			return GetRuleContext<LambdaArgContext>(i);
		}
		public ITerminalNode[] SYM_COMMA() { return GetTokens(SkellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(SkellParser.SYM_COMMA, i);
		}
		public LambdaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaContext lambda() {
		LambdaContext _localctx = new LambdaContext(Context, State);
		EnterRule(_localctx, 8, RULE_lambda);
		int _la;
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91; Match(LPAREN);
				State = 92; Match(RPAREN);
				State = 93; statementBlock();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; Match(LPAREN);
				State = 95; lambdaArg();
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 96; Match(SYM_COMMA);
					State = 97; lambdaArg();
					}
					}
					State = 102;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 103; Match(RPAREN);
				State = 104; statementBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaArgContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public LambdaArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaArg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaArgContext lambdaArg() {
		LambdaArgContext _localctx = new LambdaArgContext(Context, State);
		EnterRule(_localctx, 10, RULE_lambdaArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; typeName();
			State = 109; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlContext : ParserRuleContext {
		public IfControlContext ifControl() {
			return GetRuleContext<IfControlContext>(0);
		}
		public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		public ReturnControlContext returnControl() {
			return GetRuleContext<ReturnControlContext>(0);
		}
		public ControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlContext control() {
		ControlContext _localctx = new ControlContext(Context, State);
		EnterRule(_localctx, 12, RULE_control);
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111; ifControl();
				}
				break;
			case KW_FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112; forControl();
				}
				break;
			case KW_RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 113; returnControl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfControlContext : ParserRuleContext {
		public IfThenControlContext ifThenControl() {
			return GetRuleContext<IfThenControlContext>(0);
		}
		public IfThenElseControlContext ifThenElseControl() {
			return GetRuleContext<IfThenElseControlContext>(0);
		}
		public IfControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfControlContext ifControl() {
		IfControlContext _localctx = new IfControlContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifControl);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 116; ifThenControl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 117; ifThenElseControl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenControlContext : ParserRuleContext {
		public ITerminalNode KW_IF() { return GetToken(SkellParser.KW_IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode KW_THEN() { return GetToken(SkellParser.KW_THEN, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public IfThenControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenControlContext ifThenControl() {
		IfThenControlContext _localctx = new IfThenControlContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifThenControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(KW_IF);
			State = 121; expression();
			State = 122; Match(KW_THEN);
			State = 123; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseControlContext : ParserRuleContext {
		public IfThenControlContext ifThenControl() {
			return GetRuleContext<IfThenControlContext>(0);
		}
		public ITerminalNode KW_ELSE() { return GetToken(SkellParser.KW_ELSE, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public IfControlContext ifControl() {
			return GetRuleContext<IfControlContext>(0);
		}
		public IfThenElseControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseControlContext ifThenElseControl() {
		IfThenElseControlContext _localctx = new IfThenElseControlContext(Context, State);
		EnterRule(_localctx, 18, RULE_ifThenElseControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; ifThenControl();
			State = 126; Match(KW_ELSE);
			State = 129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURL:
				{
				State = 127; statementBlock();
				}
				break;
			case KW_IF:
				{
				State = 128; ifControl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public ITerminalNode KW_FOR() { return GetToken(SkellParser.KW_FOR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public ITerminalNode KW_IN() { return GetToken(SkellParser.KW_IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 20, RULE_forControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(KW_FOR);
			State = 132; Match(IDENTIFIER);
			State = 133; Match(KW_IN);
			State = 134; expression();
			State = 135; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnControlContext : ParserRuleContext {
		public ITerminalNode KW_RETURN() { return GetToken(SkellParser.KW_RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnControlContext returnControl() {
		ReturnControlContext _localctx = new ReturnControlContext(Context, State);
		EnterRule(_localctx, 22, RULE_returnControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(KW_RETURN);
			State = 139;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 138; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public EqExprContext eqExpr() {
			return GetRuleContext<EqExprContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; eqExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqExprContext : ParserRuleContext {
		public RelExprContext[] relExpr() {
			return GetRuleContexts<RelExprContext>();
		}
		public RelExprContext relExpr(int i) {
			return GetRuleContext<RelExprContext>(i);
		}
		public ITerminalNode OP_NE() { return GetToken(SkellParser.OP_NE, 0); }
		public ITerminalNode OP_EQ() { return GetToken(SkellParser.OP_EQ, 0); }
		public EqExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eqExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqExprContext eqExpr() {
		EqExprContext _localctx = new EqExprContext(Context, State);
		EnterRule(_localctx, 26, RULE_eqExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; relExpr();
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_EQ || _la==OP_NE) {
				{
				State = 144;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_EQ || _la==OP_NE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 145; relExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelExprContext : ParserRuleContext {
		public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		public ITerminalNode OP_GT() { return GetToken(SkellParser.OP_GT, 0); }
		public ITerminalNode OP_GE() { return GetToken(SkellParser.OP_GE, 0); }
		public ITerminalNode OP_LT() { return GetToken(SkellParser.OP_LT, 0); }
		public ITerminalNode OP_LE() { return GetToken(SkellParser.OP_LE, 0); }
		public RelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelExprContext relExpr() {
		RelExprContext _localctx = new RelExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_relExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; addExpr();
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_LT) | (1L << OP_LE) | (1L << OP_GT) | (1L << OP_GE))) != 0)) {
				{
				State = 149;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_LT) | (1L << OP_LE) | (1L << OP_GT) | (1L << OP_GE))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 150; addExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		public MulExprContext[] mulExpr() {
			return GetRuleContexts<MulExprContext>();
		}
		public MulExprContext mulExpr(int i) {
			return GetRuleContext<MulExprContext>(i);
		}
		public ITerminalNode[] OP_SUB() { return GetTokens(SkellParser.OP_SUB); }
		public ITerminalNode OP_SUB(int i) {
			return GetToken(SkellParser.OP_SUB, i);
		}
		public ITerminalNode[] OP_ADD() { return GetTokens(SkellParser.OP_ADD); }
		public ITerminalNode OP_ADD(int i) {
			return GetToken(SkellParser.OP_ADD, i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(Context, State);
		EnterRule(_localctx, 30, RULE_addExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; mulExpr();
			State = 158;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 154;
					_la = TokenStream.LA(1);
					if ( !(_la==OP_ADD || _la==OP_SUB) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 155; mulExpr();
					}
					} 
				}
				State = 160;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulExprContext : ParserRuleContext {
		public UnaryContext[] unary() {
			return GetRuleContexts<UnaryContext>();
		}
		public UnaryContext unary(int i) {
			return GetRuleContext<UnaryContext>(i);
		}
		public ITerminalNode[] OP_DIV() { return GetTokens(SkellParser.OP_DIV); }
		public ITerminalNode OP_DIV(int i) {
			return GetToken(SkellParser.OP_DIV, i);
		}
		public ITerminalNode[] OP_MUL() { return GetTokens(SkellParser.OP_MUL); }
		public ITerminalNode OP_MUL(int i) {
			return GetToken(SkellParser.OP_MUL, i);
		}
		public MulExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulExprContext mulExpr() {
		MulExprContext _localctx = new MulExprContext(Context, State);
		EnterRule(_localctx, 32, RULE_mulExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; unary();
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_DIV || _la==OP_MUL) {
				{
				{
				State = 162;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_DIV || _la==OP_MUL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 163; unary();
				}
				}
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		public ITerminalNode OP_NOT() { return GetToken(SkellParser.OP_NOT, 0); }
		public ITerminalNode OP_SUB() { return GetToken(SkellParser.OP_SUB, 0); }
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 34, RULE_unary);
		int _la;
		try {
			State = 172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP_NOT:
			case OP_SUB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_NOT || _la==OP_SUB) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 170; unary();
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case LSQR:
			case LCURL:
			case LPAREN:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171; primary(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(SkellParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(SkellParser.RPAREN, 0); }
		public FnCallContext fnCall() {
			return GetRuleContext<FnCallContext>(0);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ITerminalNode LSQR() { return GetToken(SkellParser.LSQR, 0); }
		public ITerminalNode RSQR() { return GetToken(SkellParser.RSQR, 0); }
		public ITerminalNode STRING() { return GetToken(SkellParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(SkellParser.NUMBER, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		return primary(0);
	}

	private PrimaryContext primary(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryContext _localctx = new PrimaryContext(Context, _parentState);
		PrimaryContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_primary, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 175; term();
				}
				break;
			case 2:
				{
				State = 176; Match(LPAREN);
				State = 177; expression();
				State = 178; Match(RPAREN);
				}
				break;
			case 3:
				{
				State = 180; fnCall();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 189;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PrimaryContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_primary);
					State = 183;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 184; Match(LSQR);
					State = 185;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 186; Match(RSQR);
					}
					} 
				}
				State = 191;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FnCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public ITerminalNode LPAREN() { return GetToken(SkellParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(SkellParser.RPAREN, 0); }
		public FnArgContext[] fnArg() {
			return GetRuleContexts<FnArgContext>();
		}
		public FnArgContext fnArg(int i) {
			return GetRuleContext<FnArgContext>(i);
		}
		public ITerminalNode[] SYM_COMMA() { return GetTokens(SkellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(SkellParser.SYM_COMMA, i);
		}
		public FnCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnCallContext fnCall() {
		FnCallContext _localctx = new FnCallContext(Context, State);
		EnterRule(_localctx, 38, RULE_fnCall);
		int _la;
		try {
			State = 207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192; Match(IDENTIFIER);
				State = 193; Match(LPAREN);
				State = 194; Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195; Match(IDENTIFIER);
				State = 196; Match(LPAREN);
				State = 197; fnArg();
				State = 202;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 198; Match(SYM_COMMA);
					State = 199; fnArg();
					}
					}
					State = 204;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 205; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnArgContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public ITerminalNode SYM_COLON() { return GetToken(SkellParser.SYM_COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FnArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnArg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnArgContext fnArg() {
		FnArgContext _localctx = new FnArgContext(Context, State);
		EnterRule(_localctx, 40, RULE_fnArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(IDENTIFIER);
			State = 210; Match(SYM_COLON);
			State = 211; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 42, RULE_term);
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case LSQR:
			case LCURL:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213; value();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(SkellParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(SkellParser.NUMBER, 0); }
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 44, RULE_value);
		try {
			State = 222;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 217; @object();
				}
				break;
			case LSQR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218; array();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 219; Match(STRING);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 220; Match(NUMBER);
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 221; @bool();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode KW_TRUE() { return GetToken(SkellParser.KW_TRUE, 0); }
		public ITerminalNode KW_FALSE() { return GetToken(SkellParser.KW_FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 46, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_TRUE || _la==KW_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode LSQR() { return GetToken(SkellParser.LSQR, 0); }
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ITerminalNode RSQR() { return GetToken(SkellParser.RSQR, 0); }
		public ITerminalNode[] SYM_COMMA() { return GetTokens(SkellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(SkellParser.SYM_COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 48, RULE_array);
		int _la;
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 226; Match(LSQR);
				State = 227; value();
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 228; Match(SYM_COMMA);
					State = 229; value();
					}
					}
					State = 234;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 235; Match(RSQR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 237; Match(LSQR);
				State = 238; Match(RSQR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(SkellParser.STRING, 0); }
		public ITerminalNode SYM_COLON() { return GetToken(SkellParser.SYM_COLON, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 50, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; Match(STRING);
			State = 242; Match(SYM_COLON);
			State = 243; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ITerminalNode LCURL() { return GetToken(SkellParser.LCURL, 0); }
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ITerminalNode RCURL() { return GetToken(SkellParser.RCURL, 0); }
		public ITerminalNode[] SYM_COMMA() { return GetTokens(SkellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(SkellParser.SYM_COMMA, i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 52, RULE_object);
		int _la;
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 245; Match(LCURL);
				State = 246; pair();
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 247; Match(SYM_COMMA);
					State = 248; pair();
					}
					}
					State = 253;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 254; Match(RCURL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256; Match(LCURL);
				State = 257; Match(RCURL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode TYPE_OBJECT() { return GetToken(SkellParser.TYPE_OBJECT, 0); }
		public ITerminalNode TYPE_ARRAY() { return GetToken(SkellParser.TYPE_ARRAY, 0); }
		public ITerminalNode TYPE_NUMBER() { return GetToken(SkellParser.TYPE_NUMBER, 0); }
		public ITerminalNode TYPE_STRING() { return GetToken(SkellParser.TYPE_STRING, 0); }
		public ITerminalNode TYPE_BOOL() { return GetToken(SkellParser.TYPE_BOOL, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE_OBJECT) | (1L << TYPE_ARRAY) | (1L << TYPE_NUMBER) | (1L << TYPE_STRING) | (1L << TYPE_BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 18: return primary_sempred((PrimaryContext)_localctx, predIndex);
		}
		return true;
	}
	private bool primary_sempred(PrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ':', '\x109', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x3', '\x2', '\x6', '\x2', '<', '\n', '\x2', '\r', '\x2', '\xE', 
		'\x2', '=', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'H', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'L', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', 'O', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', 'Z', '\n', '\x5', '\x5', '\x5', '\\', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x65', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', 'h', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', 'm', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'u', '\n', '\b', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', 'y', '\n', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\x84', '\n', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x5', '\r', '\x8E', '\n', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x95', 
		'\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x9A', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\x9F', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xA2', '\v', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\xA7', 
		'\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xAA', '\v', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xAF', '\n', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xB8', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xBE', 
		'\n', '\x14', '\f', '\x14', '\xE', '\x14', '\xC1', '\v', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xCB', '\n', '\x15', 
		'\f', '\x15', '\xE', '\x15', '\xCE', '\v', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\xD2', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\xDA', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\xE1', '\n', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\a', '\x1A', '\xE9', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', '\xEC', 
		'\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x5', '\x1A', '\xF2', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\a', '\x1C', '\xFC', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', 
		'\xFF', '\v', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x105', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x2', '\x3', '&', '\x1E', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', '\x2', '\n', '\x3', '\x2', '\x1E', '\x1F', '\x3', '\x2', ' ', 
		'#', '\x3', '\x2', '\'', '(', '\x3', '\x2', ')', '*', '\x4', '\x2', '$', 
		'$', '(', '(', '\x3', '\x2', ',', '.', '\x3', '\x2', '\x5', '\x6', '\x3', 
		'\x2', '\xE', '\x12', '\x2', '\x10D', '\x2', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x4', 'G', '\x3', '\x2', '\x2', '\x2', '\x6', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\b', '[', '\x3', '\x2', '\x2', '\x2', '\n', 'l', '\x3', 
		'\x2', '\x2', '\x2', '\f', 'n', '\x3', '\x2', '\x2', '\x2', '\xE', 't', 
		'\x3', '\x2', '\x2', '\x2', '\x10', 'x', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'z', '\x3', '\x2', '\x2', '\x2', '\x14', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x85', '\x3', '\x2', '\x2', '\x2', '\x18', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x96', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x9B', '\x3', '\x2', '\x2', '\x2', '\"', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xAE', '\x3', '\x2', '\x2', '\x2', '&', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '(', '\xD1', '\x3', '\x2', '\x2', '\x2', '*', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', ',', '\xD9', '\x3', '\x2', '\x2', '\x2', '.', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\x30', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\xF1', '\x3', '\x2', '\x2', '\x2', '\x34', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x104', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x106', '\x3', '\x2', '\x2', '\x2', ':', '<', '\x5', '\x4', '\x3', '\x2', 
		';', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', 
		'=', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x3', '\x3', '\x2', '\x2', '\x2', '?', 'H', '\a', '\x3', '\x2', 
		'\x2', '@', '\x41', '\x5', '\b', '\x5', '\x2', '\x41', '\x42', '\a', '\x3', 
		'\x2', '\x2', '\x42', 'H', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', 
		'\x5', '\x1A', '\xE', '\x2', '\x44', '\x45', '\a', '\x3', '\x2', '\x2', 
		'\x45', 'H', '\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\x5', '\xE', '\b', 
		'\x2', 'G', '?', '\x3', '\x2', '\x2', '\x2', 'G', '@', '\x3', '\x2', '\x2', 
		'\x2', 'G', '\x43', '\x3', '\x2', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x5', '\x3', '\x2', '\x2', '\x2', 'I', 'M', '\a', 
		'\x15', '\x2', '\x2', 'J', 'L', '\x5', '\x4', '\x3', '\x2', 'K', 'J', 
		'\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x3', '\x2', '\x2', '\x2', 'M', 
		'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 
		'N', 'P', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\a', '\x16', '\x2', '\x2', 'Q', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\a', '\r', '\x2', '\x2', 'S', '\\', '\a', ',', '\x2', 
		'\x2', 'T', 'U', '\a', '\r', '\x2', '\x2', 'U', 'V', '\a', ',', '\x2', 
		'\x2', 'V', 'Y', '\a', '\x1D', '\x2', '\x2', 'W', 'Z', '\x5', '\x1A', 
		'\xE', '\x2', 'X', 'Z', '\x5', '\n', '\x6', '\x2', 'Y', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', '\\', '\x3', 
		'\x2', '\x2', '\x2', '[', 'R', '\x3', '\x2', '\x2', '\x2', '[', 'T', '\x3', 
		'\x2', '\x2', '\x2', '\\', '\t', '\x3', '\x2', '\x2', '\x2', ']', '^', 
		'\a', '\x17', '\x2', '\x2', '^', '_', '\a', '\x18', '\x2', '\x2', '_', 
		'm', '\x5', '\x6', '\x4', '\x2', '`', '\x61', '\a', '\x17', '\x2', '\x2', 
		'\x61', '\x66', '\x5', '\f', '\a', '\x2', '\x62', '\x63', '\a', '\x1A', 
		'\x2', '\x2', '\x63', '\x65', '\x5', '\f', '\a', '\x2', '\x64', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x65', 'h', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'i', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'j', '\a', '\x18', '\x2', '\x2', 'j', 'k', '\x5', '\x6', 
		'\x4', '\x2', 'k', 'm', '\x3', '\x2', '\x2', '\x2', 'l', ']', '\x3', '\x2', 
		'\x2', '\x2', 'l', '`', '\x3', '\x2', '\x2', '\x2', 'm', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'n', 'o', '\x5', '\x38', '\x1D', '\x2', 'o', 'p', 
		'\a', ',', '\x2', '\x2', 'p', '\r', '\x3', '\x2', '\x2', '\x2', 'q', 'u', 
		'\x5', '\x10', '\t', '\x2', 'r', 'u', '\x5', '\x16', '\f', '\x2', 's', 
		'u', '\x5', '\x18', '\r', '\x2', 't', 'q', '\x3', '\x2', '\x2', '\x2', 
		't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 
		'u', '\xF', '\x3', '\x2', '\x2', '\x2', 'v', 'y', '\x5', '\x12', '\n', 
		'\x2', 'w', 'y', '\x5', '\x14', '\v', '\x2', 'x', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'w', '\x3', '\x2', '\x2', '\x2', 'y', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'z', '{', '\a', '\a', '\x2', '\x2', '{', '|', '\x5', '\x1A', 
		'\xE', '\x2', '|', '}', '\a', '\b', '\x2', '\x2', '}', '~', '\x5', '\x6', 
		'\x4', '\x2', '~', '\x13', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\x5', '\x12', '\n', '\x2', '\x80', '\x83', '\a', '\t', '\x2', '\x2', 
		'\x81', '\x84', '\x5', '\x6', '\x4', '\x2', '\x82', '\x84', '\x5', '\x10', 
		'\t', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x86', '\a', '\n', '\x2', '\x2', '\x86', '\x87', '\a', ',', '\x2', 
		'\x2', '\x87', '\x88', '\a', '\v', '\x2', '\x2', '\x88', '\x89', '\x5', 
		'\x1A', '\xE', '\x2', '\x89', '\x8A', '\x5', '\x6', '\x4', '\x2', '\x8A', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8D', '\a', '\f', '\x2', 
		'\x2', '\x8C', '\x8E', '\x5', '\x1A', '\xE', '\x2', '\x8D', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x5', '\x1C', '\xF', 
		'\x2', '\x90', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x91', '\x94', '\x5', 
		'\x1E', '\x10', '\x2', '\x92', '\x93', '\t', '\x2', '\x2', '\x2', '\x93', 
		'\x95', '\x5', '\x1E', '\x10', '\x2', '\x94', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x99', '\x5', ' ', '\x11', '\x2', '\x97', 
		'\x98', '\t', '\x3', '\x2', '\x2', '\x98', '\x9A', '\x5', ' ', '\x11', 
		'\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\xA0', '\x5', '\"', '\x12', '\x2', '\x9C', '\x9D', '\t', '\x4', '\x2', 
		'\x2', '\x9D', '\x9F', '\x5', '\"', '\x12', '\x2', '\x9E', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '!', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA8', '\x5', '$', '\x13', '\x2', '\xA4', 
		'\xA5', '\t', '\x5', '\x2', '\x2', '\xA5', '\xA7', '\x5', '$', '\x13', 
		'\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\t', 
		'\x6', '\x2', '\x2', '\xAC', '\xAF', '\x5', '$', '\x13', '\x2', '\xAD', 
		'\xAF', '\x5', '&', '\x14', '\x2', '\xAE', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB1', '\b', '\x14', '\x1', '\x2', '\xB1', 
		'\xB8', '\x5', ',', '\x17', '\x2', '\xB2', '\xB3', '\a', '\x17', '\x2', 
		'\x2', '\xB3', '\xB4', '\x5', '\x1A', '\xE', '\x2', '\xB4', '\xB5', '\a', 
		'\x18', '\x2', '\x2', '\xB5', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB8', '\x5', '(', '\x15', '\x2', '\xB7', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xBA', '\f', '\x4', '\x2', '\x2', '\xBA', '\xBB', '\a', '\x13', '\x2', 
		'\x2', '\xBB', '\xBC', '\t', '\a', '\x2', '\x2', '\xBC', '\xBE', '\a', 
		'\x14', '\x2', '\x2', '\xBD', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC3', '\a', ',', '\x2', '\x2', '\xC3', '\xC4', '\a', '\x17', '\x2', 
		'\x2', '\xC4', '\xD2', '\a', '\x18', '\x2', '\x2', '\xC5', '\xC6', '\a', 
		',', '\x2', '\x2', '\xC6', '\xC7', '\a', '\x17', '\x2', '\x2', '\xC7', 
		'\xCC', '\x5', '*', '\x16', '\x2', '\xC8', '\xC9', '\a', '\x1A', '\x2', 
		'\x2', '\xC9', '\xCB', '\x5', '*', '\x16', '\x2', '\xCA', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '\xD0', '\a', '\x18', '\x2', '\x2', '\xD0', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xD2', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD4', '\a', ',', '\x2', '\x2', '\xD4', 
		'\xD5', '\a', '\x1C', '\x2', '\x2', '\xD5', '\xD6', '\x5', '\x1A', '\xE', 
		'\x2', '\xD6', '+', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xDA', '\x5', 
		'.', '\x18', '\x2', '\xD8', '\xDA', '\a', ',', '\x2', '\x2', '\xD9', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\xD9', '\xD8', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '-', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xE1', '\x5', '\x36', 
		'\x1C', '\x2', '\xDC', '\xE1', '\x5', '\x32', '\x1A', '\x2', '\xDD', '\xE1', 
		'\a', '-', '\x2', '\x2', '\xDE', '\xE1', '\a', '.', '\x2', '\x2', '\xDF', 
		'\xE1', '\x5', '\x30', '\x19', '\x2', '\xE0', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDD', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xE1', '/', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE3', '\t', '\b', '\x2', '\x2', '\xE3', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\xE4', '\xE5', '\a', '\x13', '\x2', '\x2', '\xE5', 
		'\xEA', '\x5', '.', '\x18', '\x2', '\xE6', '\xE7', '\a', '\x1A', '\x2', 
		'\x2', '\xE7', '\xE9', '\x5', '.', '\x18', '\x2', '\xE8', '\xE6', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xED', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\xEE', '\a', '\x14', '\x2', '\x2', '\xEE', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\a', '\x13', '\x2', 
		'\x2', '\xF0', '\xF2', '\a', '\x14', '\x2', '\x2', '\xF1', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\a', '-', '\x2', 
		'\x2', '\xF4', '\xF5', '\a', '\x1C', '\x2', '\x2', '\xF5', '\xF6', '\x5', 
		'.', '\x18', '\x2', '\xF6', '\x35', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF8', '\a', '\x15', '\x2', '\x2', '\xF8', '\xFD', '\x5', '\x34', '\x1B', 
		'\x2', '\xF9', '\xFA', '\a', '\x1A', '\x2', '\x2', '\xFA', '\xFC', '\x5', 
		'\x34', '\x1B', '\x2', '\xFB', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFC', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\x101', '\a', '\x16', '\x2', '\x2', '\x101', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x103', '\a', '\x15', '\x2', '\x2', '\x103', '\x105', 
		'\a', '\x16', '\x2', '\x2', '\x104', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x105', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x107', '\t', '\t', '\x2', '\x2', '\x107', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x1C', '=', 'G', 'M', 'Y', '[', '\x66', 
		'l', 't', 'x', '\x83', '\x8D', '\x94', '\x99', '\xA0', '\xA8', '\xAE', 
		'\xB7', '\xBF', '\xCC', '\xD1', '\xD9', '\xE0', '\xEA', '\xF1', '\xFD', 
		'\x104',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Skell.Generated
