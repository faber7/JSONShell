//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Skell.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Skell.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
public partial class SkellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EOL=1, WS=2, KW_TRUE=3, KW_FALSE=4, KW_IF=5, KW_THEN=6, KW_ELSE=7, KW_FOR=8, 
		KW_IN=9, KW_RETURN=10, KW_LET=11, KW_FUN=12, KW_IS=13, KW_NULL=14, KW_NAMESPACE=15, 
		KW_USING=16, KW_AS=17, TYPE_OBJECT=18, TYPE_ARRAY=19, TYPE_NUMBER=20, 
		TYPE_STRING=21, TYPE_BOOL=22, TYPE_ANY=23, LSQR=24, RSQR=25, LCURL=26, 
		RCURL=27, LPAREN=28, RPAREN=29, SYM_PERIOD=30, SYM_COMMA=31, SYM_QUOTE=32, 
		SYM_COLON=33, SYM_DOLLAR=34, OP_ASSGN=35, OP_EQ=36, OP_NE=37, OP_LT=38, 
		OP_LE=39, OP_GT=40, OP_GE=41, OP_NOT=42, OP_OR=43, OP_AND=44, OP_ADD=45, 
		OP_SUB=46, OP_DIV=47, OP_MUL=48, OP_MOD=49, IDENTIFIER=50, STRING=51, 
		NUMBER=52, NONDIGIT=53, DIGIT=54, NONZERO_DIGIT=55, ZERO=56, SIGN=57, 
		INT=58, FRAC=59, EXP=60, HEX=61, UNICODE=62, ESC=63, SAFECODEPOINT=64;
	public const int
		RULE_program = 0, RULE_programStatement = 1, RULE_statement = 2, RULE_namespaceLoad = 3, 
		RULE_namespace = 4, RULE_namespaceStmt = 5, RULE_namespaceDecl = 6, RULE_programExec = 7, 
		RULE_statementBlock = 8, RULE_declaration = 9, RULE_function = 10, RULE_functionArg = 11, 
		RULE_control = 12, RULE_ifControl = 13, RULE_ifThenControl = 14, RULE_ifThenElseControl = 15, 
		RULE_forControl = 16, RULE_returnControl = 17, RULE_expression = 18, RULE_logExpr = 19, 
		RULE_eqExpr = 20, RULE_relExpr = 21, RULE_addExpr = 22, RULE_mulExpr = 23, 
		RULE_unary = 24, RULE_primary = 25, RULE_fnCall = 26, RULE_term = 27, 
		RULE_namespacedIdentifier = 28, RULE_value = 29, RULE_bool = 30, RULE_array = 31, 
		RULE_pair = 32, RULE_object = 33, RULE_typeSpecifier = 34, RULE_usableTypeSpecifier = 35;
	public static readonly string[] ruleNames = {
		"program", "programStatement", "statement", "namespaceLoad", "namespace", 
		"namespaceStmt", "namespaceDecl", "programExec", "statementBlock", "declaration", 
		"function", "functionArg", "control", "ifControl", "ifThenControl", "ifThenElseControl", 
		"forControl", "returnControl", "expression", "logExpr", "eqExpr", "relExpr", 
		"addExpr", "mulExpr", "unary", "primary", "fnCall", "term", "namespacedIdentifier", 
		"value", "bool", "array", "pair", "object", "typeSpecifier", "usableTypeSpecifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\n'", null, "'true'", "'false'", "'if'", "'then'", "'else'", "'for'", 
		"'in'", "'return'", "'let'", "'fun'", "'is'", "'null'", "'namespace'", 
		"'using'", "'as'", "'object'", "'array'", "'number'", "'string'", "'bool'", 
		"'any'", "'['", "']'", "'{'", "'}'", "'('", "')'", "'.'", "','", "'\"'", 
		"':'", "'$'", "'='", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'!'", 
		"'|'", "'&'", "'+'", "'-'", "'/'", "'*'", "'%'", null, null, null, null, 
		null, null, "'0'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EOL", "WS", "KW_TRUE", "KW_FALSE", "KW_IF", "KW_THEN", "KW_ELSE", 
		"KW_FOR", "KW_IN", "KW_RETURN", "KW_LET", "KW_FUN", "KW_IS", "KW_NULL", 
		"KW_NAMESPACE", "KW_USING", "KW_AS", "TYPE_OBJECT", "TYPE_ARRAY", "TYPE_NUMBER", 
		"TYPE_STRING", "TYPE_BOOL", "TYPE_ANY", "LSQR", "RSQR", "LCURL", "RCURL", 
		"LPAREN", "RPAREN", "SYM_PERIOD", "SYM_COMMA", "SYM_QUOTE", "SYM_COLON", 
		"SYM_DOLLAR", "OP_ASSGN", "OP_EQ", "OP_NE", "OP_LT", "OP_LE", "OP_GT", 
		"OP_GE", "OP_NOT", "OP_OR", "OP_AND", "OP_ADD", "OP_SUB", "OP_DIV", "OP_MUL", 
		"OP_MOD", "IDENTIFIER", "STRING", "NUMBER", "NONDIGIT", "DIGIT", "NONZERO_DIGIT", 
		"ZERO", "SIGN", "INT", "FRAC", "EXP", "HEX", "UNICODE", "ESC", "SAFECODEPOINT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Skell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SkellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SkellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SkellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ProgramStatementContext[] programStatement() {
			return GetRuleContexts<ProgramStatementContext>();
		}
		public ProgramStatementContext programStatement(int i) {
			return GetRuleContext<ProgramStatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 72; programStatement();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOL) | (1L << KW_TRUE) | (1L << KW_FALSE) | (1L << KW_IF) | (1L << KW_FOR) | (1L << KW_RETURN) | (1L << KW_LET) | (1L << KW_NULL) | (1L << KW_NAMESPACE) | (1L << KW_USING) | (1L << LSQR) | (1L << LCURL) | (1L << LPAREN) | (1L << SYM_DOLLAR) | (1L << OP_NOT) | (1L << OP_SUB) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramStatementContext : ParserRuleContext {
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(SkellParser.EOL, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ProgramStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramStatementContext programStatement() {
		ProgramStatementContext _localctx = new ProgramStatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_programStatement);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; @namespace();
				State = 78; Match(EOL);
				}
				break;
			case EOL:
			case KW_TRUE:
			case KW_FALSE:
			case KW_IF:
			case KW_FOR:
			case KW_RETURN:
			case KW_LET:
			case KW_NULL:
			case KW_USING:
			case LSQR:
			case LCURL:
			case LPAREN:
			case SYM_DOLLAR:
			case OP_NOT:
			case OP_SUB:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode EOL() { return GetToken(SkellParser.EOL, 0); }
		public NamespaceLoadContext namespaceLoad() {
			return GetRuleContext<NamespaceLoadContext>(0);
		}
		public ProgramExecContext programExec() {
			return GetRuleContext<ProgramExecContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ControlContext control() {
			return GetRuleContext<ControlContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83; Match(EOL);
				}
				break;
			case KW_USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84; namespaceLoad();
				State = 85; Match(EOL);
				}
				break;
			case SYM_DOLLAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 87; programExec();
				State = 88; Match(EOL);
				}
				break;
			case KW_LET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 90; declaration();
				State = 91; Match(EOL);
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case KW_NULL:
			case LSQR:
			case LCURL:
			case LPAREN:
			case OP_NOT:
			case OP_SUB:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 93; expression();
				State = 94; Match(EOL);
				}
				break;
			case KW_IF:
			case KW_FOR:
			case KW_RETURN:
				EnterOuterAlt(_localctx, 6);
				{
				State = 96; control();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceLoadContext : ParserRuleContext {
		public ITerminalNode KW_USING() { return GetToken(SkellParser.KW_USING, 0); }
		public ITerminalNode STRING() { return GetToken(SkellParser.STRING, 0); }
		public ITerminalNode KW_AS() { return GetToken(SkellParser.KW_AS, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public NamespaceLoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceLoad; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceLoad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceLoadContext namespaceLoad() {
		NamespaceLoadContext _localctx = new NamespaceLoadContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespaceLoad);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(KW_USING);
			State = 100; Match(STRING);
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_AS) {
				{
				State = 101; Match(KW_AS);
				State = 102; Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public ITerminalNode KW_NAMESPACE() { return GetToken(SkellParser.KW_NAMESPACE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public ITerminalNode LCURL() { return GetToken(SkellParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SkellParser.RCURL, 0); }
		public ITerminalNode EOL() { return GetToken(SkellParser.EOL, 0); }
		public NamespaceStmtContext[] namespaceStmt() {
			return GetRuleContexts<NamespaceStmtContext>();
		}
		public NamespaceStmtContext namespaceStmt(int i) {
			return GetRuleContext<NamespaceStmtContext>(i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 8, RULE_namespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(KW_NAMESPACE);
			State = 106; Match(IDENTIFIER);
			State = 107; Match(LCURL);
			State = 109;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 108; Match(EOL);
				}
				break;
			}
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOL) | (1L << KW_NAMESPACE) | (1L << KW_USING) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 111; namespaceStmt();
				}
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 117; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceStmtContext : ParserRuleContext {
		public ITerminalNode EOL() { return GetToken(SkellParser.EOL, 0); }
		public NamespaceDeclContext namespaceDecl() {
			return GetRuleContext<NamespaceDeclContext>(0);
		}
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public NamespaceLoadContext namespaceLoad() {
			return GetRuleContext<NamespaceLoadContext>(0);
		}
		public NamespaceStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceStmtContext namespaceStmt() {
		NamespaceStmtContext _localctx = new NamespaceStmtContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespaceStmt);
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 119; Match(EOL);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120; namespaceDecl();
				State = 121; Match(EOL);
				}
				break;
			case KW_NAMESPACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123; @namespace();
				State = 124; Match(EOL);
				}
				break;
			case KW_USING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 126; namespaceLoad();
				State = 127; Match(EOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public ITerminalNode OP_ASSGN() { return GetToken(SkellParser.OP_ASSGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public NamespaceDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDecl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclContext namespaceDecl() {
		NamespaceDeclContext _localctx = new NamespaceDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_namespaceDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(IDENTIFIER);
			State = 132; Match(OP_ASSGN);
			State = 135;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case KW_NULL:
			case LSQR:
			case LCURL:
			case LPAREN:
			case OP_NOT:
			case OP_SUB:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				{
				State = 133; expression();
				}
				break;
			case KW_FUN:
				{
				State = 134; function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramExecContext : ParserRuleContext {
		public ITerminalNode SYM_DOLLAR() { return GetToken(SkellParser.SYM_DOLLAR, 0); }
		public ITerminalNode[] EOL() { return GetTokens(SkellParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(SkellParser.EOL, i);
		}
		public ProgramExecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programExec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramExec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramExecContext programExec() {
		ProgramExecContext _localctx = new ProgramExecContext(Context, State);
		EnterRule(_localctx, 14, RULE_programExec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(SYM_DOLLAR);
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 2)) & ~0x3f) == 0 && ((1L << (_la - 2)) & ((1L << (WS - 2)) | (1L << (KW_TRUE - 2)) | (1L << (KW_FALSE - 2)) | (1L << (KW_IF - 2)) | (1L << (KW_THEN - 2)) | (1L << (KW_ELSE - 2)) | (1L << (KW_FOR - 2)) | (1L << (KW_IN - 2)) | (1L << (KW_RETURN - 2)) | (1L << (KW_LET - 2)) | (1L << (KW_FUN - 2)) | (1L << (KW_IS - 2)) | (1L << (KW_NULL - 2)) | (1L << (KW_NAMESPACE - 2)) | (1L << (KW_USING - 2)) | (1L << (KW_AS - 2)) | (1L << (TYPE_OBJECT - 2)) | (1L << (TYPE_ARRAY - 2)) | (1L << (TYPE_NUMBER - 2)) | (1L << (TYPE_STRING - 2)) | (1L << (TYPE_BOOL - 2)) | (1L << (TYPE_ANY - 2)) | (1L << (LSQR - 2)) | (1L << (RSQR - 2)) | (1L << (LCURL - 2)) | (1L << (RCURL - 2)) | (1L << (LPAREN - 2)) | (1L << (RPAREN - 2)) | (1L << (SYM_PERIOD - 2)) | (1L << (SYM_COMMA - 2)) | (1L << (SYM_QUOTE - 2)) | (1L << (SYM_COLON - 2)) | (1L << (SYM_DOLLAR - 2)) | (1L << (OP_ASSGN - 2)) | (1L << (OP_EQ - 2)) | (1L << (OP_NE - 2)) | (1L << (OP_LT - 2)) | (1L << (OP_LE - 2)) | (1L << (OP_GT - 2)) | (1L << (OP_GE - 2)) | (1L << (OP_NOT - 2)) | (1L << (OP_OR - 2)) | (1L << (OP_AND - 2)) | (1L << (OP_ADD - 2)) | (1L << (OP_SUB - 2)) | (1L << (OP_DIV - 2)) | (1L << (OP_MUL - 2)) | (1L << (OP_MOD - 2)) | (1L << (IDENTIFIER - 2)) | (1L << (STRING - 2)) | (1L << (NUMBER - 2)) | (1L << (NONDIGIT - 2)) | (1L << (DIGIT - 2)) | (1L << (NONZERO_DIGIT - 2)) | (1L << (ZERO - 2)) | (1L << (SIGN - 2)) | (1L << (INT - 2)) | (1L << (FRAC - 2)) | (1L << (EXP - 2)) | (1L << (HEX - 2)) | (1L << (UNICODE - 2)) | (1L << (ESC - 2)) | (1L << (SAFECODEPOINT - 2)))) != 0)) {
				{
				{
				State = 138;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==EOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		public ITerminalNode LCURL() { return GetToken(SkellParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SkellParser.RCURL, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(LCURL);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOL) | (1L << KW_TRUE) | (1L << KW_FALSE) | (1L << KW_IF) | (1L << KW_FOR) | (1L << KW_RETURN) | (1L << KW_LET) | (1L << KW_NULL) | (1L << KW_USING) | (1L << LSQR) | (1L << LCURL) | (1L << LPAREN) | (1L << SYM_DOLLAR) | (1L << OP_NOT) | (1L << OP_SUB) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				{
				State = 145; statement();
				}
				}
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 151; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode KW_LET() { return GetToken(SkellParser.KW_LET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public ITerminalNode OP_ASSGN() { return GetToken(SkellParser.OP_ASSGN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ITerminalNode[] LSQR() { return GetTokens(SkellParser.LSQR); }
		public ITerminalNode LSQR(int i) {
			return GetToken(SkellParser.LSQR, i);
		}
		public ITerminalNode[] RSQR() { return GetTokens(SkellParser.RSQR); }
		public ITerminalNode RSQR(int i) {
			return GetToken(SkellParser.RSQR, i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; Match(KW_LET);
			State = 154; Match(IDENTIFIER);
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LSQR) {
				{
				{
				State = 155; Match(LSQR);
				State = 156; expression();
				State = 157; Match(RSQR);
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 164; Match(OP_ASSGN);
			State = 167;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case KW_NULL:
			case LSQR:
			case LCURL:
			case LPAREN:
			case OP_NOT:
			case OP_SUB:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				{
				State = 165; expression();
				}
				break;
			case KW_FUN:
				{
				State = 166; function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode KW_FUN() { return GetToken(SkellParser.KW_FUN, 0); }
		public ITerminalNode LPAREN() { return GetToken(SkellParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(SkellParser.RPAREN, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public ITerminalNode[] SYM_COMMA() { return GetTokens(SkellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(SkellParser.SYM_COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 20, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(KW_FUN);
			State = 170; Match(LPAREN);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE_OBJECT) | (1L << TYPE_ARRAY) | (1L << TYPE_NUMBER) | (1L << TYPE_STRING) | (1L << TYPE_BOOL) | (1L << TYPE_ANY))) != 0)) {
				{
				State = 171; functionArg();
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 172; Match(SYM_COMMA);
					State = 173; functionArg();
					}
					}
					State = 178;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 181; Match(RPAREN);
			State = 182; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; typeSpecifier();
			State = 185; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlContext : ParserRuleContext {
		public IfControlContext ifControl() {
			return GetRuleContext<IfControlContext>(0);
		}
		public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		public ReturnControlContext returnControl() {
			return GetRuleContext<ReturnControlContext>(0);
		}
		public ControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlContext control() {
		ControlContext _localctx = new ControlContext(Context, State);
		EnterRule(_localctx, 24, RULE_control);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187; ifControl();
				}
				break;
			case KW_FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188; forControl();
				}
				break;
			case KW_RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 189; returnControl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfControlContext : ParserRuleContext {
		public IfThenControlContext ifThenControl() {
			return GetRuleContext<IfThenControlContext>(0);
		}
		public IfThenElseControlContext ifThenElseControl() {
			return GetRuleContext<IfThenElseControlContext>(0);
		}
		public IfControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfControlContext ifControl() {
		IfControlContext _localctx = new IfControlContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifControl);
		try {
			State = 194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192; ifThenControl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 193; ifThenElseControl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenControlContext : ParserRuleContext {
		public ITerminalNode KW_IF() { return GetToken(SkellParser.KW_IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode KW_THEN() { return GetToken(SkellParser.KW_THEN, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public IfThenControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenControlContext ifThenControl() {
		IfThenControlContext _localctx = new IfThenControlContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifThenControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(KW_IF);
			State = 197; expression();
			State = 198; Match(KW_THEN);
			State = 199; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseControlContext : ParserRuleContext {
		public IfThenControlContext ifThenControl() {
			return GetRuleContext<IfThenControlContext>(0);
		}
		public ITerminalNode KW_ELSE() { return GetToken(SkellParser.KW_ELSE, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public IfControlContext ifControl() {
			return GetRuleContext<IfControlContext>(0);
		}
		public IfThenElseControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseControlContext ifThenElseControl() {
		IfThenElseControlContext _localctx = new IfThenElseControlContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifThenElseControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; ifThenControl();
			State = 202; Match(KW_ELSE);
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURL:
				{
				State = 203; statementBlock();
				}
				break;
			case KW_IF:
				{
				State = 204; ifControl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public ITerminalNode KW_FOR() { return GetToken(SkellParser.KW_FOR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public ITerminalNode KW_IN() { return GetToken(SkellParser.KW_IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 32, RULE_forControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(KW_FOR);
			State = 208; Match(IDENTIFIER);
			State = 209; Match(KW_IN);
			State = 210; expression();
			State = 211; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnControlContext : ParserRuleContext {
		public ITerminalNode KW_RETURN() { return GetToken(SkellParser.KW_RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnControlContext returnControl() {
		ReturnControlContext _localctx = new ReturnControlContext(Context, State);
		EnterRule(_localctx, 34, RULE_returnControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(KW_RETURN);
			State = 215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 214; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public LogExprContext logExpr() {
			return GetRuleContext<LogExprContext>(0);
		}
		public ITerminalNode KW_IS() { return GetToken(SkellParser.KW_IS, 0); }
		public UsableTypeSpecifierContext usableTypeSpecifier() {
			return GetRuleContext<UsableTypeSpecifierContext>(0);
		}
		public FnCallContext fnCall() {
			return GetRuleContext<FnCallContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_expression);
		int _la;
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 217; logExpr();
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_IS) {
					{
					State = 218; Match(KW_IS);
					State = 219; usableTypeSpecifier();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 222; fnCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogExprContext : ParserRuleContext {
		public EqExprContext[] eqExpr() {
			return GetRuleContexts<EqExprContext>();
		}
		public EqExprContext eqExpr(int i) {
			return GetRuleContext<EqExprContext>(i);
		}
		public ITerminalNode[] OP_AND() { return GetTokens(SkellParser.OP_AND); }
		public ITerminalNode OP_AND(int i) {
			return GetToken(SkellParser.OP_AND, i);
		}
		public ITerminalNode[] OP_OR() { return GetTokens(SkellParser.OP_OR); }
		public ITerminalNode OP_OR(int i) {
			return GetToken(SkellParser.OP_OR, i);
		}
		public LogExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogExprContext logExpr() {
		LogExprContext _localctx = new LogExprContext(Context, State);
		EnterRule(_localctx, 38, RULE_logExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; eqExpr();
			State = 240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OP_AND) {
					{
					{
					State = 226; Match(OP_AND);
					State = 227; eqExpr();
					}
					}
					State = 232;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OP_OR) {
					{
					{
					State = 233; Match(OP_OR);
					State = 234; eqExpr();
					}
					}
					State = 239;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqExprContext : ParserRuleContext {
		public RelExprContext[] relExpr() {
			return GetRuleContexts<RelExprContext>();
		}
		public RelExprContext relExpr(int i) {
			return GetRuleContext<RelExprContext>(i);
		}
		public ITerminalNode OP_NE() { return GetToken(SkellParser.OP_NE, 0); }
		public ITerminalNode OP_EQ() { return GetToken(SkellParser.OP_EQ, 0); }
		public EqExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eqExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqExprContext eqExpr() {
		EqExprContext _localctx = new EqExprContext(Context, State);
		EnterRule(_localctx, 40, RULE_eqExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; relExpr();
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_EQ || _la==OP_NE) {
				{
				State = 243;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_EQ || _la==OP_NE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 244; relExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelExprContext : ParserRuleContext {
		public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		public ITerminalNode OP_GT() { return GetToken(SkellParser.OP_GT, 0); }
		public ITerminalNode OP_GE() { return GetToken(SkellParser.OP_GE, 0); }
		public ITerminalNode OP_LT() { return GetToken(SkellParser.OP_LT, 0); }
		public ITerminalNode OP_LE() { return GetToken(SkellParser.OP_LE, 0); }
		public RelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelExprContext relExpr() {
		RelExprContext _localctx = new RelExprContext(Context, State);
		EnterRule(_localctx, 42, RULE_relExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; addExpr();
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_LT) | (1L << OP_LE) | (1L << OP_GT) | (1L << OP_GE))) != 0)) {
				{
				State = 248;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_LT) | (1L << OP_LE) | (1L << OP_GT) | (1L << OP_GE))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 249; addExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		public MulExprContext[] mulExpr() {
			return GetRuleContexts<MulExprContext>();
		}
		public MulExprContext mulExpr(int i) {
			return GetRuleContext<MulExprContext>(i);
		}
		public ITerminalNode[] OP_SUB() { return GetTokens(SkellParser.OP_SUB); }
		public ITerminalNode OP_SUB(int i) {
			return GetToken(SkellParser.OP_SUB, i);
		}
		public ITerminalNode[] OP_ADD() { return GetTokens(SkellParser.OP_ADD); }
		public ITerminalNode OP_ADD(int i) {
			return GetToken(SkellParser.OP_ADD, i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(Context, State);
		EnterRule(_localctx, 44, RULE_addExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; mulExpr();
			State = 257;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 253;
					_la = TokenStream.LA(1);
					if ( !(_la==OP_ADD || _la==OP_SUB) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 254; mulExpr();
					}
					} 
				}
				State = 259;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulExprContext : ParserRuleContext {
		public UnaryContext[] unary() {
			return GetRuleContexts<UnaryContext>();
		}
		public UnaryContext unary(int i) {
			return GetRuleContext<UnaryContext>(i);
		}
		public ITerminalNode[] OP_DIV() { return GetTokens(SkellParser.OP_DIV); }
		public ITerminalNode OP_DIV(int i) {
			return GetToken(SkellParser.OP_DIV, i);
		}
		public ITerminalNode[] OP_MUL() { return GetTokens(SkellParser.OP_MUL); }
		public ITerminalNode OP_MUL(int i) {
			return GetToken(SkellParser.OP_MUL, i);
		}
		public ITerminalNode[] OP_MOD() { return GetTokens(SkellParser.OP_MOD); }
		public ITerminalNode OP_MOD(int i) {
			return GetToken(SkellParser.OP_MOD, i);
		}
		public MulExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulExprContext mulExpr() {
		MulExprContext _localctx = new MulExprContext(Context, State);
		EnterRule(_localctx, 46, RULE_mulExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; unary();
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_DIV) | (1L << OP_MUL) | (1L << OP_MOD))) != 0)) {
				{
				{
				State = 261;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_DIV) | (1L << OP_MUL) | (1L << OP_MOD))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 262; unary();
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		public ITerminalNode OP_NOT() { return GetToken(SkellParser.OP_NOT, 0); }
		public ITerminalNode OP_SUB() { return GetToken(SkellParser.OP_SUB, 0); }
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 48, RULE_unary);
		int _la;
		try {
			State = 271;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP_NOT:
			case OP_SUB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_NOT || _la==OP_SUB) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 269; unary();
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case KW_NULL:
			case LSQR:
			case LCURL:
			case LPAREN:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 270; primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(SkellParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(SkellParser.RPAREN, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 50, RULE_primary);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case KW_NULL:
			case LSQR:
			case LCURL:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 273; term(0);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 274; Match(LPAREN);
				State = 275; expression();
				State = 276; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FnCallContext : ParserRuleContext {
		public NamespacedIdentifierContext namespacedIdentifier() {
			return GetRuleContext<NamespacedIdentifierContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FnCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnCallContext fnCall() {
		FnCallContext _localctx = new FnCallContext(Context, State);
		EnterRule(_localctx, 52, RULE_fnCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 280; namespacedIdentifier();
				}
				break;
			case 2:
				{
				State = 281; Match(IDENTIFIER);
				}
				break;
			}
			State = 287;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 284; expression();
					}
					} 
				}
				State = 289;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public NamespacedIdentifierContext namespacedIdentifier() {
			return GetRuleContext<NamespacedIdentifierContext>(0);
		}
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode LSQR() { return GetToken(SkellParser.LSQR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RSQR() { return GetToken(SkellParser.RSQR, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TermContext _localctx = new TermContext(Context, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 291; value();
				}
				break;
			case 2:
				{
				State = 292; Match(IDENTIFIER);
				}
				break;
			case 3:
				{
				State = 293; namespacedIdentifier();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 303;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TermContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_term);
					State = 296;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 297; Match(LSQR);
					State = 298; expression();
					State = 299; Match(RSQR);
					}
					} 
				}
				State = 305;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NamespacedIdentifierContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(SkellParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SkellParser.IDENTIFIER, i);
		}
		public ITerminalNode[] SYM_PERIOD() { return GetTokens(SkellParser.SYM_PERIOD); }
		public ITerminalNode SYM_PERIOD(int i) {
			return GetToken(SkellParser.SYM_PERIOD, i);
		}
		public NamespacedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacedIdentifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespacedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespacedIdentifierContext namespacedIdentifier() {
		NamespacedIdentifierContext _localctx = new NamespacedIdentifierContext(Context, State);
		EnterRule(_localctx, 56, RULE_namespacedIdentifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 306; Match(IDENTIFIER);
					State = 307; Match(SYM_PERIOD);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 310;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 312; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(SkellParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(SkellParser.NUMBER, 0); }
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public ITerminalNode KW_NULL() { return GetToken(SkellParser.KW_NULL, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 58, RULE_value);
		try {
			State = 320;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 314; @object();
				}
				break;
			case LSQR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 315; array();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 316; Match(STRING);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 317; Match(NUMBER);
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 318; @bool();
				}
				break;
			case KW_NULL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 319; Match(KW_NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode KW_TRUE() { return GetToken(SkellParser.KW_TRUE, 0); }
		public ITerminalNode KW_FALSE() { return GetToken(SkellParser.KW_FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 60, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_TRUE || _la==KW_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode LSQR() { return GetToken(SkellParser.LSQR, 0); }
		public ITerminalNode RSQR() { return GetToken(SkellParser.RSQR, 0); }
		public ITerminalNode[] EOL() { return GetTokens(SkellParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(SkellParser.EOL, i);
		}
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode[] SYM_COMMA() { return GetTokens(SkellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(SkellParser.SYM_COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 62, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324; Match(LSQR);
			State = 326;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 325; Match(EOL);
				}
			}

			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_TRUE) | (1L << KW_FALSE) | (1L << KW_NULL) | (1L << LSQR) | (1L << LCURL) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				State = 328; term(0);
				State = 336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 329; Match(SYM_COMMA);
					State = 331;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==EOL) {
						{
						State = 330; Match(EOL);
						}
					}

					State = 333; term(0);
					}
					}
					State = 338;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 341; Match(RSQR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(SkellParser.STRING, 0); }
		public ITerminalNode SYM_COLON() { return GetToken(SkellParser.SYM_COLON, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 64, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(STRING);
			State = 344; Match(SYM_COLON);
			State = 345; term(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ITerminalNode LCURL() { return GetToken(SkellParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SkellParser.RCURL, 0); }
		public ITerminalNode[] EOL() { return GetTokens(SkellParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(SkellParser.EOL, i);
		}
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ITerminalNode[] SYM_COMMA() { return GetTokens(SkellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(SkellParser.SYM_COMMA, i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 66, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(LCURL);
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 348; Match(EOL);
				}
			}

			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 351; pair();
				State = 359;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 352; Match(SYM_COMMA);
					State = 354;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==EOL) {
						{
						State = 353; Match(EOL);
						}
					}

					State = 356; pair();
					}
					}
					State = 361;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 364; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public UsableTypeSpecifierContext usableTypeSpecifier() {
			return GetRuleContext<UsableTypeSpecifierContext>(0);
		}
		public ITerminalNode TYPE_ANY() { return GetToken(SkellParser.TYPE_ANY, 0); }
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 68, RULE_typeSpecifier);
		try {
			State = 368;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_OBJECT:
			case TYPE_ARRAY:
			case TYPE_NUMBER:
			case TYPE_STRING:
			case TYPE_BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 366; usableTypeSpecifier();
				}
				break;
			case TYPE_ANY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 367; Match(TYPE_ANY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsableTypeSpecifierContext : ParserRuleContext {
		public ITerminalNode TYPE_OBJECT() { return GetToken(SkellParser.TYPE_OBJECT, 0); }
		public ITerminalNode TYPE_ARRAY() { return GetToken(SkellParser.TYPE_ARRAY, 0); }
		public ITerminalNode TYPE_NUMBER() { return GetToken(SkellParser.TYPE_NUMBER, 0); }
		public ITerminalNode TYPE_STRING() { return GetToken(SkellParser.TYPE_STRING, 0); }
		public ITerminalNode TYPE_BOOL() { return GetToken(SkellParser.TYPE_BOOL, 0); }
		public UsableTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usableTypeSpecifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsableTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsableTypeSpecifierContext usableTypeSpecifier() {
		UsableTypeSpecifierContext _localctx = new UsableTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_usableTypeSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE_OBJECT) | (1L << TYPE_ARRAY) | (1L << TYPE_NUMBER) | (1L << TYPE_STRING) | (1L << TYPE_BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 27: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x42', '\x177', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x3', '\x2', 
		'\x6', '\x2', 'L', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 'M', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'T', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\x64', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', 'j', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'p', '\n', '\x6', '\x3', '\x6', 
		'\a', '\x6', 's', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'v', '\v', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\x84', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\x8A', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\a', '\t', '\x8E', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'\x91', '\v', '\t', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x95', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '\x98', '\v', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\a', '\v', '\xA2', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'\xA5', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\xAA', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\a', '\f', '\xB1', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'\xB4', '\v', '\f', '\x5', '\f', '\xB6', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xC1', '\n', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\xC5', '\n', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xD0', '\n', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xDA', 
		'\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\xDF', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\xE2', '\n', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xE7', '\n', 
		'\x15', '\f', '\x15', '\xE', '\x15', '\xEA', '\v', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\a', '\x15', '\xEE', '\n', '\x15', '\f', '\x15', '\xE', 
		'\x15', '\xF1', '\v', '\x15', '\x5', '\x15', '\xF3', '\n', '\x15', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xF8', '\n', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\xFD', '\n', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x102', 
		'\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x105', '\v', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x10A', '\n', '\x19', 
		'\f', '\x19', '\xE', '\x19', '\x10D', '\v', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x112', '\n', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', 
		'\x119', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x11D', 
		'\n', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x120', '\n', '\x1C', '\f', 
		'\x1C', '\xE', '\x1C', '\x123', '\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x129', '\n', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', 
		'\x1D', '\x130', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x133', '\v', 
		'\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x6', '\x1E', '\x137', '\n', '\x1E', 
		'\r', '\x1E', '\xE', '\x1E', '\x138', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x5', '\x1F', '\x143', '\n', '\x1F', '\x3', ' ', '\x3', ' ', 
		'\x3', '!', '\x3', '!', '\x5', '!', '\x149', '\n', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x5', '!', '\x14E', '\n', '!', '\x3', '!', '\a', '!', 
		'\x151', '\n', '!', '\f', '!', '\xE', '!', '\x154', '\v', '!', '\x5', 
		'!', '\x156', '\n', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x5', '#', '\x160', 
		'\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x165', '\n', 
		'#', '\x3', '#', '\a', '#', '\x168', '\n', '#', '\f', '#', '\xE', '#', 
		'\x16B', '\v', '#', '\x5', '#', '\x16D', '\n', '#', '\x3', '#', '\x3', 
		'#', '\x3', '$', '\x3', '$', '\x5', '$', '\x173', '\n', '$', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x2', '\x3', '\x38', '&', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'\x2', '\n', '\x3', '\x2', '\x3', '\x3', '\x3', '\x2', '&', '\'', '\x3', 
		'\x2', '(', '+', '\x3', '\x2', '/', '\x30', '\x3', '\x2', '\x31', '\x33', 
		'\x4', '\x2', ',', ',', '\x30', '\x30', '\x3', '\x2', '\x5', '\x6', '\x3', 
		'\x2', '\x14', '\x18', '\x2', '\x18A', '\x2', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x4', 'S', '\x3', '\x2', '\x2', '\x2', '\x6', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x65', '\x3', '\x2', '\x2', '\x2', '\n', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x83', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x10', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x92', '\x3', '\x2', '\x2', '\x2', '\x14', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xC0', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xC4', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xCB', '\x3', '\x2', '\x2', '\x2', '\"', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xD7', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '(', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xF4', '\x3', '\x2', '\x2', '\x2', ',', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '.', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x30', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x118', '\x3', '\x2', '\x2', '\x2', '\x36', '\x11C', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x128', '\x3', '\x2', '\x2', '\x2', ':', '\x136', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x142', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x144', '\x3', '\x2', '\x2', '\x2', '@', '\x146', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x159', '\x3', '\x2', '\x2', '\x2', '\x44', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x172', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x174', '\x3', '\x2', '\x2', '\x2', 'J', 'L', '\x5', '\x4', '\x3', 
		'\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'N', '\x3', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x5', '\n', 
		'\x6', '\x2', 'P', 'Q', '\a', '\x3', '\x2', '\x2', 'Q', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'T', '\x5', '\x6', '\x4', '\x2', 'S', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 'T', '\x5', '\x3', 
		'\x2', '\x2', '\x2', 'U', '\x64', '\a', '\x3', '\x2', '\x2', 'V', 'W', 
		'\x5', '\b', '\x5', '\x2', 'W', 'X', '\a', '\x3', '\x2', '\x2', 'X', '\x64', 
		'\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x5', '\x10', '\t', '\x2', 'Z', 
		'[', '\a', '\x3', '\x2', '\x2', '[', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\\', ']', '\x5', '\x14', '\v', '\x2', ']', '^', '\a', '\x3', '\x2', '\x2', 
		'^', '\x64', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x5', '&', '\x14', 
		'\x2', '`', '\x61', '\a', '\x3', '\x2', '\x2', '\x61', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x64', '\x5', '\x1A', '\xE', '\x2', '\x63', 
		'U', '\x3', '\x2', '\x2', '\x2', '\x63', 'V', '\x3', '\x2', '\x2', '\x2', 
		'\x63', 'Y', '\x3', '\x2', '\x2', '\x2', '\x63', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '_', '\x3', '\x2', '\x2', '\x2', '\x63', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\a', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x66', '\a', '\x12', '\x2', '\x2', '\x66', 'i', '\a', '\x35', '\x2', 
		'\x2', 'g', 'h', '\a', '\x13', '\x2', '\x2', 'h', 'j', '\a', '\x34', '\x2', 
		'\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'j', '\t', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', '\x11', 
		'\x2', '\x2', 'l', 'm', '\a', '\x34', '\x2', '\x2', 'm', 'o', '\a', '\x1C', 
		'\x2', '\x2', 'n', 'p', '\a', '\x3', '\x2', '\x2', 'o', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 't', '\x3', '\x2', 
		'\x2', '\x2', 'q', 's', '\x5', '\f', '\a', '\x2', 'r', 'q', '\x3', '\x2', 
		'\x2', '\x2', 's', 'v', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', 
		'\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', '\x1D', 
		'\x2', '\x2', 'x', '\v', '\x3', '\x2', '\x2', '\x2', 'y', '\x84', '\a', 
		'\x3', '\x2', '\x2', 'z', '{', '\x5', '\xE', '\b', '\x2', '{', '|', '\a', 
		'\x3', '\x2', '\x2', '|', '\x84', '\x3', '\x2', '\x2', '\x2', '}', '~', 
		'\x5', '\n', '\x6', '\x2', '~', '\x7F', '\a', '\x3', '\x2', '\x2', '\x7F', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x5', '\b', '\x5', 
		'\x2', '\x81', '\x82', '\a', '\x3', '\x2', '\x2', '\x82', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x83', 'y', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'z', '\x3', '\x2', '\x2', '\x2', '\x83', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x80', '\x3', '\x2', '\x2', '\x2', '\x84', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x86', '\a', '\x34', '\x2', '\x2', '\x86', '\x89', 
		'\a', '%', '\x2', '\x2', '\x87', '\x8A', '\x5', '&', '\x14', '\x2', '\x88', 
		'\x8A', '\x5', '\x16', '\f', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x88', '\x3', '\x2', '\x2', '\x2', '\x8A', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x8F', '\a', '$', '\x2', '\x2', '\x8C', 
		'\x8E', '\n', '\x2', '\x2', '\x2', '\x8D', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x91', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x96', '\a', '\x1C', '\x2', '\x2', '\x93', '\x95', '\x5', 
		'\x6', '\x4', '\x2', '\x94', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x96', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', '\x99', 
		'\x9A', '\a', '\x1D', '\x2', '\x2', '\x9A', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x9B', '\x9C', '\a', '\r', '\x2', '\x2', '\x9C', '\xA3', '\a', 
		'\x34', '\x2', '\x2', '\x9D', '\x9E', '\a', '\x1A', '\x2', '\x2', '\x9E', 
		'\x9F', '\x5', '&', '\x14', '\x2', '\x9F', '\xA0', '\a', '\x1B', '\x2', 
		'\x2', '\xA0', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA9', '\a', '%', '\x2', '\x2', '\xA7', 
		'\xAA', '\x5', '&', '\x14', '\x2', '\xA8', '\xAA', '\x5', '\x16', '\f', 
		'\x2', '\xA9', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\x15', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAC', '\a', '\xE', '\x2', '\x2', '\xAC', '\xB5', '\a', '\x1E', '\x2', 
		'\x2', '\xAD', '\xB2', '\x5', '\x18', '\r', '\x2', '\xAE', '\xAF', '\a', 
		'!', '\x2', '\x2', '\xAF', '\xB1', '\x5', '\x18', '\r', '\x2', '\xB0', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x1F', '\x2', '\x2', '\xB8', 
		'\xB9', '\x5', '\x12', '\n', '\x2', '\xB9', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xBB', '\x5', '\x46', '$', '\x2', '\xBB', '\xBC', '\a', 
		'\x34', '\x2', '\x2', '\xBC', '\x19', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xC1', '\x5', '\x1C', '\xF', '\x2', '\xBE', '\xC1', '\x5', '\"', '\x12', 
		'\x2', '\xBF', '\xC1', '\x5', '$', '\x13', '\x2', '\xC0', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC5', '\x5', '\x1E', '\x10', '\x2', '\xC3', '\xC5', '\x5', 
		' ', '\x11', '\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC3', '\x3', '\x2', '\x2', '\x2', '\xC5', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC7', '\a', '\a', '\x2', '\x2', '\xC7', '\xC8', '\x5', 
		'&', '\x14', '\x2', '\xC8', '\xC9', '\a', '\b', '\x2', '\x2', '\xC9', 
		'\xCA', '\x5', '\x12', '\n', '\x2', '\xCA', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xCC', '\x5', '\x1E', '\x10', '\x2', '\xCC', '\xCF', '\a', 
		'\t', '\x2', '\x2', '\xCD', '\xD0', '\x5', '\x12', '\n', '\x2', '\xCE', 
		'\xD0', '\x5', '\x1C', '\xF', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD0', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD2', '\a', '\n', '\x2', '\x2', '\xD2', 
		'\xD3', '\a', '\x34', '\x2', '\x2', '\xD3', '\xD4', '\a', '\v', '\x2', 
		'\x2', '\xD4', '\xD5', '\x5', '&', '\x14', '\x2', '\xD5', '\xD6', '\x5', 
		'\x12', '\n', '\x2', '\xD6', '#', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xD9', '\a', '\f', '\x2', '\x2', '\xD8', '\xDA', '\x5', '&', '\x14', 
		'\x2', '\xD9', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '%', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDE', '\x5', '(', '\x15', '\x2', '\xDC', '\xDD', '\a', '\xF', '\x2', 
		'\x2', '\xDD', '\xDF', '\x5', 'H', '%', '\x2', '\xDE', '\xDC', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE2', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\x5', '\x36', '\x1C', 
		'\x2', '\xE1', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\'', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xF2', '\x5', '*', '\x16', '\x2', '\xE4', '\xE5', '\a', '.', '\x2', '\x2', 
		'\xE5', '\xE7', '\x5', '*', '\x16', '\x2', '\xE6', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE7', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\xE9', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xEC', '\a', '-', '\x2', '\x2', '\xEC', '\xEE', 
		'\x5', '*', '\x16', '\x2', '\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\xF2', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', ')', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF7', 
		'\x5', ',', '\x17', '\x2', '\xF5', '\xF6', '\t', '\x3', '\x2', '\x2', 
		'\xF6', '\xF8', '\x5', ',', '\x17', '\x2', '\xF7', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', '+', 
		'\x3', '\x2', '\x2', '\x2', '\xF9', '\xFC', '\x5', '.', '\x18', '\x2', 
		'\xFA', '\xFB', '\t', '\x4', '\x2', '\x2', '\xFB', '\xFD', '\x5', '.', 
		'\x18', '\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', 
		'\x3', '\x2', '\x2', '\x2', '\xFD', '-', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\x103', '\x5', '\x30', '\x19', '\x2', '\xFF', '\x100', '\t', '\x5', '\x2', 
		'\x2', '\x100', '\x102', '\x5', '\x30', '\x19', '\x2', '\x101', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x101', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '/', '\x3', '\x2', '\x2', '\x2', '\x105', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\x106', '\x10B', '\x5', '\x32', 
		'\x1A', '\x2', '\x107', '\x108', '\t', '\x6', '\x2', '\x2', '\x108', '\x10A', 
		'\x5', '\x32', '\x1A', '\x2', '\x109', '\x107', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x10F', '\t', '\a', '\x2', '\x2', '\x10F', '\x112', '\x5', 
		'\x32', '\x1A', '\x2', '\x110', '\x112', '\x5', '\x34', '\x1B', '\x2', 
		'\x111', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x111', '\x110', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '\x33', '\x3', '\x2', '\x2', '\x2', '\x113', 
		'\x119', '\x5', '\x38', '\x1D', '\x2', '\x114', '\x115', '\a', '\x1E', 
		'\x2', '\x2', '\x115', '\x116', '\x5', '&', '\x14', '\x2', '\x116', '\x117', 
		'\a', '\x1F', '\x2', '\x2', '\x117', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'\x118', '\x113', '\x3', '\x2', '\x2', '\x2', '\x118', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x35', '\x3', '\x2', '\x2', '\x2', '\x11A', 
		'\x11D', '\x5', ':', '\x1E', '\x2', '\x11B', '\x11D', '\a', '\x34', '\x2', 
		'\x2', '\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11B', 
		'\x3', '\x2', '\x2', '\x2', '\x11D', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x11E', '\x120', '\x5', '&', '\x14', '\x2', '\x11F', '\x11E', '\x3', 
		'\x2', '\x2', '\x2', '\x120', '\x123', '\x3', '\x2', '\x2', '\x2', '\x121', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\x3', '\x2', '\x2', 
		'\x2', '\x122', '\x37', '\x3', '\x2', '\x2', '\x2', '\x123', '\x121', 
		'\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\b', '\x1D', '\x1', '\x2', 
		'\x125', '\x129', '\x5', '<', '\x1F', '\x2', '\x126', '\x129', '\a', '\x34', 
		'\x2', '\x2', '\x127', '\x129', '\x5', ':', '\x1E', '\x2', '\x128', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x126', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x127', '\x3', '\x2', '\x2', '\x2', '\x129', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x12B', '\f', '\x3', '\x2', '\x2', '\x12B', 
		'\x12C', '\a', '\x1A', '\x2', '\x2', '\x12C', '\x12D', '\x5', '&', '\x14', 
		'\x2', '\x12D', '\x12E', '\a', '\x1B', '\x2', '\x2', '\x12E', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x133', '\x3', '\x2', '\x2', '\x2', '\x131', '\x12F', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x132', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x133', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\x134', '\x135', '\a', '\x34', '\x2', '\x2', '\x135', '\x137', 
		'\a', ' ', '\x2', '\x2', '\x136', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x137', '\x138', '\x3', '\x2', '\x2', '\x2', '\x138', '\x136', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x139', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\a', '\x34', '\x2', 
		'\x2', '\x13B', ';', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x143', '\x5', 
		'\x44', '#', '\x2', '\x13D', '\x143', '\x5', '@', '!', '\x2', '\x13E', 
		'\x143', '\a', '\x35', '\x2', '\x2', '\x13F', '\x143', '\a', '\x36', '\x2', 
		'\x2', '\x140', '\x143', '\x5', '>', ' ', '\x2', '\x141', '\x143', '\a', 
		'\x10', '\x2', '\x2', '\x142', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x142', 
		'\x13D', '\x3', '\x2', '\x2', '\x2', '\x142', '\x13E', '\x3', '\x2', '\x2', 
		'\x2', '\x142', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x142', '\x140', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x141', '\x3', '\x2', '\x2', '\x2', 
		'\x143', '=', '\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\t', '\b', 
		'\x2', '\x2', '\x145', '?', '\x3', '\x2', '\x2', '\x2', '\x146', '\x148', 
		'\a', '\x1A', '\x2', '\x2', '\x147', '\x149', '\a', '\x3', '\x2', '\x2', 
		'\x148', '\x147', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x155', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x152', '\x5', '\x38', '\x1D', '\x2', '\x14B', '\x14D', '\a', '!', '\x2', 
		'\x2', '\x14C', '\x14E', '\a', '\x3', '\x2', '\x2', '\x14D', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'\x14E', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x151', '\x5', 
		'\x38', '\x1D', '\x2', '\x150', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x154', '\x3', '\x2', '\x2', '\x2', '\x152', '\x150', '\x3', '\x2', '\x2', 
		'\x2', '\x152', '\x153', '\x3', '\x2', '\x2', '\x2', '\x153', '\x156', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '\x152', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x155', '\x156', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x157', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x158', '\a', '\x1B', '\x2', '\x2', '\x158', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x159', '\x15A', '\a', '\x35', '\x2', '\x2', '\x15A', '\x15B', 
		'\a', '#', '\x2', '\x2', '\x15B', '\x15C', '\x5', '\x38', '\x1D', '\x2', 
		'\x15C', '\x43', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15F', '\a', '\x1C', 
		'\x2', '\x2', '\x15E', '\x160', '\a', '\x3', '\x2', '\x2', '\x15F', '\x15E', 
		'\x3', '\x2', '\x2', '\x2', '\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x161', '\x169', '\x5', 
		'\x42', '\"', '\x2', '\x162', '\x164', '\a', '!', '\x2', '\x2', '\x163', 
		'\x165', '\a', '\x3', '\x2', '\x2', '\x164', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x164', '\x165', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', 
		'\x3', '\x2', '\x2', '\x2', '\x166', '\x168', '\x5', '\x42', '\"', '\x2', 
		'\x167', '\x162', '\x3', '\x2', '\x2', '\x2', '\x168', '\x16B', '\x3', 
		'\x2', '\x2', '\x2', '\x169', '\x167', '\x3', '\x2', '\x2', '\x2', '\x169', 
		'\x16A', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16D', '\x3', '\x2', '\x2', 
		'\x2', '\x16B', '\x169', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x161', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x16D', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x16F', '\a', 
		'\x1D', '\x2', '\x2', '\x16F', '\x45', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x173', '\x5', 'H', '%', '\x2', '\x171', '\x173', '\a', '\x19', '\x2', 
		'\x2', '\x172', '\x170', '\x3', '\x2', '\x2', '\x2', '\x172', '\x171', 
		'\x3', '\x2', '\x2', '\x2', '\x173', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x174', '\x175', '\t', '\t', '\x2', '\x2', '\x175', 'I', '\x3', '\x2', 
		'\x2', '\x2', '.', 'M', 'S', '\x63', 'i', 'o', 't', '\x83', '\x89', '\x8F', 
		'\x96', '\xA3', '\xA9', '\xB2', '\xB5', '\xC0', '\xC4', '\xCF', '\xD9', 
		'\xDE', '\xE1', '\xE8', '\xEF', '\xF2', '\xF7', '\xFC', '\x103', '\x10B', 
		'\x111', '\x118', '\x11C', '\x121', '\x128', '\x131', '\x138', '\x142', 
		'\x148', '\x14D', '\x152', '\x155', '\x15F', '\x164', '\x169', '\x16C', 
		'\x172',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Skell.Generated
