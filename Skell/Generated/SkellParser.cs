//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Skell.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Skell.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
public partial class SkellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EOL=1, WS=2, KW_TRUE=3, KW_FALSE=4, KW_IF=5, KW_THEN=6, KW_ELSE=7, KW_FOR=8, 
		KW_IN=9, KW_RETURN=10, KW_LET=11, KW_FUN=12, KW_IS=13, KW_NAMESPACE=14, 
		KW_USING=15, KW_AS=16, TYPE_OBJECT=17, TYPE_ARRAY=18, TYPE_NUMBER=19, 
		TYPE_STRING=20, TYPE_BOOL=21, TYPE_ANY=22, LSQR=23, RSQR=24, LCURL=25, 
		RCURL=26, LPAREN=27, RPAREN=28, SYM_PERIOD=29, SYM_COMMA=30, SYM_QUOTE=31, 
		SYM_COLON=32, SYM_DOLLAR=33, OP_ASSGN=34, OP_EQ=35, OP_NE=36, OP_LT=37, 
		OP_LE=38, OP_GT=39, OP_GE=40, OP_NOT=41, OP_OR=42, OP_AND=43, OP_ADD=44, 
		OP_SUB=45, OP_DIV=46, OP_MUL=47, OP_MOD=48, IDENTIFIER=49, STRING=50, 
		NUMBER=51, NONDIGIT=52, DIGIT=53, NONZERO_DIGIT=54, ZERO=55, SIGN=56, 
		INT=57, FRAC=58, EXP=59, HEX=60, UNICODE=61, ESC=62, SAFECODEPOINT=63;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_namespaceLoad = 2, RULE_namespace = 3, 
		RULE_namespaceStmt = 4, RULE_namespaceDecl = 5, RULE_programExec = 6, 
		RULE_statementBlock = 7, RULE_declaration = 8, RULE_function = 9, RULE_functionArg = 10, 
		RULE_control = 11, RULE_ifControl = 12, RULE_ifThenControl = 13, RULE_ifThenElseControl = 14, 
		RULE_forControl = 15, RULE_returnControl = 16, RULE_expression = 17, RULE_eqExpr = 18, 
		RULE_relExpr = 19, RULE_addExpr = 20, RULE_mulExpr = 21, RULE_unary = 22, 
		RULE_primary = 23, RULE_fnCall = 24, RULE_term = 25, RULE_namespacedIdentifier = 26, 
		RULE_value = 27, RULE_bool = 28, RULE_array = 29, RULE_pair = 30, RULE_object = 31, 
		RULE_typeSpecifier = 32, RULE_usableTypeSpecifier = 33;
	public static readonly string[] ruleNames = {
		"program", "statement", "namespaceLoad", "namespace", "namespaceStmt", 
		"namespaceDecl", "programExec", "statementBlock", "declaration", "function", 
		"functionArg", "control", "ifControl", "ifThenControl", "ifThenElseControl", 
		"forControl", "returnControl", "expression", "eqExpr", "relExpr", "addExpr", 
		"mulExpr", "unary", "primary", "fnCall", "term", "namespacedIdentifier", 
		"value", "bool", "array", "pair", "object", "typeSpecifier", "usableTypeSpecifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\n'", null, "'true'", "'false'", "'if'", "'then'", "'else'", "'for'", 
		"'in'", "'return'", "'let'", "'fun'", "'is'", "'namespace'", "'using'", 
		"'as'", "'object'", "'array'", "'number'", "'string'", "'bool'", "'any'", 
		"'['", "']'", "'{'", "'}'", "'('", "')'", "'.'", "','", "'\"'", "':'", 
		"'$'", "'='", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'!'", "'|'", 
		"'&'", "'+'", "'-'", "'/'", "'*'", "'%'", null, null, null, null, null, 
		null, "'0'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EOL", "WS", "KW_TRUE", "KW_FALSE", "KW_IF", "KW_THEN", "KW_ELSE", 
		"KW_FOR", "KW_IN", "KW_RETURN", "KW_LET", "KW_FUN", "KW_IS", "KW_NAMESPACE", 
		"KW_USING", "KW_AS", "TYPE_OBJECT", "TYPE_ARRAY", "TYPE_NUMBER", "TYPE_STRING", 
		"TYPE_BOOL", "TYPE_ANY", "LSQR", "RSQR", "LCURL", "RCURL", "LPAREN", "RPAREN", 
		"SYM_PERIOD", "SYM_COMMA", "SYM_QUOTE", "SYM_COLON", "SYM_DOLLAR", "OP_ASSGN", 
		"OP_EQ", "OP_NE", "OP_LT", "OP_LE", "OP_GT", "OP_GE", "OP_NOT", "OP_OR", 
		"OP_AND", "OP_ADD", "OP_SUB", "OP_DIV", "OP_MUL", "OP_MOD", "IDENTIFIER", 
		"STRING", "NUMBER", "NONDIGIT", "DIGIT", "NONZERO_DIGIT", "ZERO", "SIGN", 
		"INT", "FRAC", "EXP", "HEX", "UNICODE", "ESC", "SAFECODEPOINT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Skell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SkellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SkellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SkellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 68; statement();
				}
				}
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOL) | (1L << KW_TRUE) | (1L << KW_FALSE) | (1L << KW_IF) | (1L << KW_FOR) | (1L << KW_RETURN) | (1L << KW_LET) | (1L << KW_NAMESPACE) | (1L << KW_USING) | (1L << LSQR) | (1L << LCURL) | (1L << LPAREN) | (1L << SYM_DOLLAR) | (1L << OP_NOT) | (1L << OP_SUB) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode EOL() { return GetToken(SkellParser.EOL, 0); }
		public NamespaceLoadContext namespaceLoad() {
			return GetRuleContext<NamespaceLoadContext>(0);
		}
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public ProgramExecContext programExec() {
			return GetRuleContext<ProgramExecContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ControlContext control() {
			return GetRuleContext<ControlContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 73; Match(EOL);
				}
				break;
			case KW_USING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74; namespaceLoad();
				State = 75; Match(EOL);
				}
				break;
			case KW_NAMESPACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 77; @namespace();
				State = 78; Match(EOL);
				}
				break;
			case SYM_DOLLAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 80; programExec();
				State = 81; Match(EOL);
				}
				break;
			case KW_LET:
				EnterOuterAlt(_localctx, 5);
				{
				State = 83; declaration();
				State = 84; Match(EOL);
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case LSQR:
			case LCURL:
			case LPAREN:
			case OP_NOT:
			case OP_SUB:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 6);
				{
				State = 86; expression();
				State = 87; Match(EOL);
				}
				break;
			case KW_IF:
			case KW_FOR:
			case KW_RETURN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 89; control();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceLoadContext : ParserRuleContext {
		public ITerminalNode KW_USING() { return GetToken(SkellParser.KW_USING, 0); }
		public ITerminalNode STRING() { return GetToken(SkellParser.STRING, 0); }
		public ITerminalNode KW_AS() { return GetToken(SkellParser.KW_AS, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public NamespaceLoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceLoad; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceLoad(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceLoadContext namespaceLoad() {
		NamespaceLoadContext _localctx = new NamespaceLoadContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespaceLoad);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(KW_USING);
			State = 93; Match(STRING);
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_AS) {
				{
				State = 94; Match(KW_AS);
				State = 95; Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public ITerminalNode KW_NAMESPACE() { return GetToken(SkellParser.KW_NAMESPACE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public ITerminalNode LCURL() { return GetToken(SkellParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SkellParser.RCURL, 0); }
		public ITerminalNode EOL() { return GetToken(SkellParser.EOL, 0); }
		public NamespaceStmtContext[] namespaceStmt() {
			return GetRuleContexts<NamespaceStmtContext>();
		}
		public NamespaceStmtContext namespaceStmt(int i) {
			return GetRuleContext<NamespaceStmtContext>(i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(KW_NAMESPACE);
			State = 99; Match(IDENTIFIER);
			State = 100; Match(LCURL);
			State = 102;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 101; Match(EOL);
				}
				break;
			}
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOL) | (1L << KW_NAMESPACE) | (1L << KW_USING) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 104; namespaceStmt();
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 110; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceStmtContext : ParserRuleContext {
		public ITerminalNode EOL() { return GetToken(SkellParser.EOL, 0); }
		public NamespaceDeclContext namespaceDecl() {
			return GetRuleContext<NamespaceDeclContext>(0);
		}
		public NamespaceContext @namespace() {
			return GetRuleContext<NamespaceContext>(0);
		}
		public NamespaceLoadContext namespaceLoad() {
			return GetRuleContext<NamespaceLoadContext>(0);
		}
		public NamespaceStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceStmt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceStmtContext namespaceStmt() {
		NamespaceStmtContext _localctx = new NamespaceStmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_namespaceStmt);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 112; Match(EOL);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 113; namespaceDecl();
				State = 114; Match(EOL);
				}
				break;
			case KW_NAMESPACE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 116; @namespace();
				State = 117; Match(EOL);
				}
				break;
			case KW_USING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 119; namespaceLoad();
				State = 120; Match(EOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public ITerminalNode OP_ASSGN() { return GetToken(SkellParser.OP_ASSGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public NamespaceDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDecl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespaceDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclContext namespaceDecl() {
		NamespaceDeclContext _localctx = new NamespaceDeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_namespaceDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(IDENTIFIER);
			State = 125; Match(OP_ASSGN);
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case LSQR:
			case LCURL:
			case LPAREN:
			case OP_NOT:
			case OP_SUB:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				{
				State = 126; expression();
				}
				break;
			case KW_FUN:
				{
				State = 127; function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramExecContext : ParserRuleContext {
		public ITerminalNode SYM_DOLLAR() { return GetToken(SkellParser.SYM_DOLLAR, 0); }
		public ITerminalNode[] EOL() { return GetTokens(SkellParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(SkellParser.EOL, i);
		}
		public ProgramExecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programExec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramExec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramExecContext programExec() {
		ProgramExecContext _localctx = new ProgramExecContext(Context, State);
		EnterRule(_localctx, 12, RULE_programExec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(SYM_DOLLAR);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WS) | (1L << KW_TRUE) | (1L << KW_FALSE) | (1L << KW_IF) | (1L << KW_THEN) | (1L << KW_ELSE) | (1L << KW_FOR) | (1L << KW_IN) | (1L << KW_RETURN) | (1L << KW_LET) | (1L << KW_FUN) | (1L << KW_IS) | (1L << KW_NAMESPACE) | (1L << KW_USING) | (1L << KW_AS) | (1L << TYPE_OBJECT) | (1L << TYPE_ARRAY) | (1L << TYPE_NUMBER) | (1L << TYPE_STRING) | (1L << TYPE_BOOL) | (1L << TYPE_ANY) | (1L << LSQR) | (1L << RSQR) | (1L << LCURL) | (1L << RCURL) | (1L << LPAREN) | (1L << RPAREN) | (1L << SYM_PERIOD) | (1L << SYM_COMMA) | (1L << SYM_QUOTE) | (1L << SYM_COLON) | (1L << SYM_DOLLAR) | (1L << OP_ASSGN) | (1L << OP_EQ) | (1L << OP_NE) | (1L << OP_LT) | (1L << OP_LE) | (1L << OP_GT) | (1L << OP_GE) | (1L << OP_NOT) | (1L << OP_OR) | (1L << OP_AND) | (1L << OP_ADD) | (1L << OP_SUB) | (1L << OP_DIV) | (1L << OP_MUL) | (1L << OP_MOD) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER) | (1L << NONDIGIT) | (1L << DIGIT) | (1L << NONZERO_DIGIT) | (1L << ZERO) | (1L << SIGN) | (1L << INT) | (1L << FRAC) | (1L << EXP) | (1L << HEX) | (1L << UNICODE) | (1L << ESC) | (1L << SAFECODEPOINT))) != 0)) {
				{
				{
				State = 131;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==EOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		public ITerminalNode LCURL() { return GetToken(SkellParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SkellParser.RCURL, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(LCURL);
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOL) | (1L << KW_TRUE) | (1L << KW_FALSE) | (1L << KW_IF) | (1L << KW_FOR) | (1L << KW_RETURN) | (1L << KW_LET) | (1L << KW_NAMESPACE) | (1L << KW_USING) | (1L << LSQR) | (1L << LCURL) | (1L << LPAREN) | (1L << SYM_DOLLAR) | (1L << OP_NOT) | (1L << OP_SUB) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				{
				State = 138; statement();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 144; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode KW_LET() { return GetToken(SkellParser.KW_LET, 0); }
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ITerminalNode OP_ASSGN() { return GetToken(SkellParser.OP_ASSGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(KW_LET);
			State = 147; primary(0);
			State = 148; Match(OP_ASSGN);
			State = 151;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case LSQR:
			case LCURL:
			case LPAREN:
			case OP_NOT:
			case OP_SUB:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				{
				State = 149; expression();
				}
				break;
			case KW_FUN:
				{
				State = 150; function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode KW_FUN() { return GetToken(SkellParser.KW_FUN, 0); }
		public ITerminalNode LPAREN() { return GetToken(SkellParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(SkellParser.RPAREN, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public ITerminalNode[] SYM_COMMA() { return GetTokens(SkellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(SkellParser.SYM_COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 18, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; Match(KW_FUN);
			State = 154; Match(LPAREN);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE_OBJECT) | (1L << TYPE_ARRAY) | (1L << TYPE_NUMBER) | (1L << TYPE_STRING) | (1L << TYPE_BOOL) | (1L << TYPE_ANY))) != 0)) {
				{
				State = 155; functionArg();
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 156; Match(SYM_COMMA);
					State = 157; functionArg();
					}
					}
					State = 162;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 165; Match(RPAREN);
			State = 166; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 20, RULE_functionArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; typeSpecifier();
			State = 169; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlContext : ParserRuleContext {
		public IfControlContext ifControl() {
			return GetRuleContext<IfControlContext>(0);
		}
		public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		public ReturnControlContext returnControl() {
			return GetRuleContext<ReturnControlContext>(0);
		}
		public ControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlContext control() {
		ControlContext _localctx = new ControlContext(Context, State);
		EnterRule(_localctx, 22, RULE_control);
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 171; ifControl();
				}
				break;
			case KW_FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 172; forControl();
				}
				break;
			case KW_RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 173; returnControl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfControlContext : ParserRuleContext {
		public IfThenControlContext ifThenControl() {
			return GetRuleContext<IfThenControlContext>(0);
		}
		public IfThenElseControlContext ifThenElseControl() {
			return GetRuleContext<IfThenElseControlContext>(0);
		}
		public IfControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfControlContext ifControl() {
		IfControlContext _localctx = new IfControlContext(Context, State);
		EnterRule(_localctx, 24, RULE_ifControl);
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; ifThenControl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177; ifThenElseControl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenControlContext : ParserRuleContext {
		public ITerminalNode KW_IF() { return GetToken(SkellParser.KW_IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode KW_THEN() { return GetToken(SkellParser.KW_THEN, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public IfThenControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenControlContext ifThenControl() {
		IfThenControlContext _localctx = new IfThenControlContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifThenControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(KW_IF);
			State = 181; expression();
			State = 182; Match(KW_THEN);
			State = 183; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseControlContext : ParserRuleContext {
		public IfThenControlContext ifThenControl() {
			return GetRuleContext<IfThenControlContext>(0);
		}
		public ITerminalNode KW_ELSE() { return GetToken(SkellParser.KW_ELSE, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public IfControlContext ifControl() {
			return GetRuleContext<IfControlContext>(0);
		}
		public IfThenElseControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseControlContext ifThenElseControl() {
		IfThenElseControlContext _localctx = new IfThenElseControlContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifThenElseControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; ifThenControl();
			State = 186; Match(KW_ELSE);
			State = 189;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURL:
				{
				State = 187; statementBlock();
				}
				break;
			case KW_IF:
				{
				State = 188; ifControl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public ITerminalNode KW_FOR() { return GetToken(SkellParser.KW_FOR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public ITerminalNode KW_IN() { return GetToken(SkellParser.KW_IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 30, RULE_forControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(KW_FOR);
			State = 192; Match(IDENTIFIER);
			State = 193; Match(KW_IN);
			State = 194; expression();
			State = 195; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnControlContext : ParserRuleContext {
		public ITerminalNode KW_RETURN() { return GetToken(SkellParser.KW_RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnControlContext returnControl() {
		ReturnControlContext _localctx = new ReturnControlContext(Context, State);
		EnterRule(_localctx, 32, RULE_returnControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(KW_RETURN);
			State = 199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 198; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public EqExprContext eqExpr() {
			return GetRuleContext<EqExprContext>(0);
		}
		public ITerminalNode KW_IS() { return GetToken(SkellParser.KW_IS, 0); }
		public UsableTypeSpecifierContext usableTypeSpecifier() {
			return GetRuleContext<UsableTypeSpecifierContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; eqExpr();
			State = 204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 202; Match(KW_IS);
				State = 203; usableTypeSpecifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqExprContext : ParserRuleContext {
		public RelExprContext[] relExpr() {
			return GetRuleContexts<RelExprContext>();
		}
		public RelExprContext relExpr(int i) {
			return GetRuleContext<RelExprContext>(i);
		}
		public ITerminalNode OP_NE() { return GetToken(SkellParser.OP_NE, 0); }
		public ITerminalNode OP_EQ() { return GetToken(SkellParser.OP_EQ, 0); }
		public EqExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eqExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqExprContext eqExpr() {
		EqExprContext _localctx = new EqExprContext(Context, State);
		EnterRule(_localctx, 36, RULE_eqExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; relExpr();
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 207;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_EQ || _la==OP_NE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 208; relExpr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelExprContext : ParserRuleContext {
		public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		public ITerminalNode OP_GT() { return GetToken(SkellParser.OP_GT, 0); }
		public ITerminalNode OP_GE() { return GetToken(SkellParser.OP_GE, 0); }
		public ITerminalNode OP_LT() { return GetToken(SkellParser.OP_LT, 0); }
		public ITerminalNode OP_LE() { return GetToken(SkellParser.OP_LE, 0); }
		public RelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelExprContext relExpr() {
		RelExprContext _localctx = new RelExprContext(Context, State);
		EnterRule(_localctx, 38, RULE_relExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; addExpr();
			State = 214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 212;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_LT) | (1L << OP_LE) | (1L << OP_GT) | (1L << OP_GE))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 213; addExpr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		public MulExprContext[] mulExpr() {
			return GetRuleContexts<MulExprContext>();
		}
		public MulExprContext mulExpr(int i) {
			return GetRuleContext<MulExprContext>(i);
		}
		public ITerminalNode[] OP_SUB() { return GetTokens(SkellParser.OP_SUB); }
		public ITerminalNode OP_SUB(int i) {
			return GetToken(SkellParser.OP_SUB, i);
		}
		public ITerminalNode[] OP_ADD() { return GetTokens(SkellParser.OP_ADD); }
		public ITerminalNode OP_ADD(int i) {
			return GetToken(SkellParser.OP_ADD, i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(Context, State);
		EnterRule(_localctx, 40, RULE_addExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; mulExpr();
			State = 221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 217;
					_la = TokenStream.LA(1);
					if ( !(_la==OP_ADD || _la==OP_SUB) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 218; mulExpr();
					}
					} 
				}
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulExprContext : ParserRuleContext {
		public UnaryContext[] unary() {
			return GetRuleContexts<UnaryContext>();
		}
		public UnaryContext unary(int i) {
			return GetRuleContext<UnaryContext>(i);
		}
		public ITerminalNode[] OP_DIV() { return GetTokens(SkellParser.OP_DIV); }
		public ITerminalNode OP_DIV(int i) {
			return GetToken(SkellParser.OP_DIV, i);
		}
		public ITerminalNode[] OP_MUL() { return GetTokens(SkellParser.OP_MUL); }
		public ITerminalNode OP_MUL(int i) {
			return GetToken(SkellParser.OP_MUL, i);
		}
		public MulExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulExprContext mulExpr() {
		MulExprContext _localctx = new MulExprContext(Context, State);
		EnterRule(_localctx, 42, RULE_mulExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; unary();
			State = 229;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 225;
					_la = TokenStream.LA(1);
					if ( !(_la==OP_DIV || _la==OP_MUL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 226; unary();
					}
					} 
				}
				State = 231;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		public ITerminalNode OP_NOT() { return GetToken(SkellParser.OP_NOT, 0); }
		public ITerminalNode OP_SUB() { return GetToken(SkellParser.OP_SUB, 0); }
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 44, RULE_unary);
		int _la;
		try {
			State = 235;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP_NOT:
			case OP_SUB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_NOT || _la==OP_SUB) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 233; unary();
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case LSQR:
			case LCURL:
			case LPAREN:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 234; primary(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public FnCallContext fnCall() {
			return GetRuleContext<FnCallContext>(0);
		}
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(SkellParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(SkellParser.RPAREN, 0); }
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ITerminalNode LSQR() { return GetToken(SkellParser.LSQR, 0); }
		public ITerminalNode RSQR() { return GetToken(SkellParser.RSQR, 0); }
		public ITerminalNode STRING() { return GetToken(SkellParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(SkellParser.NUMBER, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		return primary(0);
	}

	private PrimaryContext primary(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryContext _localctx = new PrimaryContext(Context, _parentState);
		PrimaryContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_primary, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 238; fnCall();
				}
				break;
			case 2:
				{
				State = 239; term();
				}
				break;
			case 3:
				{
				State = 240; Match(LPAREN);
				State = 241; expression();
				State = 242; Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 252;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PrimaryContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_primary);
					State = 246;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 247; Match(LSQR);
					State = 248;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 249; Match(RSQR);
					}
					} 
				}
				State = 254;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FnCallContext : ParserRuleContext {
		public NamespacedIdentifierContext namespacedIdentifier() {
			return GetRuleContext<NamespacedIdentifierContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FnCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnCallContext fnCall() {
		FnCallContext _localctx = new FnCallContext(Context, State);
		EnterRule(_localctx, 48, RULE_fnCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 255; namespacedIdentifier();
				}
				break;
			case 2:
				{
				State = 256; Match(IDENTIFIER);
				}
				break;
			}
			State = 260;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 259; expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 262;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public NamespacedIdentifierContext namespacedIdentifier() {
			return GetRuleContext<NamespacedIdentifierContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 50, RULE_term);
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 264; value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 265; Match(IDENTIFIER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 266; namespacedIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacedIdentifierContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(SkellParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(SkellParser.IDENTIFIER, i);
		}
		public ITerminalNode[] SYM_PERIOD() { return GetTokens(SkellParser.SYM_PERIOD); }
		public ITerminalNode SYM_PERIOD(int i) {
			return GetToken(SkellParser.SYM_PERIOD, i);
		}
		public NamespacedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacedIdentifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespacedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespacedIdentifierContext namespacedIdentifier() {
		NamespacedIdentifierContext _localctx = new NamespacedIdentifierContext(Context, State);
		EnterRule(_localctx, 52, RULE_namespacedIdentifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 269; Match(IDENTIFIER);
					State = 270; Match(SYM_PERIOD);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 273;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 275; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(SkellParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(SkellParser.NUMBER, 0); }
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 54, RULE_value);
		try {
			State = 282;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 277; @object();
				}
				break;
			case LSQR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 278; array();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 279; Match(STRING);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 280; Match(NUMBER);
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 281; @bool();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode KW_TRUE() { return GetToken(SkellParser.KW_TRUE, 0); }
		public ITerminalNode KW_FALSE() { return GetToken(SkellParser.KW_FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 56, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_TRUE || _la==KW_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode LSQR() { return GetToken(SkellParser.LSQR, 0); }
		public ITerminalNode RSQR() { return GetToken(SkellParser.RSQR, 0); }
		public ITerminalNode[] EOL() { return GetTokens(SkellParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(SkellParser.EOL, i);
		}
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode[] SYM_COMMA() { return GetTokens(SkellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(SkellParser.SYM_COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 58, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; Match(LSQR);
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 287; Match(EOL);
				}
			}

			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_TRUE) | (1L << KW_FALSE) | (1L << LSQR) | (1L << LCURL) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				State = 290; term();
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 291; Match(SYM_COMMA);
					State = 293;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==EOL) {
						{
						State = 292; Match(EOL);
						}
					}

					State = 295; term();
					}
					}
					State = 300;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 303; Match(RSQR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(SkellParser.STRING, 0); }
		public ITerminalNode SYM_COLON() { return GetToken(SkellParser.SYM_COLON, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 60, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305; Match(STRING);
			State = 306; Match(SYM_COLON);
			State = 307; term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ITerminalNode LCURL() { return GetToken(SkellParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SkellParser.RCURL, 0); }
		public ITerminalNode[] EOL() { return GetTokens(SkellParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(SkellParser.EOL, i);
		}
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ITerminalNode[] SYM_COMMA() { return GetTokens(SkellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(SkellParser.SYM_COMMA, i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 62, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; Match(LCURL);
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 310; Match(EOL);
				}
			}

			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 313; pair();
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 314; Match(SYM_COMMA);
					State = 316;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==EOL) {
						{
						State = 315; Match(EOL);
						}
					}

					State = 318; pair();
					}
					}
					State = 323;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 326; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public UsableTypeSpecifierContext usableTypeSpecifier() {
			return GetRuleContext<UsableTypeSpecifierContext>(0);
		}
		public ITerminalNode TYPE_ANY() { return GetToken(SkellParser.TYPE_ANY, 0); }
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext typeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_typeSpecifier);
		try {
			State = 330;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE_OBJECT:
			case TYPE_ARRAY:
			case TYPE_NUMBER:
			case TYPE_STRING:
			case TYPE_BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328; usableTypeSpecifier();
				}
				break;
			case TYPE_ANY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 329; Match(TYPE_ANY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsableTypeSpecifierContext : ParserRuleContext {
		public ITerminalNode TYPE_OBJECT() { return GetToken(SkellParser.TYPE_OBJECT, 0); }
		public ITerminalNode TYPE_ARRAY() { return GetToken(SkellParser.TYPE_ARRAY, 0); }
		public ITerminalNode TYPE_NUMBER() { return GetToken(SkellParser.TYPE_NUMBER, 0); }
		public ITerminalNode TYPE_STRING() { return GetToken(SkellParser.TYPE_STRING, 0); }
		public ITerminalNode TYPE_BOOL() { return GetToken(SkellParser.TYPE_BOOL, 0); }
		public UsableTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usableTypeSpecifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsableTypeSpecifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsableTypeSpecifierContext usableTypeSpecifier() {
		UsableTypeSpecifierContext _localctx = new UsableTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 66, RULE_usableTypeSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE_OBJECT) | (1L << TYPE_ARRAY) | (1L << TYPE_NUMBER) | (1L << TYPE_STRING) | (1L << TYPE_BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 23: return primary_sempred((PrimaryContext)_localctx, predIndex);
		}
		return true;
	}
	private bool primary_sempred(PrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x41', '\x151', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x3', '\x2', '\x6', '\x2', 'H', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', 'I', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', ']', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x63', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', 'i', '\n', '\x5', '\x3', '\x5', '\a', '\x5', 'l', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', 'o', '\v', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '}', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\x83', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\a', '\b', '\x87', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'\x8A', '\v', '\b', '\x3', '\t', '\x3', '\t', '\a', '\t', '\x8E', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\x91', '\v', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', '\x9A', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\a', '\v', '\xA1', '\n', '\v', '\f', '\v', 
		'\xE', '\v', '\xA4', '\v', '\v', '\x5', '\v', '\xA6', '\n', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xB1', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xB5', '\n', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xC0', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\xCA', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\xCF', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\xD4', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\xD9', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\a', '\x16', '\xDE', '\n', '\x16', '\f', '\x16', '\xE', 
		'\x16', '\xE1', '\v', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\a', '\x17', '\xE6', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xE9', 
		'\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', 
		'\xEE', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\xF7', 
		'\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\a', '\x19', '\xFD', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x100', 
		'\v', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x104', '\n', 
		'\x1A', '\x3', '\x1A', '\x6', '\x1A', '\x107', '\n', '\x1A', '\r', '\x1A', 
		'\xE', '\x1A', '\x108', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x10E', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x6', '\x1C', 
		'\x112', '\n', '\x1C', '\r', '\x1C', '\xE', '\x1C', '\x113', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x5', '\x1D', '\x11D', '\n', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x123', '\n', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x128', '\n', 
		'\x1F', '\x3', '\x1F', '\a', '\x1F', '\x12B', '\n', '\x1F', '\f', '\x1F', 
		'\xE', '\x1F', '\x12E', '\v', '\x1F', '\x5', '\x1F', '\x130', '\n', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', '!', '\x3', '!', '\x5', '!', '\x13A', '\n', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x5', '!', '\x13F', '\n', '!', '\x3', '!', '\a', 
		'!', '\x142', '\n', '!', '\f', '!', '\xE', '!', '\x145', '\v', '!', '\x5', 
		'!', '\x147', '\n', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', 
		'\x5', '\"', '\x14D', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x2', '\x3', '\x30', '$', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', 
		':', '<', '>', '@', '\x42', '\x44', '\x2', '\v', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x2', '%', '&', '\x3', '\x2', '\'', '*', '\x3', '\x2', 
		'.', '/', '\x3', '\x2', '\x30', '\x31', '\x4', '\x2', '+', '+', '/', '/', 
		'\x3', '\x2', '\x33', '\x35', '\x3', '\x2', '\x5', '\x6', '\x3', '\x2', 
		'\x13', '\x17', '\x2', '\x161', '\x2', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\\', '\x3', '\x2', '\x2', '\x2', '\x6', '^', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x64', '\x3', '\x2', '\x2', '\x2', '\n', '|', '\x3', '\x2', 
		'\x2', '\x2', '\f', '~', '\x3', '\x2', '\x2', '\x2', '\xE', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x14', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\xAA', '\x3', '\x2', '\x2', '\x2', '\x18', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\xB4', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\xC1', '\x3', '\x2', '\x2', '\x2', '\"', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xCB', '\x3', '\x2', '\x2', '\x2', '&', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '(', '\xD5', '\x3', '\x2', '\x2', '\x2', '*', '\xDA', 
		'\x3', '\x2', '\x2', '\x2', ',', '\xE2', '\x3', '\x2', '\x2', '\x2', '.', 
		'\xED', '\x3', '\x2', '\x2', '\x2', '\x30', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x103', '\x3', '\x2', '\x2', '\x2', '\x34', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x111', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', ':', '\x11E', '\x3', '\x2', '\x2', 
		'\x2', '<', '\x120', '\x3', '\x2', '\x2', '\x2', '>', '\x133', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x137', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x14C', '\x3', '\x2', '\x2', '\x2', '\x44', '\x14E', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'H', '\x5', '\x4', '\x3', '\x2', 'G', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', '\x3', '\x3', 
		'\x2', '\x2', '\x2', 'K', ']', '\a', '\x3', '\x2', '\x2', 'L', 'M', '\x5', 
		'\x6', '\x4', '\x2', 'M', 'N', '\a', '\x3', '\x2', '\x2', 'N', ']', '\x3', 
		'\x2', '\x2', '\x2', 'O', 'P', '\x5', '\b', '\x5', '\x2', 'P', 'Q', '\a', 
		'\x3', '\x2', '\x2', 'Q', ']', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x5', 
		'\xE', '\b', '\x2', 'S', 'T', '\a', '\x3', '\x2', '\x2', 'T', ']', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'V', '\x5', '\x12', '\n', '\x2', 'V', 'W', '\a', 
		'\x3', '\x2', '\x2', 'W', ']', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x5', 
		'$', '\x13', '\x2', 'Y', 'Z', '\a', '\x3', '\x2', '\x2', 'Z', ']', '\x3', 
		'\x2', '\x2', '\x2', '[', ']', '\x5', '\x18', '\r', '\x2', '\\', 'K', 
		'\x3', '\x2', '\x2', '\x2', '\\', 'L', '\x3', '\x2', '\x2', '\x2', '\\', 
		'O', '\x3', '\x2', '\x2', '\x2', '\\', 'R', '\x3', '\x2', '\x2', '\x2', 
		'\\', 'U', '\x3', '\x2', '\x2', '\x2', '\\', 'X', '\x3', '\x2', '\x2', 
		'\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', ']', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '^', '_', '\a', '\x11', '\x2', '\x2', '_', '\x62', '\a', 
		'\x34', '\x2', '\x2', '`', '\x61', '\a', '\x12', '\x2', '\x2', '\x61', 
		'\x63', '\a', '\x33', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\a', '\x10', '\x2', '\x2', '\x65', 
		'\x66', '\a', '\x33', '\x2', '\x2', '\x66', 'h', '\a', '\x1B', '\x2', 
		'\x2', 'g', 'i', '\a', '\x3', '\x2', '\x2', 'h', 'g', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'l', '\x5', '\n', '\x6', '\x2', 'k', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'o', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\x1C', '\x2', 
		'\x2', 'q', '\t', '\x3', '\x2', '\x2', '\x2', 'r', '}', '\a', '\x3', '\x2', 
		'\x2', 's', 't', '\x5', '\f', '\a', '\x2', 't', 'u', '\a', '\x3', '\x2', 
		'\x2', 'u', '}', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x5', '\b', '\x5', 
		'\x2', 'w', 'x', '\a', '\x3', '\x2', '\x2', 'x', '}', '\x3', '\x2', '\x2', 
		'\x2', 'y', 'z', '\x5', '\x6', '\x4', '\x2', 'z', '{', '\a', '\x3', '\x2', 
		'\x2', '{', '}', '\x3', '\x2', '\x2', '\x2', '|', 'r', '\x3', '\x2', '\x2', 
		'\x2', '|', 's', '\x3', '\x2', '\x2', '\x2', '|', 'v', '\x3', '\x2', '\x2', 
		'\x2', '|', 'y', '\x3', '\x2', '\x2', '\x2', '}', '\v', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\a', '\x33', '\x2', '\x2', '\x7F', '\x82', 
		'\a', '$', '\x2', '\x2', '\x80', '\x83', '\x5', '$', '\x13', '\x2', '\x81', 
		'\x83', '\x5', '\x14', '\v', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x88', '\a', '#', '\x2', '\x2', '\x85', 
		'\x87', '\n', '\x2', '\x2', '\x2', '\x86', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x88', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8F', '\a', '\x1B', '\x2', '\x2', '\x8C', '\x8E', '\x5', 
		'\x4', '\x3', '\x2', '\x8D', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x93', '\a', '\x1C', '\x2', '\x2', '\x93', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x95', '\a', '\r', '\x2', '\x2', '\x95', '\x96', '\x5', 
		'\x30', '\x19', '\x2', '\x96', '\x99', '\a', '$', '\x2', '\x2', '\x97', 
		'\x9A', '\x5', '$', '\x13', '\x2', '\x98', '\x9A', '\x5', '\x14', '\v', 
		'\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x13', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x9C', '\a', '\xE', '\x2', '\x2', '\x9C', '\xA5', '\a', '\x1D', '\x2', 
		'\x2', '\x9D', '\xA2', '\x5', '\x16', '\f', '\x2', '\x9E', '\x9F', '\a', 
		' ', '\x2', '\x2', '\x9F', '\xA1', '\x5', '\x16', '\f', '\x2', '\xA0', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA5', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', '\x1E', '\x2', '\x2', '\xA8', 
		'\xA9', '\x5', '\x10', '\t', '\x2', '\xA9', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xAB', '\x5', '\x42', '\"', '\x2', '\xAB', '\xAC', '\a', 
		'\x33', '\x2', '\x2', '\xAC', '\x17', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xB1', '\x5', '\x1A', '\xE', '\x2', '\xAE', '\xB1', '\x5', ' ', '\x11', 
		'\x2', '\xAF', '\xB1', '\x5', '\"', '\x12', '\x2', '\xB0', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB5', '\x5', '\x1C', '\xF', '\x2', '\xB3', '\xB5', '\x5', 
		'\x1E', '\x10', '\x2', '\xB4', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\a', '\a', '\x2', '\x2', '\xB7', '\xB8', '\x5', 
		'$', '\x13', '\x2', '\xB8', '\xB9', '\a', '\b', '\x2', '\x2', '\xB9', 
		'\xBA', '\x5', '\x10', '\t', '\x2', '\xBA', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBC', '\x5', '\x1C', '\xF', '\x2', '\xBC', '\xBF', '\a', 
		'\t', '\x2', '\x2', '\xBD', '\xC0', '\x5', '\x10', '\t', '\x2', '\xBE', 
		'\xC0', '\x5', '\x1A', '\xE', '\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', '\n', '\x2', '\x2', '\xC2', 
		'\xC3', '\a', '\x33', '\x2', '\x2', '\xC3', '\xC4', '\a', '\v', '\x2', 
		'\x2', '\xC4', '\xC5', '\x5', '$', '\x13', '\x2', '\xC5', '\xC6', '\x5', 
		'\x10', '\t', '\x2', '\xC6', '!', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC9', '\a', '\f', '\x2', '\x2', '\xC8', '\xCA', '\x5', '$', '\x13', 
		'\x2', '\xC9', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '#', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xCE', '\x5', '&', '\x14', '\x2', '\xCC', '\xCD', '\a', '\xF', '\x2', 
		'\x2', '\xCD', '\xCF', '\x5', '\x44', '#', '\x2', '\xCE', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD3', '\x5', '(', '\x15', '\x2', 
		'\xD1', '\xD2', '\t', '\x3', '\x2', '\x2', '\xD2', '\xD4', '\x5', '(', 
		'\x15', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD8', '\x5', '*', '\x16', '\x2', '\xD6', '\xD7', '\t', '\x4', 
		'\x2', '\x2', '\xD7', '\xD9', '\x5', '*', '\x16', '\x2', '\xD8', '\xD6', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', 
		'\xD9', ')', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDF', '\x5', ',', '\x17', 
		'\x2', '\xDB', '\xDC', '\t', '\x5', '\x2', '\x2', '\xDC', '\xDE', '\x5', 
		',', '\x17', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', 
		'\xE7', '\x5', '.', '\x18', '\x2', '\xE3', '\xE4', '\t', '\x6', '\x2', 
		'\x2', '\xE4', '\xE6', '\x5', '.', '\x18', '\x2', '\xE5', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE5', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '-', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xEB', '\t', '\a', '\x2', '\x2', '\xEB', 
		'\xEE', '\x5', '.', '\x18', '\x2', '\xEC', '\xEE', '\x5', '\x30', '\x19', 
		'\x2', '\xED', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xEE', '/', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xF0', '\b', '\x19', '\x1', '\x2', '\xF0', '\xF7', '\x5', '\x32', '\x1A', 
		'\x2', '\xF1', '\xF7', '\x5', '\x34', '\x1B', '\x2', '\xF2', '\xF3', '\a', 
		'\x1D', '\x2', '\x2', '\xF3', '\xF4', '\x5', '$', '\x13', '\x2', '\xF4', 
		'\xF5', '\a', '\x1E', '\x2', '\x2', '\xF5', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF1', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\f', '\x5', '\x2', 
		'\x2', '\xF9', '\xFA', '\a', '\x19', '\x2', '\x2', '\xFA', '\xFB', '\t', 
		'\b', '\x2', '\x2', '\xFB', '\xFD', '\a', '\x1A', '\x2', '\x2', '\xFC', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xFD', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\xFF', '\x31', '\x3', '\x2', '\x2', '\x2', '\x100', 
		'\xFE', '\x3', '\x2', '\x2', '\x2', '\x101', '\x104', '\x5', '\x36', '\x1C', 
		'\x2', '\x102', '\x104', '\a', '\x33', '\x2', '\x2', '\x103', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x106', '\x3', '\x2', '\x2', '\x2', '\x105', '\x107', '\x5', 
		'$', '\x13', '\x2', '\x106', '\x105', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\x108', '\x3', '\x2', '\x2', '\x2', '\x108', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x109', '\x3', '\x2', '\x2', '\x2', '\x109', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x10A', '\x10E', '\x5', '\x38', '\x1D', '\x2', 
		'\x10B', '\x10E', '\a', '\x33', '\x2', '\x2', '\x10C', '\x10E', '\x5', 
		'\x36', '\x1C', '\x2', '\x10D', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10D', 
		'\x10B', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10C', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x35', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', 
		'\a', '\x33', '\x2', '\x2', '\x110', '\x112', '\a', '\x1F', '\x2', '\x2', 
		'\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', '\x113', 
		'\x114', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\x116', '\a', '\x33', '\x2', '\x2', '\x116', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x117', '\x11D', '\x5', '@', '!', '\x2', 
		'\x118', '\x11D', '\x5', '<', '\x1F', '\x2', '\x119', '\x11D', '\a', '\x34', 
		'\x2', '\x2', '\x11A', '\x11D', '\a', '\x35', '\x2', '\x2', '\x11B', '\x11D', 
		'\x5', ':', '\x1E', '\x2', '\x11C', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x11E', '\x11F', '\t', '\t', '\x2', '\x2', '\x11F', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x120', '\x122', '\a', '\x19', '\x2', '\x2', '\x121', 
		'\x123', '\a', '\x3', '\x2', '\x2', '\x122', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x122', '\x123', '\x3', '\x2', '\x2', '\x2', '\x123', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x124', '\x12C', '\x5', '\x34', '\x1B', '\x2', 
		'\x125', '\x127', '\a', ' ', '\x2', '\x2', '\x126', '\x128', '\a', '\x3', 
		'\x2', '\x2', '\x127', '\x126', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x12B', '\x5', '\x34', '\x1B', '\x2', '\x12A', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x12A', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\x12D', '\x130', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x124', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x130', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x132', '\a', '\x1A', '\x2', '\x2', '\x132', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\a', '\x34', '\x2', 
		'\x2', '\x134', '\x135', '\a', '\"', '\x2', '\x2', '\x135', '\x136', '\x5', 
		'\x34', '\x1B', '\x2', '\x136', '?', '\x3', '\x2', '\x2', '\x2', '\x137', 
		'\x139', '\a', '\x1B', '\x2', '\x2', '\x138', '\x13A', '\a', '\x3', '\x2', 
		'\x2', '\x139', '\x138', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '\x13A', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'\x13B', '\x143', '\x5', '>', ' ', '\x2', '\x13C', '\x13E', '\a', ' ', 
		'\x2', '\x2', '\x13D', '\x13F', '\a', '\x3', '\x2', '\x2', '\x13E', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x13F', '\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '\x142', '\x5', 
		'>', ' ', '\x2', '\x141', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x142', 
		'\x145', '\x3', '\x2', '\x2', '\x2', '\x143', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '\x144', '\x3', '\x2', '\x2', '\x2', '\x144', '\x147', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x147', '\x148', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x149', '\a', '\x1C', '\x2', '\x2', '\x149', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x14D', '\x5', '\x44', '#', '\x2', '\x14B', '\x14D', 
		'\a', '\x18', '\x2', '\x2', '\x14C', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		'\x14C', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x14E', '\x14F', '\t', '\n', '\x2', '\x2', '\x14F', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '(', 'I', '\\', '\x62', 'h', 'm', 
		'|', '\x82', '\x88', '\x8F', '\x99', '\xA2', '\xA5', '\xB0', '\xB4', '\xBF', 
		'\xC9', '\xCE', '\xD3', '\xD8', '\xDF', '\xE7', '\xED', '\xF6', '\xFE', 
		'\x103', '\x108', '\x10D', '\x113', '\x11C', '\x122', '\x127', '\x12C', 
		'\x12F', '\x139', '\x13E', '\x143', '\x146', '\x14C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Skell.Generated
