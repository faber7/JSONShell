//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Skell.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class SkellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, EQ=3, NEQ=4, LT=5, LE=6, GT=7, GE=8, ADD=9, SUB=10, 
		DIV=11, MUL=12, NOT=13, BOOL=14, FALSE=15, TRUE=16, NULL=17, STRING=18, 
		NUMBER=19, INT=20, WS=21;
	public const int
		RULE_expression = 0, RULE_equality = 1, RULE_comparison = 2, RULE_addition = 3, 
		RULE_multiplication = 4, RULE_unary = 5, RULE_primary = 6;
	public static readonly string[] ruleNames = {
		"expression", "equality", "comparison", "addition", "multiplication", 
		"unary", "primary"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'+'", 
		"'-'", "'/'", "'*'", "'!'", null, "'false'", "'true'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "EQ", "NEQ", "LT", "LE", "GT", "GE", "ADD", 
		"SUB", "DIV", "MUL", "NOT", "BOOL", "FALSE", "TRUE", "NULL", "STRING", 
		"NUMBER", "INT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Skell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SkellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SkellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SkellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExpressionContext : ParserRuleContext {
		public EqualityContext equality() {
			return GetRuleContext<EqualityContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; equality();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityContext : ParserRuleContext {
		public ComparisonContext[] comparison() {
			return GetRuleContexts<ComparisonContext>();
		}
		public ComparisonContext comparison(int i) {
			return GetRuleContext<ComparisonContext>(i);
		}
		public ITerminalNode[] NEQ() { return GetTokens(SkellParser.NEQ); }
		public ITerminalNode NEQ(int i) {
			return GetToken(SkellParser.NEQ, i);
		}
		public ITerminalNode[] EQ() { return GetTokens(SkellParser.EQ); }
		public ITerminalNode EQ(int i) {
			return GetToken(SkellParser.EQ, i);
		}
		public EqualityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityContext equality() {
		EqualityContext _localctx = new EqualityContext(Context, State);
		EnterRule(_localctx, 2, RULE_equality);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16; comparison();
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EQ || _la==NEQ) {
				{
				{
				State = 17;
				_la = TokenStream.LA(1);
				if ( !(_la==EQ || _la==NEQ) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 18; comparison();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public AdditionContext[] addition() {
			return GetRuleContexts<AdditionContext>();
		}
		public AdditionContext addition(int i) {
			return GetRuleContext<AdditionContext>(i);
		}
		public ITerminalNode[] LT() { return GetTokens(SkellParser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(SkellParser.LT, i);
		}
		public ITerminalNode[] LE() { return GetTokens(SkellParser.LE); }
		public ITerminalNode LE(int i) {
			return GetToken(SkellParser.LE, i);
		}
		public ITerminalNode[] GT() { return GetTokens(SkellParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(SkellParser.GT, i);
		}
		public ITerminalNode[] GE() { return GetTokens(SkellParser.GE); }
		public ITerminalNode GE(int i) {
			return GetToken(SkellParser.GE, i);
		}
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 4, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; addition();
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LE) | (1L << GT) | (1L << GE))) != 0)) {
				{
				{
				State = 25;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LT) | (1L << LE) | (1L << GT) | (1L << GE))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 26; addition();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionContext : ParserRuleContext {
		public MultiplicationContext[] multiplication() {
			return GetRuleContexts<MultiplicationContext>();
		}
		public MultiplicationContext multiplication(int i) {
			return GetRuleContext<MultiplicationContext>(i);
		}
		public ITerminalNode[] ADD() { return GetTokens(SkellParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(SkellParser.ADD, i);
		}
		public ITerminalNode[] SUB() { return GetTokens(SkellParser.SUB); }
		public ITerminalNode SUB(int i) {
			return GetToken(SkellParser.SUB, i);
		}
		public AdditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionContext addition() {
		AdditionContext _localctx = new AdditionContext(Context, State);
		EnterRule(_localctx, 6, RULE_addition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; multiplication();
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ADD || _la==SUB) {
				{
				{
				State = 33;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==SUB) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 34; multiplication();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationContext : ParserRuleContext {
		public UnaryContext[] unary() {
			return GetRuleContexts<UnaryContext>();
		}
		public UnaryContext unary(int i) {
			return GetRuleContext<UnaryContext>(i);
		}
		public ITerminalNode[] DIV() { return GetTokens(SkellParser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(SkellParser.DIV, i);
		}
		public ITerminalNode[] MUL() { return GetTokens(SkellParser.MUL); }
		public ITerminalNode MUL(int i) {
			return GetToken(SkellParser.MUL, i);
		}
		public MultiplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplication; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationContext multiplication() {
		MultiplicationContext _localctx = new MultiplicationContext(Context, State);
		EnterRule(_localctx, 8, RULE_multiplication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; unary();
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DIV || _la==MUL) {
				{
				{
				State = 41;
				_la = TokenStream.LA(1);
				if ( !(_la==DIV || _la==MUL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 42; unary();
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(SkellParser.NOT, 0); }
		public ITerminalNode SUB() { return GetToken(SkellParser.SUB, 0); }
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 10, RULE_unary);
		int _la;
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUB:
			case NOT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				_la = TokenStream.LA(1);
				if ( !(_la==SUB || _la==NOT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 49; unary();
				}
				break;
			case LPAREN:
			case BOOL:
			case NULL:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 50; primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(SkellParser.NUMBER, 0); }
		public ITerminalNode STRING() { return GetToken(SkellParser.STRING, 0); }
		public ITerminalNode BOOL() { return GetToken(SkellParser.BOOL, 0); }
		public ITerminalNode NULL() { return GetToken(SkellParser.NULL, 0); }
		public ITerminalNode LPAREN() { return GetToken(SkellParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(SkellParser.RPAREN, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 12, RULE_primary);
		try {
			State = 61;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53; Match(NUMBER);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54; Match(STRING);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 55; Match(BOOL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 56; Match(NULL);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 57; Match(LPAREN);
				State = 58; expression();
				State = 59; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x17', '\x42', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\a', '\x3', '\x16', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x19', '\v', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x1E', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '!', '\v', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\a', '\x5', '&', '\n', '\x5', '\f', '\x5', 
		'\xE', '\x5', ')', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\a', '\x6', '.', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x31', '\v', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x36', '\n', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '@', '\n', '\b', '\x3', 
		'\b', '\x2', '\x2', '\t', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x2', '\a', '\x3', '\x2', '\x5', '\x6', '\x3', '\x2', '\a', '\n', '\x3', 
		'\x2', '\v', '\f', '\x3', '\x2', '\r', '\xE', '\x4', '\x2', '\f', '\f', 
		'\xF', '\xF', '\x2', '\x43', '\x2', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x12', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\"', '\x3', '\x2', '\x2', '\x2', '\n', '*', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x35', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x10', '\x11', '\x5', '\x4', '\x3', 
		'\x2', '\x11', '\x3', '\x3', '\x2', '\x2', '\x2', '\x12', '\x17', '\x5', 
		'\x6', '\x4', '\x2', '\x13', '\x14', '\t', '\x2', '\x2', '\x2', '\x14', 
		'\x16', '\x5', '\x6', '\x4', '\x2', '\x15', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x19', '\x3', '\x2', '\x2', '\x2', '\x17', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x18', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x19', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x1F', '\x5', '\b', '\x5', '\x2', '\x1B', '\x1C', '\t', 
		'\x3', '\x2', '\x2', '\x1C', '\x1E', '\x5', '\b', '\x5', '\x2', '\x1D', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x1E', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\a', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\'', '\x5', '\n', '\x6', '\x2', '#', 
		'$', '\t', '\x4', '\x2', '\x2', '$', '&', '\x5', '\n', '\x6', '\x2', '%', 
		'#', '\x3', '\x2', '\x2', '\x2', '&', ')', '\x3', '\x2', '\x2', '\x2', 
		'\'', '%', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', 
		'\x2', '(', '\t', '\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', 
		'\x2', '\x2', '*', '/', '\x5', '\f', '\a', '\x2', '+', ',', '\t', '\x5', 
		'\x2', '\x2', ',', '.', '\x5', '\f', '\a', '\x2', '-', '+', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x31', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x33', '\t', '\x6', '\x2', '\x2', '\x33', '\x36', '\x5', '\f', 
		'\a', '\x2', '\x34', '\x36', '\x5', '\xE', '\b', '\x2', '\x35', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\r', '\x3', '\x2', '\x2', '\x2', '\x37', '@', '\a', '\x15', '\x2', 
		'\x2', '\x38', '@', '\a', '\x14', '\x2', '\x2', '\x39', '@', '\a', '\x10', 
		'\x2', '\x2', ':', '@', '\a', '\x13', '\x2', '\x2', ';', '<', '\a', '\x3', 
		'\x2', '\x2', '<', '=', '\x5', '\x2', '\x2', '\x2', '=', '>', '\a', '\x4', 
		'\x2', '\x2', '>', '@', '\x3', '\x2', '\x2', '\x2', '?', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '?', '\x38', '\x3', '\x2', '\x2', '\x2', '?', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '?', ':', '\x3', '\x2', '\x2', '\x2', '?', 
		';', '\x3', '\x2', '\x2', '\x2', '@', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x17', '\x1F', '\'', '/', '\x35', '?',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Generated
