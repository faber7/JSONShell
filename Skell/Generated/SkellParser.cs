//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Skell.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Skell.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
public partial class SkellParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EOL=1, WS=2, KW_TRUE=3, KW_FALSE=4, KW_IF=5, KW_THEN=6, KW_ELSE=7, KW_FOR=8, 
		KW_IN=9, KW_RETURN=10, KW_LET=11, KW_FUN=12, TYPE_OBJECT=13, TYPE_ARRAY=14, 
		TYPE_NUMBER=15, TYPE_STRING=16, TYPE_BOOL=17, LSQR=18, RSQR=19, LCURL=20, 
		RCURL=21, LPAREN=22, RPAREN=23, SYM_PERIOD=24, SYM_COMMA=25, SYM_QUOTE=26, 
		SYM_COLON=27, SYM_DOLLAR=28, OP_ASSGN=29, OP_EQ=30, OP_NE=31, OP_LT=32, 
		OP_LE=33, OP_GT=34, OP_GE=35, OP_NOT=36, OP_OR=37, OP_AND=38, OP_ADD=39, 
		OP_SUB=40, OP_DIV=41, OP_MUL=42, OP_MOD=43, IDENTIFIER=44, STRING=45, 
		NUMBER=46, NONDIGIT=47, DIGIT=48, NONZERO_DIGIT=49, ZERO=50, SIGN=51, 
		INT=52, FRAC=53, EXP=54, HEX=55, UNICODE=56, ESC=57, SAFECODEPOINT=58;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_programExec = 2, RULE_statementBlock = 3, 
		RULE_declaration = 4, RULE_function = 5, RULE_functionArg = 6, RULE_control = 7, 
		RULE_ifControl = 8, RULE_ifThenControl = 9, RULE_ifThenElseControl = 10, 
		RULE_forControl = 11, RULE_returnControl = 12, RULE_expression = 13, RULE_eqExpr = 14, 
		RULE_relExpr = 15, RULE_addExpr = 16, RULE_mulExpr = 17, RULE_unary = 18, 
		RULE_primary = 19, RULE_fnCall = 20, RULE_term = 21, RULE_value = 22, 
		RULE_bool = 23, RULE_array = 24, RULE_pair = 25, RULE_object = 26, RULE_typeName = 27;
	public static readonly string[] ruleNames = {
		"program", "statement", "programExec", "statementBlock", "declaration", 
		"function", "functionArg", "control", "ifControl", "ifThenControl", "ifThenElseControl", 
		"forControl", "returnControl", "expression", "eqExpr", "relExpr", "addExpr", 
		"mulExpr", "unary", "primary", "fnCall", "term", "value", "bool", "array", 
		"pair", "object", "typeName"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\n'", null, "'true'", "'false'", "'if'", "'then'", "'else'", "'for'", 
		"'in'", "'return'", "'let'", "'fun'", "'object'", "'array'", "'number'", 
		"'string'", "'bool'", "'['", "']'", "'{'", "'}'", "'('", "')'", "'.'", 
		"','", "'\"'", "':'", "'$'", "'='", "'=='", "'!='", "'<'", "'<='", "'>'", 
		"'>='", "'!'", "'|'", "'&'", "'+'", "'-'", "'/'", "'*'", "'%'", null, 
		null, null, null, null, null, "'0'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EOL", "WS", "KW_TRUE", "KW_FALSE", "KW_IF", "KW_THEN", "KW_ELSE", 
		"KW_FOR", "KW_IN", "KW_RETURN", "KW_LET", "KW_FUN", "TYPE_OBJECT", "TYPE_ARRAY", 
		"TYPE_NUMBER", "TYPE_STRING", "TYPE_BOOL", "LSQR", "RSQR", "LCURL", "RCURL", 
		"LPAREN", "RPAREN", "SYM_PERIOD", "SYM_COMMA", "SYM_QUOTE", "SYM_COLON", 
		"SYM_DOLLAR", "OP_ASSGN", "OP_EQ", "OP_NE", "OP_LT", "OP_LE", "OP_GT", 
		"OP_GE", "OP_NOT", "OP_OR", "OP_AND", "OP_ADD", "OP_SUB", "OP_DIV", "OP_MUL", 
		"OP_MOD", "IDENTIFIER", "STRING", "NUMBER", "NONDIGIT", "DIGIT", "NONZERO_DIGIT", 
		"ZERO", "SIGN", "INT", "FRAC", "EXP", "HEX", "UNICODE", "ESC", "SAFECODEPOINT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Skell.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SkellParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SkellParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SkellParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 56; statement();
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOL) | (1L << KW_TRUE) | (1L << KW_FALSE) | (1L << KW_IF) | (1L << KW_FOR) | (1L << KW_RETURN) | (1L << KW_LET) | (1L << LSQR) | (1L << LCURL) | (1L << LPAREN) | (1L << SYM_DOLLAR) | (1L << OP_NOT) | (1L << OP_SUB) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode EOL() { return GetToken(SkellParser.EOL, 0); }
		public ProgramExecContext programExec() {
			return GetRuleContext<ProgramExecContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ControlContext control() {
			return GetRuleContext<ControlContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 72;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61; Match(EOL);
				}
				break;
			case SYM_DOLLAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62; programExec();
				State = 63; Match(EOL);
				}
				break;
			case KW_LET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 65; declaration();
				State = 66; Match(EOL);
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case LSQR:
			case LCURL:
			case LPAREN:
			case OP_NOT:
			case OP_SUB:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 68; expression();
				State = 69; Match(EOL);
				}
				break;
			case KW_IF:
			case KW_FOR:
			case KW_RETURN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 71; control();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramExecContext : ParserRuleContext {
		public ITerminalNode SYM_DOLLAR() { return GetToken(SkellParser.SYM_DOLLAR, 0); }
		public ITerminalNode[] EOL() { return GetTokens(SkellParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(SkellParser.EOL, i);
		}
		public ProgramExecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_programExec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramExec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramExecContext programExec() {
		ProgramExecContext _localctx = new ProgramExecContext(Context, State);
		EnterRule(_localctx, 4, RULE_programExec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(SYM_DOLLAR);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WS) | (1L << KW_TRUE) | (1L << KW_FALSE) | (1L << KW_IF) | (1L << KW_THEN) | (1L << KW_ELSE) | (1L << KW_FOR) | (1L << KW_IN) | (1L << KW_RETURN) | (1L << KW_LET) | (1L << KW_FUN) | (1L << TYPE_OBJECT) | (1L << TYPE_ARRAY) | (1L << TYPE_NUMBER) | (1L << TYPE_STRING) | (1L << TYPE_BOOL) | (1L << LSQR) | (1L << RSQR) | (1L << LCURL) | (1L << RCURL) | (1L << LPAREN) | (1L << RPAREN) | (1L << SYM_PERIOD) | (1L << SYM_COMMA) | (1L << SYM_QUOTE) | (1L << SYM_COLON) | (1L << SYM_DOLLAR) | (1L << OP_ASSGN) | (1L << OP_EQ) | (1L << OP_NE) | (1L << OP_LT) | (1L << OP_LE) | (1L << OP_GT) | (1L << OP_GE) | (1L << OP_NOT) | (1L << OP_OR) | (1L << OP_AND) | (1L << OP_ADD) | (1L << OP_SUB) | (1L << OP_DIV) | (1L << OP_MUL) | (1L << OP_MOD) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER) | (1L << NONDIGIT) | (1L << DIGIT) | (1L << NONZERO_DIGIT) | (1L << ZERO) | (1L << SIGN) | (1L << INT) | (1L << FRAC) | (1L << EXP) | (1L << HEX) | (1L << UNICODE) | (1L << ESC) | (1L << SAFECODEPOINT))) != 0)) {
				{
				{
				State = 75;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==EOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		public ITerminalNode LCURL() { return GetToken(SkellParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SkellParser.RCURL, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(LCURL);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EOL) | (1L << KW_TRUE) | (1L << KW_FALSE) | (1L << KW_IF) | (1L << KW_FOR) | (1L << KW_RETURN) | (1L << KW_LET) | (1L << LSQR) | (1L << LCURL) | (1L << LPAREN) | (1L << SYM_DOLLAR) | (1L << OP_NOT) | (1L << OP_SUB) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				{
				State = 82; statement();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 88; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode KW_LET() { return GetToken(SkellParser.KW_LET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public ITerminalNode OP_ASSGN() { return GetToken(SkellParser.OP_ASSGN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(KW_LET);
			State = 91; Match(IDENTIFIER);
			State = 92; Match(OP_ASSGN);
			State = 95;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case LSQR:
			case LCURL:
			case LPAREN:
			case OP_NOT:
			case OP_SUB:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				{
				State = 93; expression();
				}
				break;
			case KW_FUN:
				{
				State = 94; function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode KW_FUN() { return GetToken(SkellParser.KW_FUN, 0); }
		public ITerminalNode LPAREN() { return GetToken(SkellParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(SkellParser.RPAREN, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public FunctionArgContext[] functionArg() {
			return GetRuleContexts<FunctionArgContext>();
		}
		public FunctionArgContext functionArg(int i) {
			return GetRuleContext<FunctionArgContext>(i);
		}
		public ITerminalNode[] SYM_COMMA() { return GetTokens(SkellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(SkellParser.SYM_COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 10, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97; Match(KW_FUN);
			State = 98; Match(LPAREN);
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE_OBJECT) | (1L << TYPE_ARRAY) | (1L << TYPE_NUMBER) | (1L << TYPE_STRING) | (1L << TYPE_BOOL))) != 0)) {
				{
				State = 99; functionArg();
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 100; Match(SYM_COMMA);
					State = 101; functionArg();
					}
					}
					State = 106;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 109; Match(RPAREN);
			State = 110; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public FunctionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArg; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgContext functionArg() {
		FunctionArgContext _localctx = new FunctionArgContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; typeName();
			State = 113; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlContext : ParserRuleContext {
		public IfControlContext ifControl() {
			return GetRuleContext<IfControlContext>(0);
		}
		public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		public ReturnControlContext returnControl() {
			return GetRuleContext<ReturnControlContext>(0);
		}
		public ControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlContext control() {
		ControlContext _localctx = new ControlContext(Context, State);
		EnterRule(_localctx, 14, RULE_control);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115; ifControl();
				}
				break;
			case KW_FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116; forControl();
				}
				break;
			case KW_RETURN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 117; returnControl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfControlContext : ParserRuleContext {
		public IfThenControlContext ifThenControl() {
			return GetRuleContext<IfThenControlContext>(0);
		}
		public IfThenElseControlContext ifThenElseControl() {
			return GetRuleContext<IfThenElseControlContext>(0);
		}
		public IfControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfControlContext ifControl() {
		IfControlContext _localctx = new IfControlContext(Context, State);
		EnterRule(_localctx, 16, RULE_ifControl);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; ifThenControl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 121; ifThenElseControl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenControlContext : ParserRuleContext {
		public ITerminalNode KW_IF() { return GetToken(SkellParser.KW_IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode KW_THEN() { return GetToken(SkellParser.KW_THEN, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public IfThenControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenControlContext ifThenControl() {
		IfThenControlContext _localctx = new IfThenControlContext(Context, State);
		EnterRule(_localctx, 18, RULE_ifThenControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124; Match(KW_IF);
			State = 125; expression();
			State = 126; Match(KW_THEN);
			State = 127; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseControlContext : ParserRuleContext {
		public IfThenControlContext ifThenControl() {
			return GetRuleContext<IfThenControlContext>(0);
		}
		public ITerminalNode KW_ELSE() { return GetToken(SkellParser.KW_ELSE, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public IfControlContext ifControl() {
			return GetRuleContext<IfControlContext>(0);
		}
		public IfThenElseControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElseControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseControlContext ifThenElseControl() {
		IfThenElseControlContext _localctx = new IfThenElseControlContext(Context, State);
		EnterRule(_localctx, 20, RULE_ifThenElseControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; ifThenControl();
			State = 130; Match(KW_ELSE);
			State = 133;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURL:
				{
				State = 131; statementBlock();
				}
				break;
			case KW_IF:
				{
				State = 132; ifControl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public ITerminalNode KW_FOR() { return GetToken(SkellParser.KW_FOR, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public ITerminalNode KW_IN() { return GetToken(SkellParser.KW_IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 22, RULE_forControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135; Match(KW_FOR);
			State = 136; Match(IDENTIFIER);
			State = 137; Match(KW_IN);
			State = 138; expression();
			State = 139; statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnControlContext : ParserRuleContext {
		public ITerminalNode KW_RETURN() { return GetToken(SkellParser.KW_RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnControl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnControlContext returnControl() {
		ReturnControlContext _localctx = new ReturnControlContext(Context, State);
		EnterRule(_localctx, 24, RULE_returnControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(KW_RETURN);
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 142; expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public EqExprContext eqExpr() {
			return GetRuleContext<EqExprContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; eqExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqExprContext : ParserRuleContext {
		public RelExprContext[] relExpr() {
			return GetRuleContexts<RelExprContext>();
		}
		public RelExprContext relExpr(int i) {
			return GetRuleContext<RelExprContext>(i);
		}
		public ITerminalNode OP_NE() { return GetToken(SkellParser.OP_NE, 0); }
		public ITerminalNode OP_EQ() { return GetToken(SkellParser.OP_EQ, 0); }
		public EqExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eqExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqExprContext eqExpr() {
		EqExprContext _localctx = new EqExprContext(Context, State);
		EnterRule(_localctx, 28, RULE_eqExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; relExpr();
			State = 150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 148;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_EQ || _la==OP_NE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 149; relExpr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelExprContext : ParserRuleContext {
		public AddExprContext[] addExpr() {
			return GetRuleContexts<AddExprContext>();
		}
		public AddExprContext addExpr(int i) {
			return GetRuleContext<AddExprContext>(i);
		}
		public ITerminalNode OP_GT() { return GetToken(SkellParser.OP_GT, 0); }
		public ITerminalNode OP_GE() { return GetToken(SkellParser.OP_GE, 0); }
		public ITerminalNode OP_LT() { return GetToken(SkellParser.OP_LT, 0); }
		public ITerminalNode OP_LE() { return GetToken(SkellParser.OP_LE, 0); }
		public RelExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelExprContext relExpr() {
		RelExprContext _localctx = new RelExprContext(Context, State);
		EnterRule(_localctx, 30, RULE_relExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; addExpr();
			State = 155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 153;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_LT) | (1L << OP_LE) | (1L << OP_GT) | (1L << OP_GE))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 154; addExpr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddExprContext : ParserRuleContext {
		public MulExprContext[] mulExpr() {
			return GetRuleContexts<MulExprContext>();
		}
		public MulExprContext mulExpr(int i) {
			return GetRuleContext<MulExprContext>(i);
		}
		public ITerminalNode[] OP_SUB() { return GetTokens(SkellParser.OP_SUB); }
		public ITerminalNode OP_SUB(int i) {
			return GetToken(SkellParser.OP_SUB, i);
		}
		public ITerminalNode[] OP_ADD() { return GetTokens(SkellParser.OP_ADD); }
		public ITerminalNode OP_ADD(int i) {
			return GetToken(SkellParser.OP_ADD, i);
		}
		public AddExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddExprContext addExpr() {
		AddExprContext _localctx = new AddExprContext(Context, State);
		EnterRule(_localctx, 32, RULE_addExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; mulExpr();
			State = 162;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 158;
					_la = TokenStream.LA(1);
					if ( !(_la==OP_ADD || _la==OP_SUB) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 159; mulExpr();
					}
					} 
				}
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulExprContext : ParserRuleContext {
		public UnaryContext[] unary() {
			return GetRuleContexts<UnaryContext>();
		}
		public UnaryContext unary(int i) {
			return GetRuleContext<UnaryContext>(i);
		}
		public ITerminalNode[] OP_DIV() { return GetTokens(SkellParser.OP_DIV); }
		public ITerminalNode OP_DIV(int i) {
			return GetToken(SkellParser.OP_DIV, i);
		}
		public ITerminalNode[] OP_MUL() { return GetTokens(SkellParser.OP_MUL); }
		public ITerminalNode OP_MUL(int i) {
			return GetToken(SkellParser.OP_MUL, i);
		}
		public MulExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulExpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulExprContext mulExpr() {
		MulExprContext _localctx = new MulExprContext(Context, State);
		EnterRule(_localctx, 34, RULE_mulExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; unary();
			State = 170;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 166;
					_la = TokenStream.LA(1);
					if ( !(_la==OP_DIV || _la==OP_MUL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 167; unary();
					}
					} 
				}
				State = 172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		public ITerminalNode OP_NOT() { return GetToken(SkellParser.OP_NOT, 0); }
		public ITerminalNode OP_SUB() { return GetToken(SkellParser.OP_SUB, 0); }
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(Context, State);
		EnterRule(_localctx, 36, RULE_unary);
		int _la;
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OP_NOT:
			case OP_SUB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_NOT || _la==OP_SUB) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 174; unary();
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
			case LSQR:
			case LCURL:
			case LPAREN:
			case IDENTIFIER:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175; primary(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public FnCallContext fnCall() {
			return GetRuleContext<FnCallContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(SkellParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(SkellParser.RPAREN, 0); }
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public ITerminalNode LSQR() { return GetToken(SkellParser.LSQR, 0); }
		public ITerminalNode RSQR() { return GetToken(SkellParser.RSQR, 0); }
		public ITerminalNode STRING() { return GetToken(SkellParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(SkellParser.NUMBER, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		return primary(0);
	}

	private PrimaryContext primary(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PrimaryContext _localctx = new PrimaryContext(Context, _parentState);
		PrimaryContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_primary, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 179; term();
				}
				break;
			case 2:
				{
				State = 180; fnCall();
				}
				break;
			case 3:
				{
				State = 181; Match(LPAREN);
				State = 182; expression();
				State = 183; Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 193;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new PrimaryContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_primary);
					State = 187;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 188; Match(LSQR);
					State = 189;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 190; Match(RSQR);
					}
					} 
				}
				State = 195;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FnCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FnCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fnCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FnCallContext fnCall() {
		FnCallContext _localctx = new FnCallContext(Context, State);
		EnterRule(_localctx, 40, RULE_fnCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(IDENTIFIER);
			State = 198;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 197; expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 200;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(SkellParser.IDENTIFIER, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 42, RULE_term);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case LSQR:
			case LCURL:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202; value();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ObjectContext @object() {
			return GetRuleContext<ObjectContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(SkellParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(SkellParser.NUMBER, 0); }
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 44, RULE_value);
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LCURL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206; @object();
				}
				break;
			case LSQR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207; array();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 208; Match(STRING);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 209; Match(NUMBER);
				}
				break;
			case KW_TRUE:
			case KW_FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 210; @bool();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode KW_TRUE() { return GetToken(SkellParser.KW_TRUE, 0); }
		public ITerminalNode KW_FALSE() { return GetToken(SkellParser.KW_FALSE, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 46, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_TRUE || _la==KW_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode LSQR() { return GetToken(SkellParser.LSQR, 0); }
		public ITerminalNode RSQR() { return GetToken(SkellParser.RSQR, 0); }
		public ITerminalNode[] EOL() { return GetTokens(SkellParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(SkellParser.EOL, i);
		}
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode[] SYM_COMMA() { return GetTokens(SkellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(SkellParser.SYM_COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 48, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(LSQR);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 216; Match(EOL);
				}
			}

			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_TRUE) | (1L << KW_FALSE) | (1L << LSQR) | (1L << LCURL) | (1L << IDENTIFIER) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				State = 219; term();
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 220; Match(SYM_COMMA);
					State = 222;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==EOL) {
						{
						State = 221; Match(EOL);
						}
					}

					State = 224; term();
					}
					}
					State = 229;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 232; Match(RSQR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(SkellParser.STRING, 0); }
		public ITerminalNode SYM_COLON() { return GetToken(SkellParser.SYM_COLON, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 50, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(STRING);
			State = 235; Match(SYM_COLON);
			State = 236; term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectContext : ParserRuleContext {
		public ITerminalNode LCURL() { return GetToken(SkellParser.LCURL, 0); }
		public ITerminalNode RCURL() { return GetToken(SkellParser.RCURL, 0); }
		public ITerminalNode[] EOL() { return GetTokens(SkellParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(SkellParser.EOL, i);
		}
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ITerminalNode[] SYM_COMMA() { return GetTokens(SkellParser.SYM_COMMA); }
		public ITerminalNode SYM_COMMA(int i) {
			return GetToken(SkellParser.SYM_COMMA, i);
		}
		public ObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectContext @object() {
		ObjectContext _localctx = new ObjectContext(Context, State);
		EnterRule(_localctx, 52, RULE_object);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(LCURL);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 239; Match(EOL);
				}
			}

			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 242; pair();
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SYM_COMMA) {
					{
					{
					State = 243; Match(SYM_COMMA);
					State = 245;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==EOL) {
						{
						State = 244; Match(EOL);
						}
					}

					State = 247; pair();
					}
					}
					State = 252;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 255; Match(RCURL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode TYPE_OBJECT() { return GetToken(SkellParser.TYPE_OBJECT, 0); }
		public ITerminalNode TYPE_ARRAY() { return GetToken(SkellParser.TYPE_ARRAY, 0); }
		public ITerminalNode TYPE_NUMBER() { return GetToken(SkellParser.TYPE_NUMBER, 0); }
		public ITerminalNode TYPE_STRING() { return GetToken(SkellParser.TYPE_STRING, 0); }
		public ITerminalNode TYPE_BOOL() { return GetToken(SkellParser.TYPE_BOOL, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISkellVisitor<TResult> typedVisitor = visitor as ISkellVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE_OBJECT) | (1L << TYPE_ARRAY) | (1L << TYPE_NUMBER) | (1L << TYPE_STRING) | (1L << TYPE_BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return primary_sempred((PrimaryContext)_localctx, predIndex);
		}
		return true;
	}
	private bool primary_sempred(PrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '<', '\x106', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x3', '\x2', '\x6', '\x2', '<', '\n', '\x2', '\r', '\x2', '\xE', 
		'\x2', '=', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', 'K', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\a', '\x4', 'O', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'R', 
		'\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 'V', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', 'Y', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x62', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', 'i', '\n', '\a', '\f', '\a', '\xE', 
		'\a', 'l', '\v', '\a', '\x5', '\a', 'n', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x5', '\t', 'y', '\n', '\t', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '}', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x5', '\f', '\x88', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x92', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x99', '\n', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x9E', '\n', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\xA3', 
		'\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xA6', '\v', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xAB', '\n', '\x13', 
		'\f', '\x13', '\xE', '\x13', '\xAE', '\v', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\xB3', '\n', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x5', '\x15', '\xBC', '\n', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xC2', '\n', '\x15', 
		'\f', '\x15', '\xE', '\x15', '\xC5', '\v', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x6', '\x16', '\xC9', '\n', '\x16', '\r', '\x16', '\xE', '\x16', 
		'\xCA', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\xCF', '\n', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\xD6', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x5', '\x1A', '\xDC', '\n', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\xE1', '\n', '\x1A', '\x3', 
		'\x1A', '\a', '\x1A', '\xE4', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', 
		'\xE7', '\v', '\x1A', '\x5', '\x1A', '\xE9', '\n', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\xF3', '\n', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\xF8', '\n', '\x1C', 
		'\x3', '\x1C', '\a', '\x1C', '\xFB', '\n', '\x1C', '\f', '\x1C', '\xE', 
		'\x1C', '\xFE', '\v', '\x1C', '\x5', '\x1C', '\x100', '\n', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x2', 
		'\x3', '(', '\x1E', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', '\x2', 
		'\v', '\x3', '\x2', '\x3', '\x3', '\x3', '\x2', ' ', '!', '\x3', '\x2', 
		'\"', '%', '\x3', '\x2', ')', '*', '\x3', '\x2', '+', ',', '\x4', '\x2', 
		'&', '&', '*', '*', '\x3', '\x2', '.', '\x30', '\x3', '\x2', '\x5', '\x6', 
		'\x3', '\x2', '\xF', '\x13', '\x2', '\x10E', '\x2', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x4', 'J', '\x3', '\x2', '\x2', '\x2', '\x6', 'L', '\x3', 
		'\x2', '\x2', '\x2', '\b', 'S', '\x3', '\x2', '\x2', '\x2', '\n', '\\', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\xE', 'r', '\x3', '\x2', '\x2', '\x2', '\x10', 'x', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '|', '\x3', '\x2', '\x2', '\x2', '\x14', '~', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x83', '\x3', '\x2', '\x2', '\x2', '\x18', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x93', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x95', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\x9A', '\x3', '\x2', '\x2', '\x2', '\"', '\x9F', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xA7', '\x3', '\x2', '\x2', '\x2', '&', '\xB2', 
		'\x3', '\x2', '\x2', '\x2', '(', '\xBB', '\x3', '\x2', '\x2', '\x2', '*', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', ',', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '.', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x30', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\x36', '\xF0', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x103', '\x3', '\x2', '\x2', '\x2', ':', '<', '\x5', '\x4', 
		'\x3', '\x2', ';', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', 
		'\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x3', '\x3', '\x2', '\x2', '\x2', '?', 'K', '\a', 
		'\x3', '\x2', '\x2', '@', '\x41', '\x5', '\x6', '\x4', '\x2', '\x41', 
		'\x42', '\a', '\x3', '\x2', '\x2', '\x42', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\x5', '\n', '\x6', '\x2', '\x44', '\x45', '\a', '\x3', 
		'\x2', '\x2', '\x45', 'K', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x5', 
		'\x1C', '\xF', '\x2', 'G', 'H', '\a', '\x3', '\x2', '\x2', 'H', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'K', '\x5', '\x10', '\t', '\x2', 'J', '?', '\x3', 
		'\x2', '\x2', '\x2', 'J', '@', '\x3', '\x2', '\x2', '\x2', 'J', '\x43', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x46', '\x3', '\x2', '\x2', '\x2', 'J', 
		'I', '\x3', '\x2', '\x2', '\x2', 'K', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'L', 'P', '\a', '\x1E', '\x2', '\x2', 'M', 'O', '\n', '\x2', '\x2', '\x2', 
		'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'R', '\x3', '\x2', '\x2', '\x2', 
		'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'Q', '\a', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'W', '\a', '\x16', '\x2', '\x2', 'T', 'V', '\x5', '\x4', '\x3', 
		'\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Z', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\a', '\x17', '\x2', '\x2', '[', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\\', ']', '\a', '\r', '\x2', '\x2', ']', '^', '\a', '.', 
		'\x2', '\x2', '^', '\x61', '\a', '\x1F', '\x2', '\x2', '_', '\x62', '\x5', 
		'\x1C', '\xF', '\x2', '`', '\x62', '\x5', '\f', '\a', '\x2', '\x61', '_', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '`', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\a', '\xE', '\x2', 
		'\x2', '\x64', 'm', '\a', '\x18', '\x2', '\x2', '\x65', 'j', '\x5', '\xE', 
		'\b', '\x2', '\x66', 'g', '\a', '\x1B', '\x2', '\x2', 'g', 'i', '\x5', 
		'\xE', '\b', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'i', 'l', 
		'\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 
		'k', '\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', '\x2', 
		'l', 'j', '\x3', '\x2', '\x2', '\x2', 'm', '\x65', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'p', '\a', '\x19', '\x2', '\x2', 'p', 'q', '\x5', '\b', '\x5', 
		'\x2', 'q', '\r', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\x5', '\x38', 
		'\x1D', '\x2', 's', 't', '\a', '.', '\x2', '\x2', 't', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'y', '\x5', '\x12', '\n', '\x2', 'v', 'y', '\x5', '\x18', 
		'\r', '\x2', 'w', 'y', '\x5', '\x1A', '\xE', '\x2', 'x', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'y', '\x11', '\x3', '\x2', '\x2', '\x2', 'z', '}', '\x5', 
		'\x14', '\v', '\x2', '{', '}', '\x5', '\x16', '\f', '\x2', '|', 'z', '\x3', 
		'\x2', '\x2', '\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '}', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\a', '\a', '\x2', '\x2', '\x7F', 
		'\x80', '\x5', '\x1C', '\xF', '\x2', '\x80', '\x81', '\a', '\b', '\x2', 
		'\x2', '\x81', '\x82', '\x5', '\b', '\x5', '\x2', '\x82', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x84', '\x5', '\x14', '\v', '\x2', '\x84', 
		'\x87', '\a', '\t', '\x2', '\x2', '\x85', '\x88', '\x5', '\b', '\x5', 
		'\x2', '\x86', '\x88', '\x5', '\x12', '\n', '\x2', '\x87', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x86', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\a', '\n', '\x2', 
		'\x2', '\x8A', '\x8B', '\a', '.', '\x2', '\x2', '\x8B', '\x8C', '\a', 
		'\v', '\x2', '\x2', '\x8C', '\x8D', '\x5', '\x1C', '\xF', '\x2', '\x8D', 
		'\x8E', '\x5', '\b', '\x5', '\x2', '\x8E', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\x91', '\a', '\f', '\x2', '\x2', '\x90', '\x92', '\x5', 
		'\x1C', '\xF', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', '\x2', '\x91', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x94', '\x5', '\x1E', '\x10', '\x2', '\x94', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x98', '\x5', ' ', '\x11', '\x2', '\x96', 
		'\x97', '\t', '\x3', '\x2', '\x2', '\x97', '\x99', '\x5', ' ', '\x11', 
		'\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x9D', '\x5', '\"', '\x12', '\x2', '\x9B', '\x9C', '\t', '\x4', '\x2', 
		'\x2', '\x9C', '\x9E', '\x5', '\"', '\x12', '\x2', '\x9D', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA4', '\x5', '$', '\x13', '\x2', 
		'\xA0', '\xA1', '\t', '\x5', '\x2', '\x2', '\xA1', '\xA3', '\x5', '$', 
		'\x13', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA6', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', '#', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xAC', 
		'\x5', '&', '\x14', '\x2', '\xA8', '\xA9', '\t', '\x6', '\x2', '\x2', 
		'\xA9', '\xAB', '\x5', '&', '\x14', '\x2', '\xAA', '\xA8', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAA', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '%', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xB0', '\t', '\a', '\x2', '\x2', '\xB0', '\xB3', 
		'\x5', '&', '\x14', '\x2', '\xB1', '\xB3', '\x5', '(', '\x15', '\x2', 
		'\xB2', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', '\xB3', '\'', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', 
		'\b', '\x15', '\x1', '\x2', '\xB5', '\xBC', '\x5', ',', '\x17', '\x2', 
		'\xB6', '\xBC', '\x5', '*', '\x16', '\x2', '\xB7', '\xB8', '\a', '\x18', 
		'\x2', '\x2', '\xB8', '\xB9', '\x5', '\x1C', '\xF', '\x2', '\xB9', '\xBA', 
		'\a', '\x19', '\x2', '\x2', '\xBA', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\xBB', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xBB', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\f', '\x5', '\x2', '\x2', 
		'\xBE', '\xBF', '\a', '\x14', '\x2', '\x2', '\xBF', '\xC0', '\t', '\b', 
		'\x2', '\x2', '\xC0', '\xC2', '\a', '\x15', '\x2', '\x2', '\xC1', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC3', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', ')', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\xC8', '\a', '.', '\x2', '\x2', '\xC7', 
		'\xC9', '\x5', '\x1C', '\xF', '\x2', '\xC8', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'+', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCF', '\x5', '.', '\x18', '\x2', 
		'\xCD', '\xCF', '\a', '.', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCF', '-', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\xD6', '\x5', '\x36', '\x1C', '\x2', 
		'\xD1', '\xD6', '\x5', '\x32', '\x1A', '\x2', '\xD2', '\xD6', '\a', '/', 
		'\x2', '\x2', '\xD3', '\xD6', '\a', '\x30', '\x2', '\x2', '\xD4', '\xD6', 
		'\x5', '\x30', '\x19', '\x2', '\xD5', '\xD0', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '/', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\xD8', '\t', '\t', '\x2', '\x2', '\xD8', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\xD9', '\xDB', '\a', '\x14', '\x2', '\x2', '\xDA', '\xDC', '\a', 
		'\x3', '\x2', '\x2', '\xDB', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xE5', '\x5', ',', '\x17', '\x2', '\xDE', '\xE0', '\a', 
		'\x1B', '\x2', '\x2', '\xDF', '\xE1', '\a', '\x3', '\x2', '\x2', '\xE0', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE4', '\x5', 
		',', '\x17', '\x2', '\xE3', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE7', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\a', 
		'\x15', '\x2', '\x2', '\xEB', '\x33', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xED', '\a', '/', '\x2', '\x2', '\xED', '\xEE', '\a', '\x1D', '\x2', 
		'\x2', '\xEE', '\xEF', '\x5', ',', '\x17', '\x2', '\xEF', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xF2', '\a', '\x16', '\x2', '\x2', '\xF1', 
		'\xF3', '\a', '\x3', '\x2', '\x2', '\xF2', '\xF1', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xFC', '\x5', '\x34', '\x1B', '\x2', '\xF5', 
		'\xF7', '\a', '\x1B', '\x2', '\x2', '\xF6', '\xF8', '\a', '\x3', '\x2', 
		'\x2', '\xF7', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xFB', '\x5', '\x34', '\x1B', '\x2', '\xFA', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x101', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x102', '\a', '\x17', '\x2', '\x2', '\x102', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x104', '\t', '\n', '\x2', '\x2', '\x104', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '=', 'J', 'P', 'W', '\x61', 'j', 'm', 'x', 
		'|', '\x87', '\x91', '\x98', '\x9D', '\xA4', '\xAC', '\xB2', '\xBB', '\xC3', 
		'\xCA', '\xCE', '\xD5', '\xDB', '\xE0', '\xE5', '\xE8', '\xF2', '\xF7', 
		'\xFC', '\xFF',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Skell.Generated
